
ESC_Drive_Motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a228  0800a228  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a230  0800a230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a234  0800a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005ec  20000000  0800a238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001364  200005ec  0800a824  000205ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001950  0800a824  00021950  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 10 .debug_line   00033bed  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00061d75  00000000  00000000  00054209  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000094aa  00000000  00000000  000b5f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002230  00000000  00000000  000bf428  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0010ef89  00000000  00000000  000c1658  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004fe0  00000000  00000000  001d05e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00023577  00000000  00000000  001d55c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000fb61  00000000  00000000  001f8b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000f7  00000000  00000000  002086a0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006698  00000000  00000000  00208798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200005ec 	.word	0x200005ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009d6c 	.word	0x08009d6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200005f0 	.word	0x200005f0
 800021c:	08009d6c 	.word	0x08009d6c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000522:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x6>)
  ldr r1, =_edata
 8000526:	490e      	ldr	r1, [pc, #56]	; (8000560 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000528:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <LoopForever+0xe>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <LoopForever+0x12>)
  ldr r4, =_ebss
 800053c:	4c0b      	ldr	r4, [pc, #44]	; (800056c <LoopForever+0x16>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054a:	f002 fcaf 	bl	8002eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054e:	f009 fbe1 	bl	8009d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000552:	f000 f853 	bl	80005fc <main>

08000556 <LoopForever>:

LoopForever:
    b LoopForever
 8000556:	e7fe      	b.n	8000556 <LoopForever>
  ldr   r0, =_estack
 8000558:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000560:	200005ec 	.word	0x200005ec
  ldr r2, =_sidata
 8000564:	0800a238 	.word	0x0800a238
  ldr r2, =_sbss
 8000568:	200005ec 	.word	0x200005ec
  ldr r4, =_ebss
 800056c:	20001950 	.word	0x20001950

08000570 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <BusFault_Handler>
	...

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	2100      	movs	r1, #0
{
 8000578:	b0a5      	sub	sp, #148	; 0x94
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057c:	a805      	add	r0, sp, #20
 800057e:	2238      	movs	r2, #56	; 0x38
 8000580:	f009 fbec 	bl	8009d5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	4621      	mov	r1, r4
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	e9cd 4400 	strd	r4, r4, [sp]
 800058e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000592:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000594:	f009 fbe2 	bl	8009d5c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000598:	4620      	mov	r0, r4
 800059a:	f004 f819 	bl	80045d0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	2503      	movs	r5, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ac:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80005ae:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80005b2:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005b8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ba:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f004 f884 	bl	80046cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80005c6:	4668      	mov	r0, sp
 80005c8:	2108      	movs	r1, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	e9cd 5401 	strd	r5, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80005d4:	f004 facc 	bl	8004b70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80005d8:	f249 0102 	movw	r1, #36866	; 0x9002
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e4:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80005e6:	9113      	str	r1, [sp, #76]	; 0x4c
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005e8:	921f      	str	r2, [sp, #124]	; 0x7c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005ea:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ec:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ee:	f004 fcb9 	bl	8004f64 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80005f2:	f004 fcaf 	bl	8004f54 <HAL_RCC_EnableCSS>
}
 80005f6:	b025      	add	sp, #148	; 0x94
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop

080005fc <main>:
{
 80005fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000600:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 8000602:	f002 fc61 	bl	8002ec8 <HAL_Init>
  SystemClock_Config();
 8000606:	f7ff ffb5 	bl	8000574 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4bbe      	ldr	r3, [pc, #760]	; (8000904 <main+0x308>)
  hadc1.Instance = ADC1;
 800060c:	4ebe      	ldr	r6, [pc, #760]	; (8000908 <main+0x30c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc2.Instance = ADC2;
 8000610:	4fbe      	ldr	r7, [pc, #760]	; (800090c <main+0x310>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	f042 0204 	orr.w	r2, r2, #4
 8000616:	64da      	str	r2, [r3, #76]	; 0x4c
 8000618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800061a:	f002 0204 	and.w	r2, r2, #4
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000624:	f042 0220 	orr.w	r2, r2, #32
 8000628:	64da      	str	r2, [r3, #76]	; 0x4c
 800062a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800062c:	f002 0220 	and.w	r2, r2, #32
 8000630:	9202      	str	r2, [sp, #8]
 8000632:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	64da      	str	r2, [r3, #76]	; 0x4c
 800063c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800063e:	f002 0201 	and.w	r2, r2, #1
 8000642:	9203      	str	r2, [sp, #12]
 8000644:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000648:	f042 0202 	orr.w	r2, r2, #2
 800064c:	64da      	str	r2, [r3, #76]	; 0x4c
 800064e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  ADC_MultiModeTypeDef multimode = {0};
 8000650:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000658:	4621      	mov	r1, r4
 800065a:	223c      	movs	r2, #60	; 0x3c
 800065c:	a818      	add	r0, sp, #96	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	9b04      	ldr	r3, [sp, #16]
  ADC_MultiModeTypeDef multimode = {0};
 8000660:	940d      	str	r4, [sp, #52]	; 0x34
 8000662:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000666:	f009 fb79 	bl	8009d5c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	4621      	mov	r1, r4
 800066c:	2220      	movs	r2, #32
 800066e:	a810      	add	r0, sp, #64	; 0x40
 8000670:	f009 fb74 	bl	8009d5c <memset>
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000674:	f04f 0b01 	mov.w	fp, #1
  hadc1.Init.NbrOfConversion = 2;
 8000678:	2502      	movs	r5, #2
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	f04f 0a04 	mov.w	sl, #4
  hadc1.Instance = ADC1;
 800067e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000682:	f44f 2800 	mov.w	r8, #524288	; 0x80000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000686:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	4630      	mov	r0, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800068c:	e9c6 2800 	strd	r2, r8, [r6]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000690:	f8c6 900c 	str.w	r9, [r6, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000694:	6235      	str	r5, [r6, #32]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	60b4      	str	r4, [r6, #8]
  hadc1.Init.GainCompensation = 0;
 8000698:	6134      	str	r4, [r6, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069a:	7734      	strb	r4, [r6, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800069c:	7774      	strb	r4, [r6, #29]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a6:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006aa:	63f4      	str	r4, [r6, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006ac:	f886 4040 	strb.w	r4, [r6, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b0:	e9c6 ba05 	strd	fp, sl, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	f002 fc40 	bl	8002f38 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b8:	a90b      	add	r1, sp, #44	; 0x2c
 80006ba:	4630      	mov	r0, r6
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006bc:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006be:	f003 f9ff 	bl	8003ac0 <HAL_ADCEx_MultiModeConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006c2:	4a93      	ldr	r2, [pc, #588]	; (8000910 <main+0x314>)
  sConfigInjected.InjectedNbrOfConversion = 2;
 80006c4:	9520      	str	r5, [sp, #128]	; 0x80
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006c6:	2309      	movs	r3, #9
 80006c8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 80006cc:	2202      	movs	r2, #2
 80006ce:	237f      	movs	r3, #127	; 0x7f
 80006d0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80006d4:	2204      	movs	r2, #4
 80006d6:	2300      	movs	r3, #0
 80006d8:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006dc:	a918      	add	r1, sp, #96	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80006de:	2284      	movs	r2, #132	; 0x84
 80006e0:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006e2:	4630      	mov	r0, r6
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80006e4:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006e8:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006ec:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006f0:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006f4:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006f8:	f002 ff40 	bl	800357c <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80006fc:	4a85      	ldr	r2, [pc, #532]	; (8000914 <main+0x318>)
 80006fe:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000702:	a918      	add	r1, sp, #96	; 0x60
 8000704:	4630      	mov	r0, r6
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000706:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800070a:	f002 ff37 	bl	800357c <HAL_ADCEx_InjectedConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 800070e:	4a82      	ldr	r2, [pc, #520]	; (8000918 <main+0x31c>)
 8000710:	9210      	str	r2, [sp, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000712:	2306      	movs	r3, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000714:	227f      	movs	r2, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	a910      	add	r1, sp, #64	; 0x40
 8000718:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071c:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800071e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  sConfig.Offset = 0;
 8000722:	e9cd a414 	strd	sl, r4, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000726:	f002 fd15 	bl	8003154 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800072a:	4a7c      	ldr	r2, [pc, #496]	; (800091c <main+0x320>)
 800072c:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	4630      	mov	r0, r6
 8000730:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000732:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	f002 fd0d 	bl	8003154 <HAL_ADC_ConfigChannel>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800073a:	4621      	mov	r1, r4
 800073c:	223c      	movs	r2, #60	; 0x3c
 800073e:	a818      	add	r0, sp, #96	; 0x60
 8000740:	f009 fb0c 	bl	8009d5c <memset>
  hadc2.Instance = ADC2;
 8000744:	4a76      	ldr	r2, [pc, #472]	; (8000920 <main+0x324>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000746:	f8c7 8004 	str.w	r8, [r7, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4638      	mov	r0, r7
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800074c:	e9c7 4902 	strd	r4, r9, [r7, #8]
  hadc2.Instance = ADC2;
 8000750:	603a      	str	r2, [r7, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000752:	e9c7 4b04 	strd	r4, fp, [r7, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	f8c7 a018 	str.w	sl, [r7, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800075a:	773c      	strb	r4, [r7, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800075c:	777c      	strb	r4, [r7, #29]
  hadc2.Init.NbrOfConversion = 1;
 800075e:	f8c7 b020 	str.w	fp, [r7, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000762:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000766:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076a:	63fc      	str	r4, [r7, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076c:	f887 4040 	strb.w	r4, [r7, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000770:	f002 fbe2 	bl	8002f38 <HAL_ADC_Init>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000774:	4a66      	ldr	r2, [pc, #408]	; (8000910 <main+0x314>)
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000776:	9520      	str	r5, [sp, #128]	; 0x80
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000778:	2309      	movs	r3, #9
 800077a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800077e:	2202      	movs	r2, #2
 8000780:	237f      	movs	r3, #127	; 0x7f
 8000782:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000786:	2204      	movs	r2, #4
 8000788:	2300      	movs	r3, #0
 800078a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800078e:	a918      	add	r1, sp, #96	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000790:	2284      	movs	r2, #132	; 0x84
 8000792:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000794:	4638      	mov	r0, r7
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000796:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800079a:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  sConfigInjected.AutoInjectedConv = DISABLE;
 800079e:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007a2:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007a6:	f88d 4090 	strb.w	r4, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007aa:	f002 fee7 	bl	800357c <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80007ae:	4a5d      	ldr	r2, [pc, #372]	; (8000924 <main+0x328>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80007b0:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007b4:	4638      	mov	r0, r7
 80007b6:	a918      	add	r1, sp, #96	; 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80007b8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007bc:	f002 fede 	bl	800357c <HAL_ADCEx_InjectedConfigChannel>
  hcomp1.Instance = COMP1;
 80007c0:	4a59      	ldr	r2, [pc, #356]	; (8000928 <main+0x32c>)
 80007c2:	495a      	ldr	r1, [pc, #360]	; (800092c <main+0x330>)
 80007c4:	6011      	str	r1, [r2, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80007c6:	f44f 0640 	mov.w	r6, #12582912	; 0xc00000
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007ca:	4610      	mov	r0, r2
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80007cc:	6096      	str	r6, [r2, #8]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80007ce:	6054      	str	r4, [r2, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007d0:	e9c2 4403 	strd	r4, r4, [r2, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007d4:	e9c2 4405 	strd	r4, r4, [r2, #20]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007d8:	f003 f9dc 	bl	8003b94 <HAL_COMP_Init>
  hcomp2.Instance = COMP2;
 80007dc:	4a54      	ldr	r2, [pc, #336]	; (8000930 <main+0x334>)
 80007de:	4955      	ldr	r1, [pc, #340]	; (8000934 <main+0x338>)
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80007e0:	6096      	str	r6, [r2, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80007e2:	4610      	mov	r0, r2
  hcomp2.Instance = COMP2;
 80007e4:	6011      	str	r1, [r2, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80007e6:	6054      	str	r4, [r2, #4]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007e8:	e9c2 4403 	strd	r4, r4, [r2, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007ec:	e9c2 4405 	strd	r4, r4, [r2, #20]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80007f0:	f003 f9d0 	bl	8003b94 <HAL_COMP_Init>
  hcomp4.Instance = COMP4;
 80007f4:	4a50      	ldr	r2, [pc, #320]	; (8000938 <main+0x33c>)
 80007f6:	4951      	ldr	r1, [pc, #324]	; (800093c <main+0x340>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 80007f8:	6096      	str	r6, [r2, #8]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80007fa:	4610      	mov	r0, r2
  hcomp4.Instance = COMP4;
 80007fc:	6011      	str	r1, [r2, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80007fe:	6054      	str	r4, [r2, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000800:	e9c2 4403 	strd	r4, r4, [r2, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000804:	e9c2 4405 	strd	r4, r4, [r2, #20]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000808:	f003 f9c4 	bl	8003b94 <HAL_COMP_Init>
  hcrc.Instance = CRC;
 800080c:	4a4c      	ldr	r2, [pc, #304]	; (8000940 <main+0x344>)
 800080e:	494d      	ldr	r1, [pc, #308]	; (8000944 <main+0x348>)
  hdac1.Instance = DAC1;
 8000810:	4e4d      	ldr	r6, [pc, #308]	; (8000948 <main+0x34c>)
  hcrc.Instance = CRC;
 8000812:	6011      	str	r1, [r2, #0]
 8000814:	8094      	strh	r4, [r2, #4]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000816:	4610      	mov	r0, r2
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000818:	e9c2 4405 	strd	r4, r4, [r2, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800081c:	f8c2 b020 	str.w	fp, [r2, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000820:	f003 facc 	bl	8003dbc <HAL_CRC_Init>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000824:	4621      	mov	r1, r4
 8000826:	2230      	movs	r2, #48	; 0x30
 8000828:	a818      	add	r0, sp, #96	; 0x60
 800082a:	f009 fa97 	bl	8009d5c <memset>
  hdac1.Instance = DAC1;
 800082e:	4a47      	ldr	r2, [pc, #284]	; (800094c <main+0x350>)
 8000830:	6032      	str	r2, [r6, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000832:	4630      	mov	r0, r6
 8000834:	f003 fb3a 	bl	8003eac <HAL_DAC_Init>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000838:	2702      	movs	r7, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800083a:	4630      	mov	r0, r6
 800083c:	4622      	mov	r2, r4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800083e:	2600      	movs	r6, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000840:	a918      	add	r1, sp, #96	; 0x60
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000842:	f04f 0805 	mov.w	r8, #5
 8000846:	f04f 0900 	mov.w	r9, #0
 800084a:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 800084e:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8000852:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000856:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000858:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  sConfig.DAC_SignedFormat = DISABLE;
 800085c:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000860:	f003 fb70 	bl	8003f44 <HAL_DAC_ConfigChannel>
  hfdcan1.Instance = FDCAN1;
 8000864:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <main+0x354>)
 8000866:	493b      	ldr	r1, [pc, #236]	; (8000954 <main+0x358>)
 8000868:	6011      	str	r1, [r2, #0]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800086a:	4610      	mov	r0, r2
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800086c:	e9c2 5507 	strd	r5, r5, [r2, #28]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000870:	6054      	str	r4, [r2, #4]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000872:	e9c2 4402 	strd	r4, r4, [r2, #8]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000876:	7414      	strb	r4, [r2, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000878:	7454      	strb	r4, [r2, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800087a:	7494      	strb	r4, [r2, #18]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800087c:	e9c2 bb05 	strd	fp, fp, [r2, #20]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000880:	e9c2 bb09 	strd	fp, fp, [r2, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000884:	e9c2 bb0b 	strd	fp, fp, [r2, #44]	; 0x2c
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000888:	e9c2 440d 	strd	r4, r4, [r2, #52]	; 0x34
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800088c:	63d4      	str	r4, [r2, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800088e:	f003 fc43 	bl	8004118 <HAL_FDCAN_Init>
  hopamp1.Instance = OPAMP1;
 8000892:	4a31      	ldr	r2, [pc, #196]	; (8000958 <main+0x35c>)
 8000894:	4931      	ldr	r1, [pc, #196]	; (800095c <main+0x360>)
 8000896:	6011      	str	r1, [r2, #0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000898:	f04f 0940 	mov.w	r9, #64	; 0x40
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800089c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80008a0:	f44f 4740 	mov.w	r7, #49152	; 0xc000
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80008a4:	4610      	mov	r0, r2
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80008a6:	e9c2 8709 	strd	r8, r7, [r2, #36]	; 0x24
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80008aa:	f8c2 9008 	str.w	r9, [r2, #8]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80008ae:	6054      	str	r4, [r2, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80008b0:	6114      	str	r4, [r2, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80008b2:	7514      	strb	r4, [r2, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80008b4:	6194      	str	r4, [r2, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80008b6:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80008b8:	f003 fe06 	bl	80044c8 <HAL_OPAMP_Init>
  hopamp2.Instance = OPAMP2;
 80008bc:	4a28      	ldr	r2, [pc, #160]	; (8000960 <main+0x364>)
 80008be:	4929      	ldr	r1, [pc, #164]	; (8000964 <main+0x368>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80008c0:	f8c2 9008 	str.w	r9, [r2, #8]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80008c4:	4610      	mov	r0, r2
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80008c6:	e9c2 8709 	strd	r8, r7, [r2, #36]	; 0x24
  hopamp2.Instance = OPAMP2;
 80008ca:	6011      	str	r1, [r2, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80008cc:	6054      	str	r4, [r2, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80008ce:	6114      	str	r4, [r2, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80008d0:	7514      	strb	r4, [r2, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80008d2:	6194      	str	r4, [r2, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80008d4:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80008d6:	f003 fdf7 	bl	80044c8 <HAL_OPAMP_Init>
  hopamp3.Instance = OPAMP3;
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <main+0x36c>)
  htim1.Instance = TIM1;
 80008dc:	4e23      	ldr	r6, [pc, #140]	; (800096c <main+0x370>)
  hopamp3.Instance = OPAMP3;
 80008de:	4924      	ldr	r1, [pc, #144]	; (8000970 <main+0x374>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80008e0:	f8c2 9008 	str.w	r9, [r2, #8]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80008e4:	4610      	mov	r0, r2
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80008e6:	e9c2 8709 	strd	r8, r7, [r2, #36]	; 0x24
  hopamp3.Instance = OPAMP3;
 80008ea:	6011      	str	r1, [r2, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80008ec:	6054      	str	r4, [r2, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80008ee:	6114      	str	r4, [r2, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80008f0:	f882 b014 	strb.w	fp, [r2, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80008f4:	6194      	str	r4, [r2, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80008f6:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80008f8:	f003 fde6 	bl	80044c8 <HAL_OPAMP_Init>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fc:	2234      	movs	r2, #52	; 0x34
 80008fe:	4621      	mov	r1, r4
 8000900:	a818      	add	r0, sp, #96	; 0x60
 8000902:	e037      	b.n	8000974 <main+0x378>
 8000904:	40021000 	.word	0x40021000
 8000908:	20001558 	.word	0x20001558
 800090c:	20001404 	.word	0x20001404
 8000910:	0c900008 	.word	0x0c900008
 8000914:	32601000 	.word	0x32601000
 8000918:	04300002 	.word	0x04300002
 800091c:	14f00020 	.word	0x14f00020
 8000920:	50000100 	.word	0x50000100
 8000924:	cb8c0000 	.word	0xcb8c0000
 8000928:	200014d0 	.word	0x200014d0
 800092c:	40010200 	.word	0x40010200
 8000930:	2000166c 	.word	0x2000166c
 8000934:	40010204 	.word	0x40010204
 8000938:	20001534 	.word	0x20001534
 800093c:	4001020c 	.word	0x4001020c
 8000940:	20001470 	.word	0x20001470
 8000944:	40023000 	.word	0x40023000
 8000948:	200013f0 	.word	0x200013f0
 800094c:	50000800 	.word	0x50000800
 8000950:	200015c8 	.word	0x200015c8
 8000954:	40006400 	.word	0x40006400
 8000958:	200014f8 	.word	0x200014f8
 800095c:	40010300 	.word	0x40010300
 8000960:	20001374 	.word	0x20001374
 8000964:	40010304 	.word	0x40010304
 8000968:	20001494 	.word	0x20001494
 800096c:	2000162c 	.word	0x2000162c
 8000970:	40010308 	.word	0x40010308
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000974:	f44f 7880 	mov.w	r8, #256	; 0x100
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000978:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800097c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000980:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000982:	9405      	str	r4, [sp, #20]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000984:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 800098a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 800098e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000992:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000998:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099c:	f009 f9de 	bl	8009d5c <memset>
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80009a0:	f640 52d5 	movw	r2, #3541	; 0xdd5
  htim1.Instance = TIM1;
 80009a4:	4982      	ldr	r1, [pc, #520]	; (8000bb0 <main+0x5b4>)
 80009a6:	6031      	str	r1, [r6, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009a8:	2320      	movs	r3, #32
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009aa:	4630      	mov	r0, r6
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009ac:	e9c6 2803 	strd	r2, r8, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009b0:	60b3      	str	r3, [r6, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80009b2:	6074      	str	r4, [r6, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	e9c6 b405 	strd	fp, r4, [r6, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b8:	f004 fc20 	bl	80051fc <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009bc:	4630      	mov	r0, r6
 80009be:	f004 fcbd 	bl	800533c <HAL_TIM_PWM_Init>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009c2:	f04f 0910 	mov.w	r9, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009c6:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009c8:	a90b      	add	r1, sp, #44	; 0x2c
 80009ca:	4630      	mov	r0, r6
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80009cc:	e9cd 390b 	strd	r3, r9, [sp, #44]	; 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009d0:	2770      	movs	r7, #112	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009d2:	f004 ffe1 	bl	8005998 <HAL_TIM_SlaveConfigSynchro>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d6:	a905      	add	r1, sp, #20
 80009d8:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009da:	9705      	str	r7, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e0:	f005 f95e 	bl	8005ca0 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009e4:	4629      	mov	r1, r5
 80009e6:	aa08      	add	r2, sp, #32
 80009e8:	4630      	mov	r0, r6
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009ea:	e9cd 5b08 	strd	r5, fp, [sp, #32]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ee:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009f0:	f005 f9d6 	bl	8005da0 <HAL_TIMEx_ConfigBreakInput>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009f4:	4629      	mov	r1, r5
 80009f6:	aa08      	add	r2, sp, #32
 80009f8:	4630      	mov	r0, r6
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80009fa:	f8cd a020 	str.w	sl, [sp, #32]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 80009fe:	f005 f9cf 	bl	8005da0 <HAL_TIMEx_ConfigBreakInput>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a02:	4629      	mov	r1, r5
 8000a04:	aa08      	add	r2, sp, #32
 8000a06:	4630      	mov	r0, r6
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a08:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a0c:	f005 f9c8 	bl	8005da0 <HAL_TIMEx_ConfigBreakInput>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	4622      	mov	r2, r4
 8000a14:	a910      	add	r1, sp, #64	; 0x40
 8000a16:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a18:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a22:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	f004 fdd9 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a2a:	4652      	mov	r2, sl
 8000a2c:	a910      	add	r1, sp, #64	; 0x40
 8000a2e:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 8000a30:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a32:	f004 fdd3 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a36:	a910      	add	r1, sp, #64	; 0x40
 8000a38:	4630      	mov	r0, r6
 8000a3a:	2208      	movs	r2, #8
  sConfigOC.Pulse = 0;
 8000a3c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a3e:	f004 fdcd 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a42:	220c      	movs	r2, #12
 8000a44:	a910      	add	r1, sp, #64	; 0x40
 8000a46:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 8000a48:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a4c:	f44f 6980 	mov.w	r9, #1024	; 0x400
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a50:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a52:	f004 fdc3 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a56:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a5a:	2344      	movs	r3, #68	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5c:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a60:	e9cd e918 	strd	lr, r9, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000a64:	2703      	movs	r7, #3
  htim4.Instance = TIM4;
 8000a66:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8000bc8 <main+0x5cc>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000a6a:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a74:	a918      	add	r1, sp, #96	; 0x60
 8000a76:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a78:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a7c:	e9cd 3220 	strd	r3, r2, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000a80:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a84:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a86:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a8a:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000a8e:	9722      	str	r7, [sp, #136]	; 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a90:	f005 f938 	bl	8005d04 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000a94:	4630      	mov	r0, r6
 8000a96:	f001 fc35 	bl	8002304 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8000a9a:	4e46      	ldr	r6, [pc, #280]	; (8000bb4 <main+0x5b8>)
  huart2.Instance = USART2;
 8000a9c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8000bcc <main+0x5d0>
  htim4.Instance = TIM4;
 8000aa0:	f8c9 6000 	str.w	r6, [r9]
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000aa4:	2306      	movs	r3, #6
  htim4.Init.Period = M1_PULSE_NBR;
 8000aa6:	f640 729f 	movw	r2, #3999	; 0xf9f
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000aaa:	a918      	add	r1, sp, #96	; 0x60
 8000aac:	4648      	mov	r0, r9
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000aae:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000ab0:	9320      	str	r3, [sp, #128]	; 0x80
  htim4.Init.Period = M1_PULSE_NBR;
 8000ab2:	f8c9 200c 	str.w	r2, [r9, #12]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ab6:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000abc:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000abe:	9718      	str	r7, [sp, #96]	; 0x60
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac0:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac4:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ac8:	941b      	str	r4, [sp, #108]	; 0x6c
 8000aca:	941d      	str	r4, [sp, #116]	; 0x74
 8000acc:	941f      	str	r4, [sp, #124]	; 0x7c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	e9c9 4401 	strd	r4, r4, [r9, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	f8c9 4010 	str.w	r4, [r9, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ada:	f004 fcb7 	bl	800544c <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ade:	a910      	add	r1, sp, #64	; 0x40
 8000ae0:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ae6:	f005 f8db 	bl	8005ca0 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 8000aea:	4a33      	ldr	r2, [pc, #204]	; (8000bb8 <main+0x5bc>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aec:	f8c8 4010 	str.w	r4, [r8, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	230c      	movs	r3, #12
 8000af2:	f8c8 3014 	str.w	r3, [r8, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4640      	mov	r0, r8
  huart2.Init.BaudRate = 460800;
 8000af8:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 8000afc:	e9c8 2300 	strd	r2, r3, [r8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	e9c8 4402 	strd	r4, r4, [r8, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	e9c8 4406 	strd	r4, r4, [r8, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	e9c8 4408 	strd	r4, r4, [r8, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0c:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b10:	f005 f9fe 	bl	8005f10 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b14:	4621      	mov	r1, r4
 8000b16:	4640      	mov	r0, r8
 8000b18:	f005 fffc 	bl	8006b14 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	4640      	mov	r0, r8
 8000b20:	f006 f84a 	bl	8006bb8 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b24:	4640      	mov	r0, r8
 8000b26:	f005 ffd7 	bl	8006ad8 <HAL_UARTEx_DisableFifoMode>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 0);
 8000b2a:	4622      	mov	r2, r4
 8000b2c:	4651      	mov	r1, sl
 8000b2e:	2018      	movs	r0, #24
 8000b30:	f003 f8e6 	bl	8003d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b34:	2018      	movs	r0, #24
 8000b36:	f003 f919 	bl	8003d6c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b3a:	4622      	mov	r2, r4
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	2019      	movs	r0, #25
 8000b40:	f003 f8de 	bl	8003d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b44:	2019      	movs	r0, #25
 8000b46:	f003 f911 	bl	8003d6c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000b4a:	4629      	mov	r1, r5
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	2012      	movs	r0, #18
 8000b50:	f003 f8d6 	bl	8003d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b54:	2012      	movs	r0, #18
 8000b56:	f003 f909 	bl	8003d6c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8000b5a:	4622      	mov	r2, r4
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	201e      	movs	r0, #30
 8000b60:	f003 f8ce 	bl	8003d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b64:	201e      	movs	r0, #30
 8000b66:	f003 f901 	bl	8003d6c <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 8000b6a:	4d14      	ldr	r5, [pc, #80]	; (8000bbc <main+0x5c0>)
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000b6c:	4622      	mov	r2, r4
 8000b6e:	4639      	mov	r1, r7
 8000b70:	2026      	movs	r0, #38	; 0x26
 8000b72:	f003 f8c5 	bl	8003d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b76:	2026      	movs	r0, #38	; 0x26
 8000b78:	f003 f8f8 	bl	8003d6c <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 8000b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7e:	ae10      	add	r6, sp, #64	; 0x40
 8000b80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b86:	6033      	str	r3, [r6, #0]
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8000b88:	4621      	mov	r1, r4
 8000b8a:	a810      	add	r0, sp, #64	; 0x40
 8000b8c:	f006 f86c 	bl	8006c68 <osThreadCreate>
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <main+0x5c4>)
 8000b92:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	ae18      	add	r6, sp, #96	; 0x60
 8000b98:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	6033      	str	r3, [r6, #0]
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8000b9e:	a818      	add	r0, sp, #96	; 0x60
 8000ba0:	4621      	mov	r1, r4
 8000ba2:	f006 f861 	bl	8006c68 <osThreadCreate>
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <main+0x5c8>)
 8000ba8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000baa:	f006 f857 	bl	8006c5c <osKernelStart>
 8000bae:	e7fe      	b.n	8000bae <main+0x5b2>
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	40000800 	.word	0x40000800
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	08009d84 	.word	0x08009d84
 8000bc0:	200015c4 	.word	0x200015c4
 8000bc4:	200014f4 	.word	0x200014f4
 8000bc8:	200013b0 	.word	0x200013b0
 8000bcc:	20001690 	.word	0x20001690

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd0:	6802      	ldr	r2, [r0, #0]
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d000      	beq.n	8000bda <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd8:	4770      	bx	lr
    HAL_IncTick();
 8000bda:	f002 b989 	b.w	8002ef0 <HAL_IncTick>
 8000bde:	bf00      	nop
 8000be0:	40001000 	.word	0x40001000

08000be4 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
  
  FOCVars[bMotor].Iab = NULL_ab;
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <FOC_Clear+0x68>)
 8000bec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8000bf6:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 8000bfa:	509c      	str	r4, [r3, r2]
{
 8000bfc:	4605      	mov	r5, r0
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8000bfe:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000c02:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8000c04:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000c06:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8000c0a:	50b4      	str	r4, [r6, r2]
 8000c0c:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000c10:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000c12:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000c14:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c16:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000c1a:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c1c:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8000c1e:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000c20:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c22:	f007 fb53 	bl	80082cc <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <FOC_Clear+0x70>)
 8000c28:	4621      	mov	r1, r4
 8000c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000c2e:	f007 fb4d 	bl	80082cc <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <FOC_Clear+0x74>)
 8000c34:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000c38:	f008 fd3c 	bl	80096b4 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <FOC_Clear+0x78>)
 8000c3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000c42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c46:	f007 bd15 	b.w	8008674 <PWMC_SwitchOffPWM>
 8000c4a:	bf00      	nop
 8000c4c:	20001748 	.word	0x20001748
 8000c50:	2000173c 	.word	0x2000173c
 8000c54:	200017f4 	.word	0x200017f4
 8000c58:	200017f8 	.word	0x200017f8
 8000c5c:	20001730 	.word	0x20001730

08000c60 <MCboot>:
{
 8000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c64:	4b61      	ldr	r3, [pc, #388]	; (8000dec <MCboot+0x18c>)
 8000c66:	4c62      	ldr	r4, [pc, #392]	; (8000df0 <MCboot+0x190>)
  pCLM[M1] = &CircleLimitationM1;
 8000c68:	4a62      	ldr	r2, [pc, #392]	; (8000df4 <MCboot+0x194>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c6a:	6023      	str	r3, [r4, #0]
{
 8000c6c:	b087      	sub	sp, #28
  bMCBootCompleted = 0;
 8000c6e:	2400      	movs	r4, #0
{
 8000c70:	9001      	str	r0, [sp, #4]
  R3_2_Init(&PWM_Handle_M1);
 8000c72:	4618      	mov	r0, r3
  bMCBootCompleted = 0;
 8000c74:	4b60      	ldr	r3, [pc, #384]	; (8000df8 <MCboot+0x198>)
  pCLM[M1] = &CircleLimitationM1;
 8000c76:	4d61      	ldr	r5, [pc, #388]	; (8000dfc <MCboot+0x19c>)
{
 8000c78:	9102      	str	r1, [sp, #8]
  bMCBootCompleted = 0;
 8000c7a:	701c      	strb	r4, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000c7c:	6015      	str	r5, [r2, #0]
  R3_2_Init(&PWM_Handle_M1);
 8000c7e:	f007 ffcb 	bl	8008c18 <R3_2_Init>
  startTimers();    
 8000c82:	f007 fba9 	bl	80083d8 <startTimers>
  STM_Init(&STM[M1]);
 8000c86:	485e      	ldr	r0, [pc, #376]	; (8000e00 <MCboot+0x1a0>)
  ENC_Init (&ENCODER_M1);
 8000c88:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8000e50 <MCboot+0x1f0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000c8c:	4d5d      	ldr	r5, [pc, #372]	; (8000e04 <MCboot+0x1a4>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8000c8e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000e54 <MCboot+0x1f4>
  PID_HandleInit(&PIDIqHandle_M1);
 8000c92:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000e58 <MCboot+0x1f8>
  PID_HandleInit(&PIDIdHandle_M1);
 8000c96:	4f5c      	ldr	r7, [pc, #368]	; (8000e08 <MCboot+0x1a8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000c98:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8000e5c <MCboot+0x1fc>
  NTC_Init(&TempSensorParamsM1);    
 8000c9c:	4e5b      	ldr	r6, [pc, #364]	; (8000e0c <MCboot+0x1ac>)
  STM_Init(&STM[M1]);
 8000c9e:	f008 fdc5 	bl	800982c <STM_Init>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000ca2:	485b      	ldr	r0, [pc, #364]	; (8000e10 <MCboot+0x1b0>)
 8000ca4:	f007 fafe 	bl	80082a4 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000ca8:	4a5a      	ldr	r2, [pc, #360]	; (8000e14 <MCboot+0x1b4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000caa:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <MCboot+0x1b8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000cac:	4958      	ldr	r1, [pc, #352]	; (8000e10 <MCboot+0x1b0>)
 8000cae:	6011      	str	r1, [r2, #0]
  ENC_Init (&ENCODER_M1);
 8000cb0:	4650      	mov	r0, sl
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000cb2:	602b      	str	r3, [r5, #0]
  ENC_Init (&ENCODER_M1);
 8000cb4:	f006 ff4c 	bl	8007b50 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8000cb8:	4653      	mov	r3, sl
 8000cba:	6829      	ldr	r1, [r5, #0]
 8000cbc:	4857      	ldr	r0, [pc, #348]	; (8000e1c <MCboot+0x1bc>)
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	f006 fef6 	bl	8007ab0 <EAC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8000cc4:	4a53      	ldr	r2, [pc, #332]	; (8000e14 <MCboot+0x1b4>)
  pEAC[M1] = &EncAlignCtrlM1;
 8000cc6:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <MCboot+0x1c0>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8000cc8:	6811      	ldr	r1, [r2, #0]
  pEAC[M1] = &EncAlignCtrlM1;
 8000cca:	4a54      	ldr	r2, [pc, #336]	; (8000e1c <MCboot+0x1bc>)
 8000ccc:	601a      	str	r2, [r3, #0]
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8000cce:	6828      	ldr	r0, [r5, #0]
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	f008 fcd7 	bl	8009684 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000cd6:	4648      	mov	r0, r9
 8000cd8:	f008 ffae 	bl	8009c38 <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000cdc:	4640      	mov	r0, r8
 8000cde:	f007 fae1 	bl	80082a4 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f007 fade 	bl	80082a4 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000ce8:	494e      	ldr	r1, [pc, #312]	; (8000e24 <MCboot+0x1c4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000cea:	4b4f      	ldr	r3, [pc, #316]	; (8000e28 <MCboot+0x1c8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000cec:	f8c1 8000 	str.w	r8, [r1]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000cf0:	494e      	ldr	r1, [pc, #312]	; (8000e2c <MCboot+0x1cc>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000cf2:	f8cb 3000 	str.w	r3, [fp]
  RVBS_Init(pBusSensorM1);
 8000cf6:	4618      	mov	r0, r3
  pPIDId[M1] = &PIDIdHandle_M1;
 8000cf8:	600f      	str	r7, [r1, #0]
  RVBS_Init(pBusSensorM1);
 8000cfa:	f008 fc27 	bl	800954c <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <MCboot+0x1d0>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d00:	f8db 2000 	ldr.w	r2, [fp]
 8000d04:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d08:	4a4a      	ldr	r2, [pc, #296]	; (8000e34 <MCboot+0x1d4>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000d0a:	4f4b      	ldr	r7, [pc, #300]	; (8000e38 <MCboot+0x1d8>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d0c:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);    
 8000d0e:	4630      	mov	r0, r6
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000d10:	f8c3 710c 	str.w	r7, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);    
 8000d14:	f007 fa80 	bl	8008218 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d18:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MCboot+0x1dc>)
 8000d1a:	4a49      	ldr	r2, [pc, #292]	; (8000e40 <MCboot+0x1e0>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d1c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8000e60 <MCboot+0x200>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d20:	6013      	str	r3, [r2, #0]
  REMNG_Init(pREMNG[M1]);
 8000d22:	4618      	mov	r0, r3
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d24:	f8c8 6000 	str.w	r6, [r8]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000d28:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8000d2c:	f008 fc5c 	bl	80095e8 <REMNG_Init>
  FOC_Clear(M1);
 8000d30:	4620      	mov	r0, r4
 8000d32:	f7ff ff57 	bl	8000be4 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000d36:	f887 9024 	strb.w	r9, [r7, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000d3a:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000d3c:	4e41      	ldr	r6, [pc, #260]	; (8000e44 <MCboot+0x1e4>)
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000d3e:	f008 fd61 	bl	8009804 <STC_GetDefaultIqdref>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8000d48:	823b      	strh	r3, [r7, #16]
 8000d4a:	827a      	strh	r2, [r7, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d4c:	6828      	ldr	r0, [r5, #0]
 8000d4e:	f008 fd59 	bl	8009804 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000d52:	493d      	ldr	r1, [pc, #244]	; (8000e48 <MCboot+0x1e8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 8000d54:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000d56:	6031      	str	r1, [r6, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d58:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 8000d5c:	463b      	mov	r3, r7
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d5e:	f8a7 c014 	strh.w	ip, [r7, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1]);
 8000d62:	4608      	mov	r0, r1
 8000d64:	4926      	ldr	r1, [pc, #152]	; (8000e00 <MCboot+0x1a0>)
 8000d66:	f007 f86b 	bl	8007e40 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000d6a:	6828      	ldr	r0, [r5, #0]
 8000d6c:	6837      	ldr	r7, [r6, #0]
 8000d6e:	f008 fd37 	bl	80097e0 <STC_GetMecSpeedRefUnitDefault>
 8000d72:	4622      	mov	r2, r4
 8000d74:	4601      	mov	r1, r0
 8000d76:	4638      	mov	r0, r7
 8000d78:	f007 f870 	bl	8007e5c <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000d7c:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <MCboot+0x1b4>)
  pMCIList[M1] = oMCInterface[M1];
 8000d7e:	6837      	ldr	r7, [r6, #0]
 8000d80:	9700      	str	r7, [sp, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000d82:	492a      	ldr	r1, [pc, #168]	; (8000e2c <MCboot+0x1cc>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000d84:	6817      	ldr	r7, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000d86:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <MCboot+0x190>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000d88:	6808      	ldr	r0, [r1, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000d8a:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000d8c:	682a      	ldr	r2, [r5, #0]
 8000d8e:	9203      	str	r2, [sp, #12]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000d90:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <MCboot+0x1d4>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000d92:	f8d8 5000 	ldr.w	r5, [r8]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000d96:	f8d2 e000 	ldr.w	lr, [r2]
  pMCIList[M1] = oMCInterface[M1];
 8000d9a:	9a01      	ldr	r2, [sp, #4]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000d9c:	4e21      	ldr	r6, [pc, #132]	; (8000e24 <MCboot+0x1c4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MCboot+0x1ec>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000da0:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000da2:	f8db c000 	ldr.w	ip, [fp]
  pMCIList[M1] = oMCInterface[M1];
 8000da6:	4690      	mov	r8, r2
 8000da8:	9a00      	ldr	r2, [sp, #0]
 8000daa:	f8c8 2000 	str.w	r2, [r8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000dae:	9a03      	ldr	r2, [sp, #12]
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <MCboot+0x1a0>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000db4:	6098      	str	r0, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000db6:	e9c3 7600 	strd	r7, r6, [r3]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000dba:	6119      	str	r1, [r3, #16]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000dbc:	e9c3 5c0b 	strd	r5, ip, [r3, #44]	; 0x2c
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000dc0:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000dc4:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1; 
 8000dc6:	e9c3 4a05 	strd	r4, sl, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000dca:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000dd0:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8000dd4:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  pMCTList[M1] = &MCT[M1];
 8000dd8:	9a02      	ldr	r2, [sp, #8]
  MCT[M1].pOTT = MC_NULL;
 8000dda:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  pMCTList[M1] = &MCT[M1];
 8000dde:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <MCboot+0x198>)
 8000de2:	f883 9000 	strb.w	r9, [r3]
}
 8000de6:	b007      	add	sp, #28
 8000de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dec:	2000038c 	.word	0x2000038c
 8000df0:	20001730 	.word	0x20001730
 8000df4:	200017c0 	.word	0x200017c0
 8000df8:	20000608 	.word	0x20000608
 8000dfc:	2000013c 	.word	0x2000013c
 8000e00:	200017e4 	.word	0x200017e4
 8000e04:	200017f8 	.word	0x200017f8
 8000e08:	20000438 	.word	0x20000438
 8000e0c:	2000029c 	.word	0x2000029c
 8000e10:	20000490 	.word	0x20000490
 8000e14:	20001734 	.word	0x20001734
 8000e18:	20000404 	.word	0x20000404
 8000e1c:	200002c4 	.word	0x200002c4
 8000e20:	20001738 	.word	0x20001738
 8000e24:	2000173c 	.word	0x2000173c
 8000e28:	20000274 	.word	0x20000274
 8000e2c:	200017f4 	.word	0x200017f4
 8000e30:	200004c0 	.word	0x200004c0
 8000e34:	200017f0 	.word	0x200017f0
 8000e38:	20001748 	.word	0x20001748
 8000e3c:	200001f0 	.word	0x200001f0
 8000e40:	200017ec 	.word	0x200017ec
 8000e44:	20001740 	.word	0x20001740
 8000e48:	200017c8 	.word	0x200017c8
 8000e4c:	20001770 	.word	0x20001770
 8000e50:	200002e0 	.word	0x200002e0
 8000e54:	20000358 	.word	0x20000358
 8000e58:	20000464 	.word	0x20000464
 8000e5c:	200017c4 	.word	0x200017c4
 8000e60:	2000172c 	.word	0x2000172c

08000e64 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <FOC_CalcCurrRef>:
{
    
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <FOC_CalcCurrRef+0x24>)
{
 8000e6a:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000e6c:	2426      	movs	r4, #38	; 0x26
 8000e6e:	fb04 3400 	mla	r4, r4, r0, r3
 8000e72:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e76:	b103      	cbz	r3, 8000e7a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000e78:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <FOC_CalcCurrRef+0x28>)
 8000e7c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000e80:	f008 fc7e 	bl	8009780 <STC_CalcTorqueReference>
 8000e84:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000e86:	8220      	strh	r0, [r4, #16]
}
 8000e88:	bd10      	pop	{r4, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20001748 	.word	0x20001748
 8000e90:	200017f8 	.word	0x200017f8

08000e94 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000e94:	4b01      	ldr	r3, [pc, #4]	; (8000e9c <TSK_SetChargeBootCapDelayM1+0x8>)
 8000e96:	8058      	strh	r0, [r3, #2]
}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000608 	.word	0x20000608

08000ea0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8000ea2:	8858      	ldrh	r0, [r3, #2]
 8000ea4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000ea6:	fab0 f080 	clz	r0, r0
 8000eaa:	0940      	lsrs	r0, r0, #5
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000608 	.word	0x20000608

08000eb4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000eb4:	4b01      	ldr	r3, [pc, #4]	; (8000ebc <TSK_SetStopPermanencyTimeM1+0x8>)
 8000eb6:	8098      	strh	r0, [r3, #4]
}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000608 	.word	0x20000608

08000ec0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8000ec2:	8898      	ldrh	r0, [r3, #4]
 8000ec4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000ec6:	fab0 f080 	clz	r0, r0
 8000eca:	0940      	lsrs	r0, r0, #5
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000608 	.word	0x20000608

08000ed4 <TSK_MediumFrequencyTaskM1>:
{
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8000ed8:	a902      	add	r1, sp, #8
 8000eda:	2300      	movs	r3, #0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000edc:	4c8c      	ldr	r4, [pc, #560]	; (8001110 <TSK_MediumFrequencyTaskM1+0x23c>)
  int16_t wAux = 0;
 8000ede:	f821 3d02 	strh.w	r3, [r1, #-2]!
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8000ee2:	488c      	ldr	r0, [pc, #560]	; (8001114 <TSK_MediumFrequencyTaskM1+0x240>)
 8000ee4:	f006 fe98 	bl	8007c18 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000ee8:	6820      	ldr	r0, [r4, #0]
 8000eea:	f007 fa3f 	bl	800836c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000eee:	488a      	ldr	r0, [pc, #552]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000ef0:	f008 fd30 	bl	8009954 <STM_GetState>
  switch ( StateM1 )
 8000ef4:	2812      	cmp	r0, #18
 8000ef6:	d818      	bhi.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
 8000ef8:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000efc:	0038002a 	.word	0x0038002a
 8000f00:	00530044 	.word	0x00530044
 8000f04:	00670062 	.word	0x00670062
 8000f08:	0082007a 	.word	0x0082007a
 8000f0c:	00130095 	.word	0x00130095
 8000f10:	00170017 	.word	0x00170017
 8000f14:	009f0017 	.word	0x009f0017
 8000f18:	00bb00ae 	.word	0x00bb00ae
 8000f1c:	00de00cf 	.word	0x00de00cf
 8000f20:	0019      	.short	0x0019
    STM_NextState( &STM[M1], IDLE );
 8000f22:	2100      	movs	r1, #0
 8000f24:	487c      	ldr	r0, [pc, #496]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f26:	f008 fca1 	bl	800986c <STM_NextState>
}
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 8000f2e:	4879      	ldr	r0, [pc, #484]	; (8001114 <TSK_MediumFrequencyTaskM1+0x240>)
 8000f30:	f006 fe4c 	bl	8007bcc <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8000f34:	2104      	movs	r1, #4
 8000f36:	4878      	ldr	r0, [pc, #480]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f38:	f008 fc98 	bl	800986c <STM_NextState>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d0f4      	beq.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      FOC_Clear( M1 );
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff fe4f 	bl	8000be4 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8000f46:	4b75      	ldr	r3, [pc, #468]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f007 fd4f 	bl	80089ec <R3_2_SwitchOnPWM>
 8000f4e:	e7ec      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 8000f50:	4873      	ldr	r0, [pc, #460]	; (8001120 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000f52:	f006 fdfb 	bl	8007b4c <EAC_GetRestartState>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d0e7      	beq.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4870      	ldr	r0, [pc, #448]	; (8001120 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000f5e:	f006 fdf3 	bl	8007b48 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 8000f62:	2103      	movs	r1, #3
 8000f64:	486c      	ldr	r0, [pc, #432]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f66:	f008 fc81 	bl	800986c <STM_NextState>
 8000f6a:	e7de      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8000f6c:	4b6b      	ldr	r3, [pc, #428]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f007 fd14 	bl	800899c <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8000f74:	2014      	movs	r0, #20
 8000f76:	f7ff ff8d 	bl	8000e94 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 8000f7a:	210d      	movs	r1, #13
 8000f7c:	4866      	ldr	r0, [pc, #408]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000f7e:	f008 fc75 	bl	800986c <STM_NextState>
    break;
 8000f82:	e7d2      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 8000f84:	4866      	ldr	r0, [pc, #408]	; (8001120 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000f86:	f006 fdc5 	bl	8007b14 <EAC_Exec>
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	f040 80ac 	bne.w	80010ea <TSK_MediumFrequencyTaskM1+0x216>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 8000f92:	4b64      	ldr	r3, [pc, #400]	; (8001124 <TSK_MediumFrequencyTaskM1+0x250>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f008 fbf3 	bl	8009780 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;	
 8000f9a:	4b63      	ldr	r3, [pc, #396]	; (8001128 <TSK_MediumFrequencyTaskM1+0x254>)
 8000f9c:	8258      	strh	r0, [r3, #18]
 8000f9e:	821c      	strh	r4, [r3, #16]
 8000fa0:	e7c3      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8000fa2:	485f      	ldr	r0, [pc, #380]	; (8001120 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000fa4:	f006 fdce 	bl	8007b44 <EAC_IsAligned>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	f040 8092 	bne.w	80010d2 <TSK_MediumFrequencyTaskM1+0x1fe>
      EAC_SetRestartState( &EncAlignCtrlM1, true ); 
 8000fae:	2101      	movs	r1, #1
 8000fb0:	485b      	ldr	r0, [pc, #364]	; (8001120 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000fb2:	f006 fdc9 	bl	8007b48 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4857      	ldr	r0, [pc, #348]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000fba:	f008 fc57 	bl	800986c <STM_NextState>
      break;
 8000fbe:	e7b4      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	4855      	ldr	r0, [pc, #340]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000fc4:	f008 fc52 	bl	800986c <STM_NextState>
    break;
 8000fc8:	e7af      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
	  FOC_InitAdditionalMethods(M1);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ff4a 	bl	8000e64 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff ff49 	bl	8000e68 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8000fd6:	2106      	movs	r1, #6
 8000fd8:	484f      	ldr	r0, [pc, #316]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8000fda:	f008 fc47 	bl	800986c <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8000fde:	4b51      	ldr	r3, [pc, #324]	; (8001124 <TSK_MediumFrequencyTaskM1+0x250>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f008 fc1b 	bl	800981c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8000fe6:	4b51      	ldr	r3, [pc, #324]	; (800112c <TSK_MediumFrequencyTaskM1+0x258>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	f006 ff6f 	bl	8007ecc <MCI_ExecBufferedCommands>
    break;
 8000fee:	e79c      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8000ff0:	4b4e      	ldr	r3, [pc, #312]	; (800112c <TSK_MediumFrequencyTaskM1+0x258>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	f006 ff6a 	bl	8007ecc <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ff35 	bl	8000e68 <FOC_CalcCurrRef>
    break;
 8000ffe:	e794      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f007 fd36 	bl	8008a74 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fdeb 	bl	8000be4 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800100e:	6820      	ldr	r0, [r4, #0]
 8001010:	f007 f8c2 	bl	8008198 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001014:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001018:	f7ff ff4c 	bl	8000eb4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800101c:	2108      	movs	r1, #8
 800101e:	483e      	ldr	r0, [pc, #248]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8001020:	f008 fc24 	bl	800986c <STM_NextState>
    break;
 8001024:	e781      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001026:	f7ff ff4b 	bl	8000ec0 <TSK_StopPermanencyTimeHasElapsedM1>
 800102a:	2800      	cmp	r0, #0
 800102c:	f43f af7d 	beq.w	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001030:	2109      	movs	r1, #9
 8001032:	4839      	ldr	r0, [pc, #228]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8001034:	f008 fc1a 	bl	800986c <STM_NextState>
 8001038:	e777      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800103a:	f7ff ff31 	bl	8000ea0 <TSK_ChargeBootCapDelayHasElapsedM1>
 800103e:	2800      	cmp	r0, #0
 8001040:	f43f af73 	beq.w	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 8001046:	2100      	movs	r1, #0
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	f007 fb15 	bl	8008678 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 800104e:	210e      	movs	r1, #14
 8001050:	4831      	ldr	r0, [pc, #196]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8001052:	f008 fc0b 	bl	800986c <STM_NextState>
 8001056:	e768      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 800105a:	2101      	movs	r1, #1
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	f007 fb0b 	bl	8008678 <PWMC_CurrentReadingCalibr>
 8001062:	2800      	cmp	r0, #0
 8001064:	f43f af61 	beq.w	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 8001068:	210f      	movs	r1, #15
 800106a:	482b      	ldr	r0, [pc, #172]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 800106c:	f008 fbfe 	bl	800986c <STM_NextState>
 8001070:	e75b      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001072:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <TSK_MediumFrequencyTaskM1+0x250>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <TSK_MediumFrequencyTaskM1+0x254>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	492d      	ldr	r1, [pc, #180]	; (8001130 <TSK_MediumFrequencyTaskM1+0x25c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001080:	f008 fb14 	bl	80096ac <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 8001084:	4826      	ldr	r0, [pc, #152]	; (8001120 <TSK_MediumFrequencyTaskM1+0x24c>)
 8001086:	f006 fd1d 	bl	8007ac4 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 800108a:	2102      	movs	r1, #2
 800108c:	4822      	ldr	r0, [pc, #136]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 800108e:	f008 fbed 	bl	800986c <STM_NextState>
 8001092:	2800      	cmp	r0, #0
 8001094:	f43f af49 	beq.w	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
 8001098:	e752      	b.n	8000f40 <TSK_MediumFrequencyTaskM1+0x6c>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800109a:	f7ff ff01 	bl	8000ea0 <TSK_ChargeBootCapDelayHasElapsedM1>
 800109e:	2800      	cmp	r0, #0
 80010a0:	f43f af43 	beq.w	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	f007 fae5 	bl	8008678 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80010ae:	2111      	movs	r1, #17
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 80010b2:	f008 fbdb 	bl	800986c <STM_NextState>
 80010b6:	e738      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f007 fadb 	bl	8008678 <PWMC_CurrentReadingCalibr>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	f43f af31 	beq.w	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      STM_NextState( &STM[M1], CLEAR );
 80010c8:	2112      	movs	r1, #18
 80010ca:	4813      	ldr	r0, [pc, #76]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 80010cc:	f008 fbce 	bl	800986c <STM_NextState>
 80010d0:	e72b      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f007 fc61 	bl	800899c <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80010da:	2014      	movs	r0, #20
 80010dc:	f7ff feda 	bl	8000e94 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80010e0:	2110      	movs	r1, #16
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 80010e4:	f008 fbc2 	bl	800986c <STM_NextState>
    break;
 80010e8:	e71f      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <TSK_MediumFrequencyTaskM1+0x248>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 80010ec:	4c0d      	ldr	r4, [pc, #52]	; (8001124 <TSK_MediumFrequencyTaskM1+0x250>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f007 fcc0 	bl	8008a74 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 80010f4:	6820      	ldr	r0, [r4, #0]
 80010f6:	2101      	movs	r1, #1
 80010f8:	f008 faf4 	bl	80096e4 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	4905      	ldr	r1, [pc, #20]	; (8001114 <TSK_MediumFrequencyTaskM1+0x240>)
 8001100:	f008 fad4 	bl	80096ac <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 8001104:	2107      	movs	r1, #7
 8001106:	4804      	ldr	r0, [pc, #16]	; (8001118 <TSK_MediumFrequencyTaskM1+0x244>)
 8001108:	f008 fbb0 	bl	800986c <STM_NextState>
 800110c:	e70d      	b.n	8000f2a <TSK_MediumFrequencyTaskM1+0x56>
 800110e:	bf00      	nop
 8001110:	200017f0 	.word	0x200017f0
 8001114:	200002e0 	.word	0x200002e0
 8001118:	200017e4 	.word	0x200017e4
 800111c:	20001730 	.word	0x20001730
 8001120:	200002c4 	.word	0x200002c4
 8001124:	200017f8 	.word	0x200017f8
 8001128:	20001748 	.word	0x20001748
 800112c:	20001740 	.word	0x20001740
 8001130:	20000358 	.word	0x20000358

08001134 <MC_Scheduler>:
{
 8001134:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001136:	4c10      	ldr	r4, [pc, #64]	; (8001178 <MC_Scheduler+0x44>)
 8001138:	7825      	ldrb	r5, [r4, #0]
 800113a:	2d01      	cmp	r5, #1
 800113c:	d000      	beq.n	8001140 <MC_Scheduler+0xc>
}
 800113e:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001140:	88e3      	ldrh	r3, [r4, #6]
 8001142:	b29b      	uxth	r3, r3
 8001144:	b1a3      	cbz	r3, 8001170 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 8001146:	88e3      	ldrh	r3, [r4, #6]
 8001148:	3b01      	subs	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	80e3      	strh	r3, [r4, #6]
    if(hBootCapDelayCounterM1 > 0u)
 800114e:	8863      	ldrh	r3, [r4, #2]
 8001150:	b29b      	uxth	r3, r3
 8001152:	b943      	cbnz	r3, 8001166 <MC_Scheduler+0x32>
    if(hStopPermanencyCounterM1 > 0u)
 8001154:	88a3      	ldrh	r3, [r4, #4]
 8001156:	b29b      	uxth	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800115c:	88a3      	ldrh	r3, [r4, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	b29b      	uxth	r3, r3
 8001162:	80a3      	strh	r3, [r4, #4]
}
 8001164:	bd38      	pop	{r3, r4, r5, pc}
      hBootCapDelayCounterM1--;
 8001166:	8863      	ldrh	r3, [r4, #2]
 8001168:	3b01      	subs	r3, #1
 800116a:	b29b      	uxth	r3, r3
 800116c:	8063      	strh	r3, [r4, #2]
 800116e:	e7f1      	b.n	8001154 <MC_Scheduler+0x20>
      TSK_MediumFrequencyTaskM1();
 8001170:	f7ff feb0 	bl	8000ed4 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001174:	80e5      	strh	r5, [r4, #6]
 8001176:	e7ea      	b.n	800114e <MC_Scheduler+0x1a>
 8001178:	20000608 	.word	0x20000608

0800117c <MC_RunMotorControlTasks>:
{
 800117c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <MC_RunMotorControlTasks+0x18>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b903      	cbnz	r3, 8001186 <MC_RunMotorControlTasks+0xa>
}
 8001184:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001186:	f7ff ffd5 	bl	8001134 <MC_Scheduler>
}
 800118a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800118e:	f001 bab3 	b.w	80026f8 <UI_Scheduler>
 8001192:	bf00      	nop
 8001194:	20000608 	.word	0x20000608

08001198 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;
 

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800119c:	4831      	ldr	r0, [pc, #196]	; (8001264 <TSK_HighFrequencyTask+0xcc>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800119e:	4f32      	ldr	r7, [pc, #200]	; (8001268 <TSK_HighFrequencyTask+0xd0>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011a0:	4c32      	ldr	r4, [pc, #200]	; (800126c <TSK_HighFrequencyTask+0xd4>)
{
 80011a2:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 80011a4:	f006 fd24 	bl	8007bf0 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <TSK_HighFrequencyTask+0xd8>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f008 fa80 	bl	80096b0 <STC_GetSpeedSensor>
 80011b0:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80011b2:	f008 fa21 	bl	80095f8 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80011b6:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80011b8:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f007 f944 	bl	8008448 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80011c0:	9803      	ldr	r0, [sp, #12]
 80011c2:	f006 ff21 	bl	8008008 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011c6:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80011c8:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011ca:	f006 ff8d 	bl	80080e8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <TSK_HighFrequencyTask+0xdc>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011d0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80011d4:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80011d6:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011d8:	1a09      	subs	r1, r1, r0
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	f007 f882 	bl	80082e4 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80011e0:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <TSK_HighFrequencyTask+0xe0>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80011e6:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80011ea:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80011ec:	1a89      	subs	r1, r1, r2
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f007 f878 	bl	80082e4 <PI_Controller>
  
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <TSK_HighFrequencyTask+0xe4>)
 80011f6:	f8ad 8008 	strh.w	r8, [sp, #8]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001200:	9902      	ldr	r1, [sp, #8]
 8001202:	4618      	mov	r0, r3
 8001204:	f006 fbc2 	bl	800798c <Circle_Limitation>
 8001208:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800120a:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800120c:	fa0f f883 	sxth.w	r8, r3
 8001210:	141d      	asrs	r5, r3, #16
 8001212:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001214:	f008 f9f8 	bl	8009608 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001218:	4631      	mov	r1, r6
 800121a:	9802      	ldr	r0, [sp, #8]
 800121c:	f006 ff9e 	bl	800815c <MCM_Rev_Park>
 8001220:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001222:	4601      	mov	r1, r0
 8001224:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001226:	9305      	str	r3, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001228:	f007 f910 	bl	800844c <PWMC_SetPhaseVoltage>
 800122c:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800122e:	9803      	ldr	r0, [sp, #12]
 8001230:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001232:	9804      	ldr	r0, [sp, #16]
 8001234:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001236:	9801      	ldr	r0, [sp, #4]
 8001238:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 800123a:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 800123c:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 800123e:	f8a4 8016 	strh.w	r8, [r4, #22]
 8001242:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001244:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001246:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 800124a:	d003      	beq.n	8001254 <TSK_HighFrequencyTask+0xbc>
}
 800124c:	2000      	movs	r0, #0
 800124e:	b006      	add	sp, #24
 8001250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	480a      	ldr	r0, [pc, #40]	; (8001280 <TSK_HighFrequencyTask+0xe8>)
 8001258:	f008 faee 	bl	8009838 <STM_FaultProcessing>
}
 800125c:	2000      	movs	r0, #0
 800125e:	b006      	add	sp, #24
 8001260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001264:	200002e0 	.word	0x200002e0
 8001268:	20001730 	.word	0x20001730
 800126c:	20001748 	.word	0x20001748
 8001270:	200017f8 	.word	0x200017f8
 8001274:	2000173c 	.word	0x2000173c
 8001278:	200017f4 	.word	0x200017f4
 800127c:	200017c0 	.word	0x200017c0
 8001280:	200017e4 	.word	0x200017e4

08001284 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8001288:	4f23      	ldr	r7, [pc, #140]	; (8001318 <TSK_SafetyTask_PWMOFF+0x94>)
{
 800128a:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800128c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001290:	f006 ffd4 	bl	800823c <NTC_CalcAvTemp>
 8001294:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8001296:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800129a:	f007 fa17 	bl	80086cc <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800129e:	f004 040e 	and.w	r4, r4, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 80012a2:	4304      	orrs	r4, r0
 80012a4:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80012a6:	b36d      	cbz	r5, 8001304 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80012a8:	4e1c      	ldr	r6, [pc, #112]	; (800131c <TSK_SafetyTask_PWMOFF+0x98>)
 80012aa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80012ae:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80012b2:	43e2      	mvns	r2, r4
 80012b4:	b292      	uxth	r2, r2
 80012b6:	4621      	mov	r1, r4
 80012b8:	4630      	mov	r0, r6
 80012ba:	f008 fabd 	bl	8009838 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80012be:	4630      	mov	r0, r6
 80012c0:	f008 fb48 	bl	8009954 <STM_GetState>
 80012c4:	280a      	cmp	r0, #10
 80012c6:	d008      	beq.n	80012da <TSK_SafetyTask_PWMOFF+0x56>
 80012c8:	280b      	cmp	r0, #11
 80012ca:	d105      	bne.n	80012d8 <TSK_SafetyTask_PWMOFF+0x54>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012cc:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80012d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012d4:	f007 b9ce 	b.w	8008674 <PWMC_SwitchOffPWM>
}
 80012d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <TSK_SafetyTask_PWMOFF+0x9c>)
 80012dc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80012e0:	b110      	cbz	r0, 80012e8 <TSK_SafetyTask_PWMOFF+0x64>
      EAC_SetRestartState( pEAC[bMotor], false );
 80012e2:	2100      	movs	r1, #0
 80012e4:	f006 fc30 	bl	8007b48 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80012e8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80012ec:	f007 f9c2 	bl	8008674 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80012f0:	4628      	mov	r0, r5
 80012f2:	f7ff fc77 	bl	8000be4 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <TSK_SafetyTask_PWMOFF+0xa0>)
 80012f8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 80012fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001300:	f006 bf4a 	b.w	8008198 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <TSK_SafetyTask_PWMOFF+0xa4>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f008 f938 	bl	800957c <RVBS_CalcAvVbus>
 800130c:	f000 000e 	and.w	r0, r0, #14
 8001310:	4304      	orrs	r4, r0
 8001312:	e7c9      	b.n	80012a8 <TSK_SafetyTask_PWMOFF+0x24>
 8001314:	2000172c 	.word	0x2000172c
 8001318:	20001730 	.word	0x20001730
 800131c:	200017e4 	.word	0x200017e4
 8001320:	20001738 	.word	0x20001738
 8001324:	200017f0 	.word	0x200017f0
 8001328:	200017c4 	.word	0x200017c4

0800132c <TSK_SafetyTask>:
{
 800132c:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <TSK_SafetyTask+0x1c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d000      	beq.n	8001338 <TSK_SafetyTask+0xc>
}
 8001336:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ffa3 	bl	8001284 <TSK_SafetyTask_PWMOFF>
}
 800133e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001342:	f000 bd45 	b.w	8001dd0 <RCM_ExecUserConv>
 8001346:	bf00      	nop
 8001348:	20000608 	.word	0x20000608

0800134c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected  
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800134c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <TSK_HardwareFaultTask+0x18>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f007 fb8f 	bl	8008a74 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2180      	movs	r1, #128	; 0x80
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <TSK_HardwareFaultTask+0x1c>)
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800135c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001360:	f008 ba6a 	b.w	8009838 <STM_FaultProcessing>
 8001364:	20001730 	.word	0x20001730
 8001368:	200017e4 	.word	0x200017e4

0800136c <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 800136c:	b508      	push	{r3, lr}
  /* init code for MotorControl */
  MX_MotorControl_Init();
 800136e:	f000 fc0f 	bl	8001b90 <MX_MotorControl_Init>
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001372:	2001      	movs	r0, #1
 8001374:	f006 faa8 	bl	80078c8 <vTaskDelay>
    MC_RunMotorControlTasks();
 8001378:	f7ff ff00 	bl	800117c <MC_RunMotorControlTasks>
 800137c:	e7f9      	b.n	8001372 <startMediumFrequencyTask+0x6>
 800137e:	bf00      	nop

08001380 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 8001380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f006 faa0 	bl	80078c8 <vTaskDelay>
    TSK_SafetyTask();
 8001388:	f7ff ffd0 	bl	800132c <TSK_SafetyTask>
 800138c:	e7f9      	b.n	8001382 <StartSafetyTask+0x2>
 800138e:	bf00      	nop

08001390 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration 
  */
__weak void mc_lock_pins (void)
{
 8001390:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001392:	4a55      	ldr	r2, [pc, #340]	; (80014e8 <mc_lock_pins+0x158>)
 8001394:	4c55      	ldr	r4, [pc, #340]	; (80014ec <mc_lock_pins+0x15c>)
 8001396:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001398:	2702      	movs	r7, #2
 800139a:	b094      	sub	sp, #80	; 0x50
 800139c:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800139e:	61d4      	str	r4, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80013a0:	69d3      	ldr	r3, [r2, #28]
 80013a2:	9313      	str	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a4:	4852      	ldr	r0, [pc, #328]	; (80014f0 <mc_lock_pins+0x160>)
  (void) temp;
 80013a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013a8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013aa:	2604      	movs	r6, #4
 80013ac:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ae:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013b0:	69d3      	ldr	r3, [r2, #28]
 80013b2:	9312      	str	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013b8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 80013bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013be:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013c0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013c4:	69d3      	ldr	r3, [r2, #28]
 80013c6:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013d0:	2501      	movs	r5, #1
  (void) temp;
 80013d2:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013d6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013d8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013da:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013dc:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80013e0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  (void) temp;
 80013e4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013e8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013ea:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013ec:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013ee:	69d1      	ldr	r1, [r2, #28]
 80013f0:	910f      	str	r1, [sp, #60]	; 0x3c
  (void) temp;
 80013f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f4:	493f      	ldr	r1, [pc, #252]	; (80014f4 <mc_lock_pins+0x164>)
 80013f6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013f8:	2580      	movs	r5, #128	; 0x80
 80013fa:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013fc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80013fe:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001402:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 8001406:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800140a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800140c:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800140e:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001410:	69dc      	ldr	r4, [r3, #28]
 8001412:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 8001414:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001416:	4c38      	ldr	r4, [pc, #224]	; (80014f8 <mc_lock_pins+0x168>)
 8001418:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800141a:	2708      	movs	r7, #8
 800141c:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800141e:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001420:	69dc      	ldr	r4, [r3, #28]
 8001422:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 8001424:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001426:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001428:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800142a:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800142c:	69d8      	ldr	r0, [r3, #28]
 800142e:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 8001430:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001432:	4832      	ldr	r0, [pc, #200]	; (80014fc <mc_lock_pins+0x16c>)
 8001434:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001436:	2440      	movs	r4, #64	; 0x40
 8001438:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800143a:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800143c:	69de      	ldr	r6, [r3, #28]
 800143e:	960a      	str	r6, [sp, #40]	; 0x28
  (void) temp;
 8001440:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001442:	4e2f      	ldr	r6, [pc, #188]	; (8001500 <mc_lock_pins+0x170>)
 8001444:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001446:	2720      	movs	r7, #32
 8001448:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800144a:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800144c:	69de      	ldr	r6, [r3, #28]
 800144e:	9609      	str	r6, [sp, #36]	; 0x24
  (void) temp;
 8001450:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001452:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001454:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001456:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001458:	69d0      	ldr	r0, [r2, #28]
 800145a:	9008      	str	r0, [sp, #32]
  (void) temp;
 800145c:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001460:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001462:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001464:	69d1      	ldr	r1, [r2, #28]
 8001466:	9107      	str	r1, [sp, #28]
  (void) temp;
 8001468:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800146a:	4926      	ldr	r1, [pc, #152]	; (8001504 <mc_lock_pins+0x174>)
 800146c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800146e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001472:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001474:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001476:	69d9      	ldr	r1, [r3, #28]
 8001478:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800147a:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800147e:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 8001482:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001484:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001486:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001488:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800148a:	69d9      	ldr	r1, [r3, #28]
 800148c:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800148e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001492:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8001496:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001498:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800149a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800149c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800149e:	69d9      	ldr	r1, [r3, #28]
 80014a0:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a6:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 80014aa:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ac:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ae:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ba:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 80014be:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c0:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014c2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c4:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014c6:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <mc_lock_pins+0x178>)
  temp = READ_REG(GPIOx->LCKR);
 80014ca:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d0:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 80014d4:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014d8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014da:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	9301      	str	r3, [sp, #4]
  (void) temp;
 80014e0:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80014e2:	b014      	add	sp, #80	; 0x50
 80014e4:	bcf0      	pop	{r4, r5, r6, r7}
 80014e6:	4770      	bx	lr
 80014e8:	48000400 	.word	0x48000400
 80014ec:	00010002 	.word	0x00010002
 80014f0:	00010004 	.word	0x00010004
 80014f4:	00010080 	.word	0x00010080
 80014f8:	00010008 	.word	0x00010008
 80014fc:	00010040 	.word	0x00010040
 8001500:	00010020 	.word	0x00010020
 8001504:	00010100 	.word	0x00010100
 8001508:	48000800 	.word	0x48000800

0800150c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800150c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001510:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001512:	2700      	movs	r7, #0
{
 8001514:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001516:	094a      	lsrs	r2, r1, #5
{
 8001518:	460c      	mov	r4, r1
 800151a:	4699      	mov	r9, r3
  bool bNoError = false; // Default is error
 800151c:	f88d 7009 	strb.w	r7, [sp, #9]
{
 8001520:	4605      	mov	r5, r0
  if (bMotorSelection != 0)
 8001522:	d11d      	bne.n	8001560 <MCP_ReceivedFrame+0x54>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001524:	290c      	cmp	r1, #12
 8001526:	d80e      	bhi.n	8001546 <MCP_ReceivedFrame+0x3a>
 8001528:	e8df f011 	tbh	[pc, r1, lsl #1]
 800152c:	004c0010 	.word	0x004c0010
 8001530:	016000d4 	.word	0x016000d4
 8001534:	000d000d 	.word	0x000d000d
 8001538:	0197016a 	.word	0x0197016a
 800153c:	01df01ac 	.word	0x01df01ac
 8001540:	02120201 	.word	0x02120201
 8001544:	0229      	.short	0x0229
    {
    }
    break;
  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001546:	2301      	movs	r3, #1
 8001548:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 800154c:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001550:	2301      	movs	r3, #1
 8001552:	f10d 020e 	add.w	r2, sp, #14
 8001556:	21ff      	movs	r1, #255	; 0xff
 8001558:	47a0      	blx	r4
    }
  }
}
 800155a:	b00d      	add	sp, #52	; 0x34
 800155c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001560:	f102 38ff 	add.w	r8, r2, #4294967295
 8001564:	4642      	mov	r2, r8
 8001566:	4639      	mov	r1, r7
 8001568:	f001 f916 	bl	8002798 <UI_SetReg>
 800156c:	b1d0      	cbz	r0, 80015a4 <MCP_ReceivedFrame+0x98>
      if (pHandle->pDAC)
 800156e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001572:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 8001576:	b118      	cbz	r0, 8001580 <MCP_ReceivedFrame+0x74>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 8001578:	4642      	mov	r2, r8
 800157a:	4639      	mov	r1, r7
 800157c:	f001 f90c 	bl	8002798 <UI_SetReg>
  switch (Code)
 8001580:	2c0c      	cmp	r4, #12
 8001582:	f200 82b7 	bhi.w	8001af4 <MCP_ReceivedFrame+0x5e8>
 8001586:	e8df f014 	tbh	[pc, r4, lsl #1]
 800158a:	01ad      	.short	0x01ad
 800158c:	00a5001d 	.word	0x00a5001d
 8001590:	02b50131 	.word	0x02b50131
 8001594:	013b02b5 	.word	0x013b02b5
 8001598:	017d0168 	.word	0x017d0168
 800159c:	01d201b0 	.word	0x01d201b0
 80015a0:	01fa01e3 	.word	0x01fa01e3
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80015a4:	230b      	movs	r3, #11
 80015a6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80015aa:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d0cc      	beq.n	800154c <MCP_ReceivedFrame+0x40>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80015b2:	2300      	movs	r3, #0
 80015b4:	461a      	mov	r2, r3
 80015b6:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80015ba:	21f0      	movs	r1, #240	; 0xf0
 80015bc:	47a0      	blx	r4
}
 80015be:	b00d      	add	sp, #52	; 0x34
 80015c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80015c4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80015c6:	2305      	movs	r3, #5
 80015c8:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80015cc:	297e      	cmp	r1, #126	; 0x7e
 80015ce:	f200 8297 	bhi.w	8001b00 <MCP_ReceivedFrame+0x5f4>
 80015d2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80015d6:	0280      	.short	0x0280
 80015d8:	02950295 	.word	0x02950295
 80015dc:	02950279 	.word	0x02950279
 80015e0:	026f026f 	.word	0x026f026f
 80015e4:	026f026f 	.word	0x026f026f
 80015e8:	026f026f 	.word	0x026f026f
 80015ec:	026f026f 	.word	0x026f026f
 80015f0:	026f026f 	.word	0x026f026f
 80015f4:	025f026f 	.word	0x025f026f
 80015f8:	0295025f 	.word	0x0295025f
 80015fc:	026f0295 	.word	0x026f0295
 8001600:	026f026f 	.word	0x026f026f
 8001604:	026f026f 	.word	0x026f026f
 8001608:	02950295 	.word	0x02950295
 800160c:	02550295 	.word	0x02550295
 8001610:	0295024b 	.word	0x0295024b
 8001614:	02950295 	.word	0x02950295
 8001618:	02950295 	.word	0x02950295
 800161c:	02950295 	.word	0x02950295
 8001620:	02950295 	.word	0x02950295
 8001624:	02950295 	.word	0x02950295
 8001628:	02950295 	.word	0x02950295
 800162c:	02950295 	.word	0x02950295
 8001630:	02950295 	.word	0x02950295
 8001634:	02950295 	.word	0x02950295
 8001638:	02950295 	.word	0x02950295
 800163c:	02950295 	.word	0x02950295
 8001640:	02950295 	.word	0x02950295
 8001644:	02950295 	.word	0x02950295
 8001648:	02950295 	.word	0x02950295
 800164c:	02950295 	.word	0x02950295
 8001650:	02950295 	.word	0x02950295
 8001654:	02950295 	.word	0x02950295
 8001658:	0295026f 	.word	0x0295026f
 800165c:	02950295 	.word	0x02950295
 8001660:	025f0295 	.word	0x025f0295
 8001664:	025f025f 	.word	0x025f025f
 8001668:	02950295 	.word	0x02950295
 800166c:	02950295 	.word	0x02950295
 8001670:	02950295 	.word	0x02950295
 8001674:	0295026f 	.word	0x0295026f
 8001678:	02950295 	.word	0x02950295
 800167c:	026f026f 	.word	0x026f026f
 8001680:	026f026f 	.word	0x026f026f
 8001684:	026f026f 	.word	0x026f026f
 8001688:	0295026f 	.word	0x0295026f
 800168c:	0295025f 	.word	0x0295025f
 8001690:	02950295 	.word	0x02950295
 8001694:	02950295 	.word	0x02950295
 8001698:	0295026f 	.word	0x0295026f
 800169c:	026f0295 	.word	0x026f0295
 80016a0:	0295026f 	.word	0x0295026f
 80016a4:	02950295 	.word	0x02950295
 80016a8:	02950295 	.word	0x02950295
 80016ac:	02950295 	.word	0x02950295
 80016b0:	02950295 	.word	0x02950295
 80016b4:	02950295 	.word	0x02950295
 80016b8:	02950295 	.word	0x02950295
 80016bc:	02790295 	.word	0x02790295
 80016c0:	025f025f 	.word	0x025f025f
 80016c4:	025f025f 	.word	0x025f025f
 80016c8:	0295025f 	.word	0x0295025f
 80016cc:	02950295 	.word	0x02950295
 80016d0:	025f025f 	.word	0x025f025f
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80016d4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80016d6:	2303      	movs	r3, #3
 80016d8:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80016dc:	2982      	cmp	r1, #130	; 0x82
 80016de:	f200 8101 	bhi.w	80018e4 <MCP_ReceivedFrame+0x3d8>
 80016e2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80016e6:	01b1      	.short	0x01b1
 80016e8:	01b1019f 	.word	0x01b1019f
 80016ec:	019f01b1 	.word	0x019f01b1
 80016f0:	018d018d 	.word	0x018d018d
 80016f4:	018d018d 	.word	0x018d018d
 80016f8:	018d018d 	.word	0x018d018d
 80016fc:	018d018d 	.word	0x018d018d
 8001700:	018d018d 	.word	0x018d018d
 8001704:	018d018d 	.word	0x018d018d
 8001708:	018d018d 	.word	0x018d018d
 800170c:	018d018d 	.word	0x018d018d
 8001710:	018d018d 	.word	0x018d018d
 8001714:	018d018d 	.word	0x018d018d
 8001718:	018d018d 	.word	0x018d018d
 800171c:	017c018d 	.word	0x017c018d
 8001720:	019f0169 	.word	0x019f0169
 8001724:	018d018d 	.word	0x018d018d
 8001728:	01b1018d 	.word	0x01b1018d
 800172c:	00ff00ff 	.word	0x00ff00ff
 8001730:	00ff00ff 	.word	0x00ff00ff
 8001734:	00ff00ff 	.word	0x00ff00ff
 8001738:	00ff00ff 	.word	0x00ff00ff
 800173c:	00ff00ff 	.word	0x00ff00ff
 8001740:	00ff00ff 	.word	0x00ff00ff
 8001744:	00ff00ff 	.word	0x00ff00ff
 8001748:	00ff00ff 	.word	0x00ff00ff
 800174c:	00ff00ff 	.word	0x00ff00ff
 8001750:	00ff00ff 	.word	0x00ff00ff
 8001754:	00ff00ff 	.word	0x00ff00ff
 8001758:	00ff00ff 	.word	0x00ff00ff
 800175c:	00ff00ff 	.word	0x00ff00ff
 8001760:	00ff00ff 	.word	0x00ff00ff
 8001764:	00ff00ff 	.word	0x00ff00ff
 8001768:	00ff018d 	.word	0x00ff018d
 800176c:	00ff00ff 	.word	0x00ff00ff
 8001770:	019f00ff 	.word	0x019f00ff
 8001774:	019f019f 	.word	0x019f019f
 8001778:	018d018d 	.word	0x018d018d
 800177c:	018d018d 	.word	0x018d018d
 8001780:	019f01b1 	.word	0x019f01b1
 8001784:	018d018d 	.word	0x018d018d
 8001788:	018d018d 	.word	0x018d018d
 800178c:	018d018d 	.word	0x018d018d
 8001790:	018d018d 	.word	0x018d018d
 8001794:	018d018d 	.word	0x018d018d
 8001798:	01b1018d 	.word	0x01b1018d
 800179c:	00ff019f 	.word	0x00ff019f
 80017a0:	018d018d 	.word	0x018d018d
 80017a4:	018d018d 	.word	0x018d018d
 80017a8:	00ff018d 	.word	0x00ff018d
 80017ac:	018d00ff 	.word	0x018d00ff
 80017b0:	01b1018d 	.word	0x01b1018d
 80017b4:	019f01b1 	.word	0x019f01b1
 80017b8:	019f019f 	.word	0x019f019f
 80017bc:	019f019f 	.word	0x019f019f
 80017c0:	018d01b1 	.word	0x018d01b1
 80017c4:	019f018d 	.word	0x019f018d
 80017c8:	018d00ff 	.word	0x018d00ff
 80017cc:	01b1018d 	.word	0x01b1018d
 80017d0:	019f019f 	.word	0x019f019f
 80017d4:	019f019f 	.word	0x019f019f
 80017d8:	019f019f 	.word	0x019f019f
 80017dc:	019f019f 	.word	0x019f019f
 80017e0:	019f019f 	.word	0x019f019f
 80017e4:	01b1019f 	.word	0x01b1019f
 80017e8:	01b100ff 	.word	0x01b100ff
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80017ec:	2307      	movs	r3, #7
      uint8_t bCmdID = buffer[0];
 80017ee:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80017f0:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80017f4:	4628      	mov	r0, r5
 80017f6:	f001 f895 	bl	8002924 <UI_ExecCmd>
 80017fa:	f88d 0009 	strb.w	r0, [sp, #9]
 80017fe:	e6d6      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
 8001800:	ac04      	add	r4, sp, #16
 8001802:	2100      	movs	r1, #0
 8001804:	4620      	mov	r0, r4
 8001806:	2220      	movs	r2, #32
 8001808:	f008 faa8 	bl	8009d5c <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800180c:	f8d5 60c0 	ldr.w	r6, [r5, #192]	; 0xc0
 8001810:	f10d 0012 	add.w	r0, sp, #18
 8001814:	1e71      	subs	r1, r6, #1
 8001816:	2300      	movs	r3, #0
 8001818:	e005      	b.n	8001826 <MCP_ReceivedFrame+0x31a>
 800181a:	3301      	adds	r3, #1
 800181c:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 800181e:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001822:	f000 8173 	beq.w	8001b0c <MCP_ReceivedFrame+0x600>
 8001826:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800182a:	2a09      	cmp	r2, #9
 800182c:	d1f5      	bne.n	800181a <MCP_ReceivedFrame+0x30e>
 800182e:	1d5a      	adds	r2, r3, #5
 8001830:	1dd9      	adds	r1, r3, #7
 8001832:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001834:	5cb2      	ldrb	r2, [r6, r2]
 8001836:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800183a:	5c72      	ldrb	r2, [r6, r1]
 800183c:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001840:	5cf3      	ldrb	r3, [r6, r3]
 8001842:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001846:	4622      	mov	r2, r4
 8001848:	2320      	movs	r3, #32
 800184a:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800184e:	21f0      	movs	r1, #240	; 0xf0
 8001850:	47a0      	blx	r4
      bNoError = true;
 8001852:	2301      	movs	r3, #1
 8001854:	f88d 3009 	strb.w	r3, [sp, #9]
 8001858:	e6ab      	b.n	80015b2 <MCP_ReceivedFrame+0xa6>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800185a:	7877      	ldrb	r7, [r6, #1]
 800185c:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800185e:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001860:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001862:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001864:	78f1      	ldrb	r1, [r6, #3]
 8001866:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800186a:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800186e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001872:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001876:	b292      	uxth	r2, r2
 8001878:	4628      	mov	r0, r5
 800187a:	f001 f891 	bl	80029a0 <UI_ExecSpeedRamp>
 800187e:	f88d 0009 	strb.w	r0, [sp, #9]
 8001882:	e694      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001884:	f10d 030e 	add.w	r3, sp, #14
 8001888:	7831      	ldrb	r1, [r6, #0]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f10d 020a 	add.w	r2, sp, #10
 8001890:	ab03      	add	r3, sp, #12
 8001892:	4628      	mov	r0, r5
 8001894:	f001 f896 	bl	80029c4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001898:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[6] = (uint8_t)(Durationms);
 800189c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 80018a0:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80018a4:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80018a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018ac:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 80018ae:	2200      	movs	r2, #0
      outBuff[1] = (uint8_t)(rpm >> 8);
 80018b0:	121c      	asrs	r4, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 80018b2:	f363 0207 	bfi	r2, r3, #0, #8
 80018b6:	f364 220f 	bfi	r2, r4, #8, #8
      outBuff[2] = (uint8_t)(rpm >> 16);
 80018ba:	141c      	asrs	r4, r3, #16
      outBuff[0] = (uint8_t)(rpm);
 80018bc:	f364 4217 	bfi	r2, r4, #16, #8
      outBuff[3] = (uint8_t)(rpm >> 24);
 80018c0:	161b      	asrs	r3, r3, #24
      outBuff[0] = (uint8_t)(rpm);
 80018c2:	f363 621f 	bfi	r2, r3, #24, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80018c6:	1209      	asrs	r1, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80018c8:	0a03      	lsrs	r3, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 80018ca:	9204      	str	r2, [sp, #16]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80018cc:	f88d 1015 	strb.w	r1, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 80018d0:	f88d 0016 	strb.w	r0, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80018d4:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80018d8:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80018dc:	2308      	movs	r3, #8
 80018de:	aa04      	add	r2, sp, #16
 80018e0:	21f0      	movs	r1, #240	; 0xf0
 80018e2:	47a0      	blx	r4
 80018e4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80018e8:	e661      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80018ea:	78b1      	ldrb	r1, [r6, #2]
 80018ec:	7873      	ldrb	r3, [r6, #1]
 80018ee:	78f2      	ldrb	r2, [r6, #3]
 80018f0:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80018f2:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80018f4:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80018f6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80018fa:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80018fe:	4a85      	ldr	r2, [pc, #532]	; (8001b14 <MCP_ReceivedFrame+0x608>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001900:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001902:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001906:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 800190a:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800190c:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001910:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001914:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001916:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800191a:	7831      	ldrb	r1, [r6, #0]
 800191c:	9000      	str	r0, [sp, #0]
 800191e:	b21b      	sxth	r3, r3
 8001920:	b292      	uxth	r2, r2
 8001922:	4628      	mov	r0, r5
 8001924:	f001 f86c 	bl	8002a00 <UI_SetRevupData>
 8001928:	f88d 0009 	strb.w	r0, [sp, #9]
 800192c:	e63f      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
      hIdRef = buffer[2] + (buffer[3] << 8);
 800192e:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001930:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001932:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001934:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001936:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 800193a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800193e:	b212      	sxth	r2, r2
 8001940:	b209      	sxth	r1, r1
 8001942:	4628      	mov	r0, r5
 8001944:	f001 f876 	bl	8002a34 <UI_SetCurrentReferences>
      bNoError = true;
 8001948:	2301      	movs	r3, #1
 800194a:	f88d 3009 	strb.w	r3, [sp, #9]
 800194e:	e630      	b.n	80015b2 <MCP_ReceivedFrame+0xa6>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001950:	4c71      	ldr	r4, [pc, #452]	; (8001b18 <MCP_ReceivedFrame+0x60c>)
      stepList.data = buffer;
 8001952:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001954:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001956:	4621      	mov	r1, r4
 8001958:	a804      	add	r0, sp, #16
      stepList.len = Size;
 800195a:	f88d 9014 	strb.w	r9, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800195e:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001962:	f001 f875 	bl	8002a50 <UI_GetMPInfo>
 8001966:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 800196a:	2800      	cmp	r0, #0
 800196c:	f43f adee 	beq.w	800154c <MCP_ReceivedFrame+0x40>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001970:	e9d5 060c 	ldrd	r0, r6, [r5, #48]	; 0x30
 8001974:	7923      	ldrb	r3, [r4, #4]
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	21f0      	movs	r1, #240	; 0xf0
 800197a:	47b0      	blx	r6
 800197c:	e5ed      	b.n	800155a <MCP_ReceivedFrame+0x4e>
 800197e:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8001982:	ac04      	add	r4, sp, #16
 8001984:	3a01      	subs	r2, #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001986:	4623      	mov	r3, r4
 8001988:	ae0c      	add	r6, sp, #48	; 0x30
 800198a:	e004      	b.n	8001996 <MCP_ReceivedFrame+0x48a>
        outBuff[i] = pHandle->s_fwVer[i];
 800198c:	f803 1b01 	strb.w	r1, [r3], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001990:	429e      	cmp	r6, r3
 8001992:	f43f af58 	beq.w	8001846 <MCP_ReceivedFrame+0x33a>
 8001996:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800199a:	1b18      	subs	r0, r3, r4
 800199c:	b2c0      	uxtb	r0, r0
 800199e:	2900      	cmp	r1, #0
 80019a0:	d1f4      	bne.n	800198c <MCP_ReceivedFrame+0x480>
      for (; i < 32; i++)
 80019a2:	281f      	cmp	r0, #31
 80019a4:	f63f af4f 	bhi.w	8001846 <MCP_ReceivedFrame+0x33a>
        outBuff[i] = 0;
 80019a8:	f1c0 021f 	rsb	r2, r0, #31
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	3201      	adds	r2, #1
 80019b0:	4420      	add	r0, r4
 80019b2:	f008 f9d3 	bl	8009d5c <memset>
 80019b6:	e746      	b.n	8001846 <MCP_ReceivedFrame+0x33a>
          if (pHandle->pDAC)
 80019b8:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80019bc:	2800      	cmp	r0, #0
 80019be:	d091      	beq.n	80018e4 <MCP_ReceivedFrame+0x3d8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80019c0:	2101      	movs	r1, #1
 80019c2:	f001 f853 	bl	8002a6c <UI_GetDAC>
 80019c6:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80019c8:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 80019ca:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80019ce:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80019d0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80019d2:	21f0      	movs	r1, #240	; 0xf0
 80019d4:	47a0      	blx	r4
            bNoError = true;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f88d 3009 	strb.w	r3, [sp, #9]
 80019dc:	e5e9      	b.n	80015b2 <MCP_ReceivedFrame+0xa6>
          if (pHandle->pDAC)
 80019de:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80019e2:	2800      	cmp	r0, #0
 80019e4:	f43f af7e 	beq.w	80018e4 <MCP_ReceivedFrame+0x3d8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	f001 f83f 	bl	8002a6c <UI_GetDAC>
 80019ee:	aa0c      	add	r2, sp, #48	; 0x30
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80019f0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 80019f2:	f802 0d20 	strb.w	r0, [r2, #-32]!
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80019f6:	2301      	movs	r3, #1
 80019f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80019fa:	21f0      	movs	r1, #240	; 0xf0
 80019fc:	47a0      	blx	r4
 80019fe:	e5ac      	b.n	800155a <MCP_ReceivedFrame+0x4e>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a00:	f10d 0209 	add.w	r2, sp, #9
 8001a04:	4628      	mov	r0, r5
 8001a06:	f001 f837 	bl	8002a78 <UI_GetReg>
          if ( bNoError == true )
 8001a0a:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a0e:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f43f ad9b 	beq.w	800154c <MCP_ReceivedFrame+0x40>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001a16:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	aa04      	add	r2, sp, #16
 8001a1e:	21f0      	movs	r1, #240	; 0xf0
 8001a20:	47a0      	blx	r4
 8001a22:	e59a      	b.n	800155a <MCP_ReceivedFrame+0x4e>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001a24:	f10d 0209 	add.w	r2, sp, #9
 8001a28:	4628      	mov	r0, r5
 8001a2a:	f001 f825 	bl	8002a78 <UI_GetReg>
          if ( bNoError == true )
 8001a2e:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001a32:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f43f ad89 	beq.w	800154c <MCP_ReceivedFrame+0x40>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001a3a:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001a3e:	2304      	movs	r3, #4
 8001a40:	aa04      	add	r2, sp, #16
 8001a42:	21f0      	movs	r1, #240	; 0xf0
 8001a44:	47a0      	blx	r4
 8001a46:	e588      	b.n	800155a <MCP_ReceivedFrame+0x4e>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a48:	f10d 0209 	add.w	r2, sp, #9
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f001 f813 	bl	8002a78 <UI_GetReg>
           if ( bNoError == true )
 8001a52:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a56:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f43f ad77 	beq.w	800154c <MCP_ReceivedFrame+0x40>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001a5e:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001a62:	2301      	movs	r3, #1
 8001a64:	aa04      	add	r2, sp, #16
 8001a66:	21f0      	movs	r1, #240	; 0xf0
 8001a68:	47a0      	blx	r4
 8001a6a:	e576      	b.n	800155a <MCP_ReceivedFrame+0x4e>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001a6c:	7872      	ldrb	r2, [r6, #1]
 8001a6e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001a72:	2101      	movs	r1, #1
 8001a74:	f000 fff6 	bl	8002a64 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f88d 3009 	strb.w	r3, [sp, #9]
 8001a7e:	e598      	b.n	80015b2 <MCP_ReceivedFrame+0xa6>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001a80:	7872      	ldrb	r2, [r6, #1]
 8001a82:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001a86:	2100      	movs	r1, #0
 8001a88:	f000 ffec 	bl	8002a64 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f88d 3009 	strb.w	r3, [sp, #9]
 8001a92:	e58e      	b.n	80015b2 <MCP_ReceivedFrame+0xa6>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a94:	78b4      	ldrb	r4, [r6, #2]
 8001a96:	7873      	ldrb	r3, [r6, #1]
 8001a98:	78f0      	ldrb	r0, [r6, #3]
 8001a9a:	7932      	ldrb	r2, [r6, #4]
 8001a9c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001aa0:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001aa4:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 fe75 	bl	8002798 <UI_SetReg>
 8001aae:	f88d 0009 	strb.w	r0, [sp, #9]
 8001ab2:	e57c      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001ab4:	78b2      	ldrb	r2, [r6, #2]
 8001ab6:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ab8:	4628      	mov	r0, r5
 8001aba:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001abe:	f000 fe6b 	bl	8002798 <UI_SetReg>
 8001ac2:	f88d 0009 	strb.w	r0, [sp, #9]
 8001ac6:	e572      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001ac8:	7872      	ldrb	r2, [r6, #1]
 8001aca:	4628      	mov	r0, r5
 8001acc:	f000 fe64 	bl	8002798 <UI_SetReg>
 8001ad0:	f88d 0009 	strb.w	r0, [sp, #9]
 8001ad4:	e56b      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
          int32_t wValue = (int32_t)(buffer[1]);
 8001ad6:	7874      	ldrb	r4, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001ad8:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001adc:	4622      	mov	r2, r4
 8001ade:	2100      	movs	r1, #0
 8001ae0:	f000 fe5a 	bl	8002798 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 fe55 	bl	8002798 <UI_SetReg>
 8001aee:	f88d 0009 	strb.w	r0, [sp, #9]
 8001af2:	e55c      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001afa:	f88d 300e 	strb.w	r3, [sp, #14]
 8001afe:	e556      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f88d 300e 	strb.w	r3, [sp, #14]
 8001b06:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001b0a:	e550      	b.n	80015ae <MCP_ReceivedFrame+0xa2>
 8001b0c:	2326      	movs	r3, #38	; 0x26
 8001b0e:	2124      	movs	r1, #36	; 0x24
 8001b10:	2222      	movs	r2, #34	; 0x22
 8001b12:	e68f      	b.n	8001834 <MCP_ReceivedFrame+0x328>
 8001b14:	2aaaaaab 	.word	0x2aaaaaab
 8001b18:	20000610 	.word	0x20000610

08001b1c <MCP_WaitNextFrame>:
{
 8001b1c:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b1e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8001b20:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b22:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001b24:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8001b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b34:	4718      	bx	r3
 8001b36:	bf00      	nop

08001b38 <MCP_Init>:
{
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	461e      	mov	r6, r3
  pHandle->pDAC = pDAC;
 8001b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001b42:	6301      	str	r1, [r0, #48]	; 0x30
  FCP_SetClient( pFCP, pHandle,
 8001b44:	4f0b      	ldr	r7, [pc, #44]	; (8001b74 <MCP_Init+0x3c>)
  pHandle->pDAC = pDAC;
 8001b46:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  pHandle->s_fwVer = s_fwVer;
 8001b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b4c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001b50:	4608      	mov	r0, r1
{
 8001b52:	4615      	mov	r5, r2
  FCP_SetClient( pFCP, pHandle,
 8001b54:	4621      	mov	r1, r4
 8001b56:	9700      	str	r7, [sp, #0]
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MCP_Init+0x40>)
{
 8001b5a:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <MCP_Init+0x44>)
 8001b5e:	f006 f951 	bl	8007e04 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001b62:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001b66:	63e7      	str	r7, [r4, #60]	; 0x3c
  MCP_WaitNextFrame(pHandle);
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff ffd7 	bl	8001b1c <MCP_WaitNextFrame>
}
 8001b6e:	b003      	add	sp, #12
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	08001b81 	.word	0x08001b81
 8001b78:	0800150d 	.word	0x0800150d
 8001b7c:	08001b89 	.word	0x08001b89

08001b80 <MCP_OnTimeOut>:
{
 8001b80:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001b82:	f7ff ffcb 	bl	8001b1c <MCP_WaitNextFrame>
}
 8001b86:	bd08      	pop	{r3, pc}

08001b88 <MCP_SentFrame>:
{
 8001b88:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001b8a:	f7ff ffc7 	bl	8001b1c <MCP_WaitNextFrame>
}
 8001b8e:	bd08      	pop	{r3, pc}

08001b90 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and 
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void) 
{
 8001b90:	b530      	push	{r4, r5, lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001b92:	4d09      	ldr	r5, [pc, #36]	; (8001bb8 <MX_MotorControl_Init+0x28>)
 8001b94:	4c09      	ldr	r4, [pc, #36]	; (8001bbc <MX_MotorControl_Init+0x2c>)
{
 8001b96:	b083      	sub	sp, #12
  MCboot(pMCI,pMCT);
 8001b98:	4629      	mov	r1, r5
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff f860 	bl	8000c60 <MCboot>
  mc_lock_pins();
 8001ba0:	f7ff fbf6 	bl	8001390 <mc_lock_pins>
  
  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_MotorControl_Init+0x30>)
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4622      	mov	r2, r4
 8001baa:	462b      	mov	r3, r5
 8001bac:	2101      	movs	r1, #1
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_MotorControl_Init+0x34>)
 8001bb0:	f000 fd38 	bl	8002624 <UI_TaskInit>
 
}
 8001bb4:	b003      	add	sp, #12
 8001bb6:	bd30      	pop	{r4, r5, pc}
 8001bb8:	20001800 	.word	0x20001800
 8001bbc:	200017fc 	.word	0x200017fc
 8001bc0:	08009ebc 	.word	0x08009ebc
 8001bc4:	200005d4 	.word	0x200005d4

08001bc8 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8001bc8:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001bca:	f003 f977 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <vPortSetupTimerInterrupt+0x18>)
 8001bd0:	fba3 3000 	umull	r3, r0, r3, r0
 8001bd4:	09c0      	lsrs	r0, r0, #7
}
 8001bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001bda:	f002 b8d5 	b.w	8003d88 <HAL_SYSTICK_Config>
 8001bde:	bf00      	nop
 8001be0:	10624dd3 	.word	0x10624dd3

08001be4 <RCM_RegisterRegConv>:
  
    /* Parse the array to be sure that same 
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    { 
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001be4:	4a5c      	ldr	r2, [pc, #368]	; (8001d58 <RCM_RegisterRegConv+0x174>)
 8001be6:	6811      	ldr	r1, [r2, #0]
{
 8001be8:	b470      	push	{r4, r5, r6}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001bea:	2900      	cmp	r1, #0
 8001bec:	d076      	beq.n	8001cdc <RCM_RegisterRegConv+0xf8>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/ 
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001bee:	7904      	ldrb	r4, [r0, #4]
 8001bf0:	790b      	ldrb	r3, [r1, #4]
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	d01e      	beq.n	8001c34 <RCM_RegisterRegConv+0x50>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001bf6:	6853      	ldr	r3, [r2, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8082 	beq.w	8001d02 <RCM_RegisterRegConv+0x11e>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001bfe:	791d      	ldrb	r5, [r3, #4]
 8001c00:	42a5      	cmp	r5, r4
  uint8_t handle=255;
 8001c02:	f04f 01ff 	mov.w	r1, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c06:	d070      	beq.n	8001cea <RCM_RegisterRegConv+0x106>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001c08:	6895      	ldr	r5, [r2, #8]
 8001c0a:	2d00      	cmp	r5, #0
 8001c0c:	f000 8095 	beq.w	8001d3a <RCM_RegisterRegConv+0x156>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c10:	792b      	ldrb	r3, [r5, #4]
 8001c12:	42a3      	cmp	r3, r4
 8001c14:	d06f      	beq.n	8001cf6 <RCM_RegisterRegConv+0x112>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001c16:	68d3      	ldr	r3, [r2, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8089 	beq.w	8001d30 <RCM_RegisterRegConv+0x14c>
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c1e:	791d      	ldrb	r5, [r3, #4]
 8001c20:	42a5      	cmp	r5, r4
 8001c22:	d078      	beq.n	8001d16 <RCM_RegisterRegConv+0x132>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }    
    if (handle < RCM_MAX_CONV )
 8001c24:	2903      	cmp	r1, #3
 8001c26:	bf88      	it	hi
 8001c28:	21ff      	movhi	r1, #255	; 0xff
 8001c2a:	f240 808b 	bls.w	8001d44 <RCM_RegisterRegConv+0x160>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001c2e:	4608      	mov	r0, r1
 8001c30:	bc70      	pop	{r4, r5, r6}
 8001c32:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001c34:	6809      	ldr	r1, [r1, #0]
 8001c36:	6803      	ldr	r3, [r0, #0]
 8001c38:	428b      	cmp	r3, r1
 8001c3a:	d1dc      	bne.n	8001bf6 <RCM_RegisterRegConv+0x12>
  uint8_t i=0;
 8001c3c:	2100      	movs	r1, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c3e:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c40:	4d46      	ldr	r5, [pc, #280]	; (8001d5c <RCM_RegisterRegConv+0x178>)
      RCM_handle_array [handle] = regConv;
 8001c42:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c46:	2200      	movs	r2, #0
 8001c48:	f845 2031 	str.w	r2, [r5, r1, lsl #3]
 8001c4c:	07e5      	lsls	r5, r4, #31
 8001c4e:	d422      	bmi.n	8001c96 <RCM_RegisterRegConv+0xb2>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001c50:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c52:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001c54:	f022 0204 	bic.w	r2, r2, #4
 8001c58:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c5a:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001c5c:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001c5e:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001c60:	f022 0220 	bic.w	r2, r2, #32
 8001c64:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001c66:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001c6e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001c72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c76:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	dbfc      	blt.n	8001c78 <RCM_RegisterRegConv+0x94>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	07d4      	lsls	r4, r2, #31
 8001c82:	d408      	bmi.n	8001c96 <RCM_RegisterRegConv+0xb2>
  MODIFY_REG(ADCx->CR,
 8001c84:	4c36      	ldr	r4, [pc, #216]	; (8001d60 <RCM_RegisterRegConv+0x17c>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4022      	ands	r2, r4
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	07d2      	lsls	r2, r2, #31
 8001c94:	d5f7      	bpl.n	8001c86 <RCM_RegisterRegConv+0xa2>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c98:	f022 020f 	bic.w	r2, r2, #15
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001c9e:	7904      	ldrb	r4, [r0, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2c09      	cmp	r4, #9
 8001ca4:	ea4f 6684 	mov.w	r6, r4, lsl #26
 8001ca8:	fa02 f204 	lsl.w	r2, r2, r4
 8001cac:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001cb0:	d837      	bhi.n	8001d22 <RCM_RegisterRegConv+0x13e>
 8001cb2:	ea46 5505 	orr.w	r5, r6, r5, lsl #20
 8001cb6:	432a      	orrs	r2, r5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cb8:	0dd4      	lsrs	r4, r2, #23
 8001cba:	f004 0404 	and.w	r4, r4, #4
 8001cbe:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8001cc0:	6885      	ldr	r5, [r0, #8]
 8001cc2:	58e0      	ldr	r0, [r4, r3]
 8001cc4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001cc8:	2607      	movs	r6, #7
 8001cca:	4096      	lsls	r6, r2
 8001ccc:	4095      	lsls	r5, r2
 8001cce:	ea20 0206 	bic.w	r2, r0, r6
 8001cd2:	432a      	orrs	r2, r5
 8001cd4:	50e2      	str	r2, [r4, r3]
}
 8001cd6:	4608      	mov	r0, r1
 8001cd8:	bc70      	pop	{r4, r5, r6}
 8001cda:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001cdc:	6853      	ldr	r3, [r2, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d032      	beq.n	8001d48 <RCM_RegisterRegConv+0x164>
 8001ce2:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001ce4:	791d      	ldrb	r5, [r3, #4]
 8001ce6:	42a5      	cmp	r5, r4
 8001ce8:	d18e      	bne.n	8001c08 <RCM_RegisterRegConv+0x24>
 8001cea:	681d      	ldr	r5, [r3, #0]
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	42ab      	cmp	r3, r5
 8001cf0:	d18a      	bne.n	8001c08 <RCM_RegisterRegConv+0x24>
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	e7a3      	b.n	8001c3e <RCM_RegisterRegConv+0x5a>
 8001cf6:	682d      	ldr	r5, [r5, #0]
 8001cf8:	6803      	ldr	r3, [r0, #0]
 8001cfa:	429d      	cmp	r5, r3
 8001cfc:	d18b      	bne.n	8001c16 <RCM_RegisterRegConv+0x32>
      i++;
 8001cfe:	2102      	movs	r1, #2
 8001d00:	e79d      	b.n	8001c3e <RCM_RegisterRegConv+0x5a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d02:	6895      	ldr	r5, [r2, #8]
      i++;
 8001d04:	2101      	movs	r1, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	d182      	bne.n	8001c10 <RCM_RegisterRegConv+0x2c>
 8001d0a:	68d3      	ldr	r3, [r2, #12]
 8001d0c:	b1d3      	cbz	r3, 8001d44 <RCM_RegisterRegConv+0x160>
 8001d0e:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 8001d10:	791d      	ldrb	r5, [r3, #4]
 8001d12:	42a5      	cmp	r5, r4
 8001d14:	d186      	bne.n	8001c24 <RCM_RegisterRegConv+0x40>
 8001d16:	681c      	ldr	r4, [r3, #0]
 8001d18:	6803      	ldr	r3, [r0, #0]
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	d182      	bne.n	8001c24 <RCM_RegisterRegConv+0x40>
      i++;
 8001d1e:	2103      	movs	r1, #3
 8001d20:	e78d      	b.n	8001c3e <RCM_RegisterRegConv+0x5a>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001d22:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001d26:	4332      	orrs	r2, r6
 8001d28:	3d1e      	subs	r5, #30
 8001d2a:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8001d2e:	e7c3      	b.n	8001cb8 <RCM_RegisterRegConv+0xd4>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 8001d30:	2904      	cmp	r1, #4
 8001d32:	f67f af77 	bls.w	8001c24 <RCM_RegisterRegConv+0x40>
 8001d36:	6803      	ldr	r3, [r0, #0]
 8001d38:	e7f1      	b.n	8001d1e <RCM_RegisterRegConv+0x13a>
 8001d3a:	2904      	cmp	r1, #4
 8001d3c:	bf8c      	ite	hi
 8001d3e:	2102      	movhi	r1, #2
 8001d40:	2100      	movls	r1, #0
 8001d42:	e7e2      	b.n	8001d0a <RCM_RegisterRegConv+0x126>
 8001d44:	6803      	ldr	r3, [r0, #0]
 8001d46:	e77a      	b.n	8001c3e <RCM_RegisterRegConv+0x5a>
 8001d48:	6895      	ldr	r5, [r2, #8]
 8001d4a:	b115      	cbz	r5, 8001d52 <RCM_RegisterRegConv+0x16e>
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	7904      	ldrb	r4, [r0, #4]
 8001d50:	e75e      	b.n	8001c10 <RCM_RegisterRegConv+0x2c>
 8001d52:	4629      	mov	r1, r5
 8001d54:	e7d9      	b.n	8001d0a <RCM_RegisterRegConv+0x126>
 8001d56:	bf00      	nop
 8001d58:	2000182c 	.word	0x2000182c
 8001d5c:	20001808 	.word	0x20001808
 8001d60:	7fffffc0 	.word	0x7fffffc0

08001d64 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001d64:	b410      	push	{r4}
  uint16_t retVal;
 
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <RCM_ExecRegularConv+0x68>)
 8001d68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d6c:	7919      	ldrb	r1, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2909      	cmp	r1, #9
 8001d72:	f04f 0301 	mov.w	r3, #1
 8001d76:	ea4f 6481 	mov.w	r4, r1, lsl #26
 8001d7a:	fa03 f301 	lsl.w	r3, r3, r1
 8001d7e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001d82:	d81b      	bhi.n	8001dbc <RCM_ExecRegularConv+0x58>
 8001d84:	ea44 5000 	orr.w	r0, r4, r0, lsl #20
 8001d88:	4303      	orrs	r3, r0
  MODIFY_REG(*preg,
 8001d8a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d8c:	0d1b      	lsrs	r3, r3, #20
 8001d8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d92:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001d96:	430b      	orrs	r3, r1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001d9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8001d9c:	6893      	ldr	r3, [r2, #8]
 8001d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001da2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	075b      	lsls	r3, r3, #29
 8001db0:	d5fc      	bpl.n	8001dac <RCM_ExecRegularConv+0x48>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001db2:	6c10      	ldr	r0, [r2, #64]	; 0x40
    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );   
return retVal;
}
 8001db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001db8:	b280      	uxth	r0, r0
 8001dba:	4770      	bx	lr
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	4323      	orrs	r3, r4
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dc2:	381e      	subs	r0, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dc4:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8001dc8:	e7df      	b.n	8001d8a <RCM_ExecRegularConv+0x26>
 8001dca:	bf00      	nop
 8001dcc:	2000182c 	.word	0x2000182c

08001dd0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
void RCM_ExecUserConv ()
{
 8001dd0:	b470      	push	{r4, r5, r6}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001dd2:	4c23      	ldr	r4, [pc, #140]	; (8001e60 <RCM_ExecUserConv+0x90>)
 8001dd4:	7823      	ldrb	r3, [r4, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <RCM_ExecUserConv+0xe>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001dda:	bc70      	pop	{r4, r5, r6}
 8001ddc:	4770      	bx	lr
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001dde:	4921      	ldr	r1, [pc, #132]	; (8001e64 <RCM_ExecUserConv+0x94>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <RCM_ExecUserConv+0x98>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001de2:	7808      	ldrb	r0, [r1, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001de4:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001de8:	7911      	ldrb	r1, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	2909      	cmp	r1, #9
 8001dee:	fa03 f301 	lsl.w	r3, r3, r1
 8001df2:	ea4f 6681 	mov.w	r6, r1, lsl #26
 8001df6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8001dfa:	d92c      	bls.n	8001e56 <RCM_ExecUserConv+0x86>
 8001dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e00:	4333      	orrs	r3, r6
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001e02:	3d1e      	subs	r5, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e04:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
  MODIFY_REG(*preg,
 8001e08:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e0a:	0d1b      	lsrs	r3, r3, #20
 8001e0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e10:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001e18:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8001e1a:	6893      	ldr	r3, [r2, #8]
 8001e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	075b      	lsls	r3, r3, #29
 8001e2e:	d5fc      	bpl.n	8001e2a <RCM_ExecUserConv+0x5a>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <RCM_ExecUserConv+0x9c>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001e32:	6c11      	ldr	r1, [r2, #64]	; 0x40
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e34:	4e0e      	ldr	r6, [pc, #56]	; (8001e70 <RCM_ExecUserConv+0xa0>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e36:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8001e3a:	b289      	uxth	r1, r1
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e3c:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e3e:	8031      	strh	r1, [r6, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e40:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e42:	2d00      	cmp	r5, #0
 8001e44:	d0c9      	beq.n	8001dda <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e46:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001e4a:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e4c:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001e4e:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e50:	462b      	mov	r3, r5
}
 8001e52:	bc70      	pop	{r4, r5, r6}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e54:	4718      	bx	r3
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e56:	ea46 5505 	orr.w	r5, r6, r5, lsl #20
 8001e5a:	432b      	orrs	r3, r5
 8001e5c:	e7d4      	b.n	8001e08 <RCM_ExecUserConv+0x38>
 8001e5e:	bf00      	nop
 8001e60:	20001828 	.word	0x20001828
 8001e64:	20001804 	.word	0x20001804
 8001e68:	2000182c 	.word	0x2000182c
 8001e6c:	20001808 	.word	0x20001808
 8001e70:	2000183c 	.word	0x2000183c

08001e74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_MspInit+0x48>)
{
 8001e76:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	661a      	str	r2, [r3, #96]	; 0x60
 8001e80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001e82:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e84:	f002 0201 	and.w	r2, r2, #1
 8001e88:	9200      	str	r2, [sp, #0]
 8001e8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e92:	659a      	str	r2, [r3, #88]	; 0x58
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea6:	f001 ff2b 	bl	8003d00 <HAL_NVIC_SetPriority>
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <HAL_MspInit+0x4c>)
 8001eac:	6893      	ldr	r3, [r2, #8]
 8001eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb2:	6093      	str	r3, [r2, #8]
  LL_PWR_DisableDeadBatteryPD();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb4:	b003      	add	sp, #12
 8001eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001ec6:	6802      	ldr	r2, [r0, #0]
{
 8001ec8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8001ecc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001ed4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8001ed8:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8001eda:	d01f      	beq.n	8001f1c <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_ADC_MspInit+0xe0>)
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ee2:	b00a      	add	sp, #40	; 0x28
 8001ee4:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ee6:	4a30      	ldr	r2, [pc, #192]	; (8001fa8 <HAL_ADC_MspInit+0xe4>)
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001eec:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ef0:	d04d      	beq.n	8001f8e <HAL_ADC_MspInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <HAL_ADC_MspInit+0xe8>)
 8001ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8001f04:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f06:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f08:	a905      	add	r1, sp, #20
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f002 f9f2 	bl	80042fc <HAL_GPIO_Init>
}
 8001f18:	b00a      	add	sp, #40	; 0x28
 8001f1a:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f1c:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <HAL_ADC_MspInit+0xe4>)
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f22:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f26:	d027      	beq.n	8001f78 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_ADC_MspInit+0xe8>)
 8001f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f34:	f002 0201 	and.w	r2, r2, #1
 8001f38:	9201      	str	r2, [sp, #4]
 8001f3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f3e:	f042 0202 	orr.w	r2, r2, #2
 8001f42:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8001f4e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	a905      	add	r1, sp, #20
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f58:	e9cd 3405 	strd	r3, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f002 f9ce 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8001f60:	f244 0202 	movw	r2, #16386	; 0x4002
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	a905      	add	r1, sp, #20
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8001f6c:	e9cd 2405 	strd	r2, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f002 f9c4 	bl	80042fc <HAL_GPIO_Init>
}
 8001f74:	b00a      	add	sp, #40	; 0x28
 8001f76:	bd10      	pop	{r4, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_ADC_MspInit+0xe8>)
 8001f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	9b00      	ldr	r3, [sp, #0]
 8001f8c:	e7cc      	b.n	8001f28 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <HAL_ADC_MspInit+0xe8>)
 8001f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f96:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	9b03      	ldr	r3, [sp, #12]
 8001fa2:	e7a6      	b.n	8001ef2 <HAL_ADC_MspInit+0x2e>
 8001fa4:	50000100 	.word	0x50000100
 8001fa8:	20000618 	.word	0x20000618
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000400 	.word	0x48000400

08001fb4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001fb4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8001fb6:	6802      	ldr	r2, [r0, #0]
 8001fb8:	492c      	ldr	r1, [pc, #176]	; (800206c <HAL_COMP_MspInit+0xb8>)
{
 8001fba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8001fbe:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001fc4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001fc8:	9307      	str	r3, [sp, #28]
  if(hcomp->Instance==COMP1)
 8001fca:	d007      	beq.n	8001fdc <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_COMP_MspInit+0xbc>)
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d033      	beq.n	800203a <HAL_COMP_MspInit+0x86>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_COMP_MspInit+0xc0>)
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d019      	beq.n	800200c <HAL_COMP_MspInit+0x58>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8001fd8:	b008      	add	sp, #32
 8001fda:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fe0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8001ff6:	2202      	movs	r2, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff8:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8002004:	f002 f97a 	bl	80042fc <HAL_GPIO_Init>
}
 8002008:	b008      	add	sp, #32
 800200a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002010:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002014:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002016:	4818      	ldr	r0, [pc, #96]	; (8002078 <HAL_COMP_MspInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	f042 0202 	orr.w	r2, r2, #2
 800201c:	64da      	str	r2, [r3, #76]	; 0x4c
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8002026:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002028:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800202a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002032:	f002 f963 	bl	80042fc <HAL_GPIO_Init>
}
 8002036:	b008      	add	sp, #32
 8002038:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800203e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	64da      	str	r2, [r3, #76]	; 0x4c
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002052:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002054:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002056:	a903      	add	r1, sp, #12
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002062:	f002 f94b 	bl	80042fc <HAL_GPIO_Init>
}
 8002066:	b008      	add	sp, #32
 8002068:	bd10      	pop	{r4, pc}
 800206a:	bf00      	nop
 800206c:	40010200 	.word	0x40010200
 8002070:	40010204 	.word	0x40010204
 8002074:	4001020c 	.word	0x4001020c
 8002078:	48000400 	.word	0x48000400

0800207c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800207c:	6802      	ldr	r2, [r0, #0]
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_CRC_MspInit+0x28>)
 8002080:	429a      	cmp	r2, r3
 8002082:	d000      	beq.n	8002086 <HAL_CRC_MspInit+0xa>
 8002084:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002086:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
{
 800208a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800208c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800208e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002092:	649a      	str	r2, [r3, #72]	; 0x48
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800209e:	b002      	add	sp, #8
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023000 	.word	0x40023000

080020a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020a8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80020aa:	6802      	ldr	r2, [r0, #0]
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_DAC_MspInit+0x70>)
{
 80020ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	2400      	movs	r4, #0
  if(hdac->Instance==DAC1)
 80020b2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80020b8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80020bc:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC1)
 80020be:	d001      	beq.n	80020c4 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020c0:	b009      	add	sp, #36	; 0x24
 80020c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 80020c4:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80020c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 80020cc:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 80020ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80020dc:	9201      	str	r2, [sp, #4]
 80020de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 80020f0:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f2:	2303      	movs	r3, #3
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f002 f8fd 	bl	80042fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002102:	4622      	mov	r2, r4
 8002104:	4621      	mov	r1, r4
 8002106:	2036      	movs	r0, #54	; 0x36
 8002108:	f001 fdfa 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800210c:	2036      	movs	r0, #54	; 0x36
 800210e:	f001 fe2d 	bl	8003d6c <HAL_NVIC_EnableIRQ>
}
 8002112:	b009      	add	sp, #36	; 0x24
 8002114:	bd30      	pop	{r4, r5, pc}
 8002116:	bf00      	nop
 8002118:	50000800 	.word	0x50000800

0800211c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800211c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 800211e:	6802      	ldr	r2, [r0, #0]
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_FDCAN_MspInit+0x88>)
{
 8002122:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	2400      	movs	r4, #0
  if(hfdcan->Instance==FDCAN1)
 8002126:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800212c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002130:	9407      	str	r4, [sp, #28]
  if(hfdcan->Instance==FDCAN1)
 8002132:	d001      	beq.n	8002138 <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002134:	b008      	add	sp, #32
 8002136:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002138:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2602      	movs	r6, #2
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800213e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002140:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002144:	659a      	str	r2, [r3, #88]	; 0x58
 8002146:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002148:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800214c:	9200      	str	r2, [sp, #0]
 800214e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	64da      	str	r2, [r3, #76]	; 0x4c
 8002158:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800215a:	f002 0201 	and.w	r2, r2, #1
 800215e:	9201      	str	r2, [sp, #4]
 8002160:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002164:	f042 0202 	orr.w	r2, r2, #2
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002172:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002174:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	a903      	add	r1, sp, #12
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002180:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f002 f8b9 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800218a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	a903      	add	r1, sp, #12
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_FDCAN_MspInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002194:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800219a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f002 f8ae 	bl	80042fc <HAL_GPIO_Init>
}
 80021a0:	b008      	add	sp, #32
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	40006400 	.word	0x40006400
 80021a8:	48000400 	.word	0x48000400

080021ac <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80021ac:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 80021ae:	6802      	ldr	r2, [r0, #0]
 80021b0:	492b      	ldr	r1, [pc, #172]	; (8002260 <HAL_OPAMP_MspInit+0xb4>)
{
 80021b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 80021b6:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80021bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80021c0:	9307      	str	r3, [sp, #28]
  if(hopamp->Instance==OPAMP1)
 80021c2:	d007      	beq.n	80021d4 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_OPAMP_MspInit+0xb8>)
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d032      	beq.n	8002230 <HAL_OPAMP_MspInit+0x84>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_OPAMP_MspInit+0xbc>)
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d019      	beq.n	8002204 <HAL_OPAMP_MspInit+0x58>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80021d0:	b008      	add	sp, #32
 80021d2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 80021ee:	220e      	movs	r2, #14
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f002 f87e 	bl	80042fc <HAL_GPIO_Init>
}
 8002200:	b008      	add	sp, #32
 8002202:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002208:	33f8      	adds	r3, #248	; 0xf8
 800220a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	4817      	ldr	r0, [pc, #92]	; (800226c <HAL_OPAMP_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	f042 0202 	orr.w	r2, r2, #2
 8002212:	64da      	str	r2, [r3, #76]	; 0x4c
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 800221c:	2207      	movs	r2, #7
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002224:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f002 f868 	bl	80042fc <HAL_GPIO_Init>
}
 800222c:	b008      	add	sp, #32
 800222e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8002234:	33fc      	adds	r3, #252	; 0xfc
 8002236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	64da      	str	r2, [r3, #76]	; 0x4c
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8002246:	22e0      	movs	r2, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002248:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	a903      	add	r1, sp, #12
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002250:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002252:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f002 f851 	bl	80042fc <HAL_GPIO_Init>
}
 800225a:	b008      	add	sp, #32
 800225c:	bd10      	pop	{r4, pc}
 800225e:	bf00      	nop
 8002260:	40010300 	.word	0x40010300
 8002264:	40010304 	.word	0x40010304
 8002268:	40010308 	.word	0x40010308
 800226c:	48000400 	.word	0x48000400

08002270 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002270:	6802      	ldr	r2, [r0, #0]
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_TIM_Base_MspInit+0x28>)
 8002274:	429a      	cmp	r2, r3
 8002276:	d000      	beq.n	800227a <HAL_TIM_Base_MspInit+0xa>
 8002278:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 800227e:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002280:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002286:	661a      	str	r2, [r3, #96]	; 0x60
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002292:	b002      	add	sp, #8
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40012c00 	.word	0x40012c00

0800229c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800229c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 800229e:	6801      	ldr	r1, [r0, #0]
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_TIM_Encoder_MspInit+0x60>)
{
 80022a2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80022a6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80022ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80022b0:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM4)
 80022b2:	d001      	beq.n	80022b8 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022b4:	b008      	add	sp, #32
 80022b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	480f      	ldr	r0, [pc, #60]	; (8002300 <HAL_TIM_Encoder_MspInit+0x64>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022c4:	f042 0204 	orr.w	r2, r2, #4
 80022c8:	659a      	str	r2, [r3, #88]	; 0x58
 80022ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022cc:	f002 0204 	and.w	r2, r2, #4
 80022d0:	9201      	str	r2, [sp, #4]
 80022d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022d6:	f042 0202 	orr.w	r2, r2, #2
 80022da:	64da      	str	r2, [r3, #76]	; 0x4c
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 80022e4:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f002 f803 	bl	80042fc <HAL_GPIO_Init>
}
 80022f6:	b008      	add	sp, #32
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	bf00      	nop
 80022fc:	40000800 	.word	0x40000800
 8002300:	48000400 	.word	0x48000400

08002304 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002304:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002306:	6801      	ldr	r1, [r0, #0]
 8002308:	4a28      	ldr	r2, [pc, #160]	; (80023ac <HAL_TIM_MspPostInit+0xa8>)
{
 800230a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800230e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002314:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002318:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 800231a:	d001      	beq.n	8002320 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800231c:	b009      	add	sp, #36	; 0x24
 800231e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002320:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002324:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800232c:	4820      	ldr	r0, [pc, #128]	; (80023b0 <HAL_TIM_MspPostInit+0xac>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	f042 0204 	orr.w	r2, r2, #4
 8002332:	64da      	str	r2, [r3, #76]	; 0x4c
 8002334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002336:	f002 0204 	and.w	r2, r2, #4
 800233a:	9200      	str	r2, [sp, #0]
 800233c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002340:	f042 0202 	orr.w	r2, r2, #2
 8002344:	64da      	str	r2, [r3, #76]	; 0x4c
 8002346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002348:	f002 0202 	and.w	r2, r2, #2
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	64da      	str	r2, [r3, #76]	; 0x4c
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002360:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8002362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002366:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800236a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002370:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002374:	f001 ffc2 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800237c:	a903      	add	r1, sp, #12
 800237e:	480d      	ldr	r0, [pc, #52]	; (80023b4 <HAL_TIM_MspPostInit+0xb0>)
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002380:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002382:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002386:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800238a:	f001 ffb7 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 800238e:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002392:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	a903      	add	r1, sp, #12
 8002396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800239a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80023a0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f001 ffaa 	bl	80042fc <HAL_GPIO_Init>
}
 80023a8:	b009      	add	sp, #36	; 0x24
 80023aa:	bd30      	pop	{r4, r5, pc}
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	48000800 	.word	0x48000800
 80023b4:	48000400 	.word	0x48000400

080023b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80023ba:	6801      	ldr	r1, [r0, #0]
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <HAL_UART_MspInit+0x60>)
{
 80023be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80023c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80023c8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80023cc:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023d0:	b009      	add	sp, #36	; 0x24
 80023d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	480f      	ldr	r0, [pc, #60]	; (800241c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80023de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023e4:	659a      	str	r2, [r3, #88]	; 0x58
 80023e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023e8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80023ec:	9201      	str	r2, [sp, #4]
 80023ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f2:	f042 0202 	orr.w	r2, r2, #2
 80023f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002402:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002406:	2418      	movs	r4, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800240a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f001 ff74 	bl	80042fc <HAL_GPIO_Init>
}
 8002414:	b009      	add	sp, #36	; 0x24
 8002416:	bd30      	pop	{r4, r5, pc}
 8002418:	40004400 	.word	0x40004400
 800241c:	48000400 	.word	0x48000400

08002420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002422:	4601      	mov	r1, r0
{
 8002424:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002426:	2200      	movs	r2, #0
 8002428:	2036      	movs	r0, #54	; 0x36
 800242a:	f001 fc69 	bl	8003d00 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800242e:	2036      	movs	r0, #54	; 0x36
 8002430:	f001 fc9c 	bl	8003d6c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_InitTick+0x6c>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002436:	4c16      	ldr	r4, [pc, #88]	; (8002490 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800243a:	f042 0210 	orr.w	r2, r2, #16
 800243e:	659a      	str	r2, [r3, #88]	; 0x58
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 0310 	and.w	r3, r3, #16
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002446:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002448:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800244a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800244c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800244e:	f002 fd5f 	bl	8004f10 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002452:	f002 fd39 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_InitTick+0x74>)
  htim6.Instance = TIM6;
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_InitTick+0x78>)
 800245a:	6022      	str	r2, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800245c:	fba3 2300 	umull	r2, r3, r3, r0
 8002460:	0c9b      	lsrs	r3, r3, #18
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8002462:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002464:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002466:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800246a:	4620      	mov	r0, r4
  htim6.Init.Prescaler = uwPrescalerValue;
 800246c:	6063      	str	r3, [r4, #4]
  htim6.Init.ClockDivision = 0;
 800246e:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002474:	f002 fec2 	bl	80051fc <HAL_TIM_Base_Init>
 8002478:	b110      	cbz	r0, 8002480 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800247a:	2001      	movs	r0, #1
}
 800247c:	b008      	add	sp, #32
 800247e:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8002480:	4620      	mov	r0, r4
 8002482:	f002 ff43 	bl	800530c <HAL_TIM_Base_Start_IT>
}
 8002486:	b008      	add	sp, #32
 8002488:	bd10      	pop	{r4, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	20001840 	.word	0x20001840
 8002494:	431bde83 	.word	0x431bde83
 8002498:	40001000 	.word	0x40001000

0800249c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800249c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <TIM6_DAC_IRQHandler+0x14>)
 80024a0:	f003 fb04 	bl	8005aac <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 80024aa:	f001 bd17 	b.w	8003edc <HAL_DAC_IRQHandler>
 80024ae:	bf00      	nop
 80024b0:	20001840 	.word	0x20001840
 80024b4:	200013f0 	.word	0x200013f0

080024b8 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 80024b8:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80024ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	601a      	str	r2, [r3, #0]
  
  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task 
  UI_DACUpdate(TSK_HighFrequencyTask());
 80024c2:	f7fe fe69 	bl	8001198 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */  
 
 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 80024c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 80024ca:	f000 b931 	b.w	8002730 <UI_DACUpdate>
 80024ce:	bf00      	nop

080024d0 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */ 
 
    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80024d2:	4804      	ldr	r0, [pc, #16]	; (80024e4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80024d4:	f06f 0201 	mvn.w	r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	f006 be59 	b.w	8009190 <R3_2_TIMx_UP_IRQHandler>
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	2000038c 	.word	0x2000038c

080024e8 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */ 
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80024e8:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	0611      	lsls	r1, r2, #24
 80024f0:	d40d      	bmi.n	800250e <TIM1_BRK_TIM15_IRQHandler+0x26>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	05d2      	lsls	r2, r2, #23
 80024f8:	d505      	bpl.n	8002506 <TIM1_BRK_TIM15_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80024fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024fe:	611a      	str	r2, [r3, #16]
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);  
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1); 
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002502:	f006 fe8f 	bl	8009224 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();
  
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */ 
}
 8002506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800250a:	f7fe be13 	b.w	8001134 <MC_Scheduler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800250e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002512:	611a      	str	r2, [r3, #16]
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002516:	f006 fea5 	bl	8009264 <R3_2_BRK_IRQHandler>
 800251a:	e7ea      	b.n	80024f2 <TIM1_BRK_TIM15_IRQHandler+0xa>
 800251c:	40012c00 	.word	0x40012c00
 8002520:	2000038c 	.word	0x2000038c

08002524 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */ 
  
 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002524:	4806      	ldr	r0, [pc, #24]	; (8002540 <TIM4_IRQHandler+0x1c>)
 8002526:	69c3      	ldr	r3, [r0, #28]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	07d1      	lsls	r1, r2, #31
 800252c:	d502      	bpl.n	8002534 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	07d2      	lsls	r2, r2, #31
 8002532:	d400      	bmi.n	8002536 <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */ 
}
 8002534:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002536:	f06f 0201 	mvn.w	r2, #1
 800253a:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 800253c:	f005 bc4a 	b.w	8007dd4 <ENC_IRQHandler>
 8002540:	200002e0 	.word	0x200002e0

08002544 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002544:	b510      	push	{r4, lr}
 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002546:	4c19      	ldr	r4, [pc, #100]	; (80025ac <USART2_IRQHandler+0x68>)
 8002548:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	0691      	lsls	r1, r2, #26
 8002550:	d417      	bmi.n	8002582 <USART2_IRQHandler+0x3e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	0612      	lsls	r2, r2, #24
 8002556:	d40e      	bmi.n	8002576 <USART2_IRQHandler+0x32>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	071b      	lsls	r3, r3, #28
 800255c:	d400      	bmi.n	8002560 <USART2_IRQHandler+0x1c>
    /* USER CODE END USART_ORE   */   
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */
}
 800255e:	bd10      	pop	{r4, pc}
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002560:	4812      	ldr	r0, [pc, #72]	; (80025ac <USART2_IRQHandler+0x68>)
 8002562:	f007 fb43 	bl	8009bec <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002566:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800256a:	2208      	movs	r2, #8
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002572:	f000 b8ed 	b.w	8002750 <UI_SerialCommunicationTimeOutStop>
    UFCP_TX_IRQ_Handler( &pUSART );
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <USART2_IRQHandler+0x68>)
 8002578:	f007 fa02 	bl	8009980 <UFCP_TX_IRQ_Handler>
 800257c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002580:	e7ea      	b.n	8002558 <USART2_IRQHandler+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002582:	6a59      	ldr	r1, [r3, #36]	; 0x24
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8002584:	4620      	mov	r0, r4
 8002586:	b2c9      	uxtb	r1, r1
 8002588:	f007 face 	bl	8009b28 <UFCP_RX_IRQ_Handler>
 800258c:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800258e:	2b01      	cmp	r3, #1
 8002590:	d007      	beq.n	80025a2 <USART2_IRQHandler+0x5e>
    if (retVal == 2)
 8002592:	2b02      	cmp	r3, #2
 8002594:	d002      	beq.n	800259c <USART2_IRQHandler+0x58>
 8002596:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800259a:	e7da      	b.n	8002552 <USART2_IRQHandler+0xe>
      UI_SerialCommunicationTimeOutStop();
 800259c:	f000 f8d8 	bl	8002750 <UI_SerialCommunicationTimeOutStop>
 80025a0:	e7f9      	b.n	8002596 <USART2_IRQHandler+0x52>
      UI_SerialCommunicationTimeOutStart();
 80025a2:	f000 f8db 	bl	800275c <UI_SerialCommunicationTimeOutStart>
 80025a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80025aa:	e7d2      	b.n	8002552 <USART2_IRQHandler+0xe>
 80025ac:	20000000 	.word	0x20000000

080025b0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80025b0:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80025b2:	f7fe fecb 	bl	800134c <TSK_HardwareFaultTask>
 80025b6:	4c1a      	ldr	r4, [pc, #104]	; (8002620 <HardFault_Handler+0x70>)
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80025b8:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80025ba:	4625      	mov	r5, r4
 80025bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	0712      	lsls	r2, r2, #28
 80025c4:	d41d      	bmi.n	8002602 <HardFault_Handler+0x52>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	0610      	lsls	r0, r2, #24
 80025ca:	d40f      	bmi.n	80025ec <HardFault_Handler+0x3c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	0692      	lsls	r2, r2, #26
 80025d0:	d5f6      	bpl.n	80025c0 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80025d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }  
      
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80025d4:	4628      	mov	r0, r5
 80025d6:	b2c9      	uxtb	r1, r1
 80025d8:	f007 faa6 	bl	8009b28 <UFCP_RX_IRQ_Handler>
 80025dc:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d01a      	beq.n	8002618 <HardFault_Handler+0x68>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d1ea      	bne.n	80025bc <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80025e6:	f000 f8b3 	bl	8002750 <UI_SerialCommunicationTimeOutStop>
 80025ea:	e7e7      	b.n	80025bc <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 80025ec:	4628      	mov	r0, r5
 80025ee:	f007 f9c7 	bl	8009980 <UFCP_TX_IRQ_Handler>
 80025f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	0691      	lsls	r1, r2, #26
 80025fa:	d4ea      	bmi.n	80025d2 <HardFault_Handler+0x22>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	0712      	lsls	r2, r2, #28
 8002600:	d5e1      	bpl.n	80025c6 <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002602:	4628      	mov	r0, r5
 8002604:	f007 faf2 	bl	8009bec <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002608:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800260c:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 800260e:	f000 f89f 	bl	8002750 <UI_SerialCommunicationTimeOutStop>
 8002612:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002616:	e7d6      	b.n	80025c6 <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 8002618:	f000 f8a0 	bl	800275c <UI_SerialCommunicationTimeOutStart>
 800261c:	e7ce      	b.n	80025bc <HardFault_Handler+0xc>
 800261e:	bf00      	nop
 8002620:	20000000 	.word	0x20000000

08002624 <UI_TaskInit>:
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;
 

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002628:	b087      	sub	sp, #28
      pDAC = &DAC_UI_Params;      
      pDAC->_Super = UI_Params;
 800262a:	4d2b      	ldr	r5, [pc, #172]	; (80026d8 <UI_TaskInit+0xb4>)
{
 800262c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800262e:	9405      	str	r4, [sp, #20]
      pDAC->_Super = UI_Params;
 8002630:	462c      	mov	r4, r5
{
 8002632:	4682      	mov	sl, r0
 8002634:	460f      	mov	r7, r1
 8002636:	4690      	mov	r8, r2
 8002638:	4699      	mov	r9, r3
      pDAC->_Super = UI_Params;
 800263a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      pDAC = &DAC_UI_Params;      
 800263c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 80026ec <UI_TaskInit+0xc8>
 8002640:	4e26      	ldr	r6, [pc, #152]	; (80026dc <UI_TaskInit+0xb8>)
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 8002642:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80026f0 <UI_TaskInit+0xcc>
      pDAC = &DAC_UI_Params;      
 8002646:	f8c6 e000 	str.w	lr, [r6]
      pDAC->_Super = UI_Params;
 800264a:	46f4      	mov	ip, lr
 800264c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002652:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002656:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 800265a:	f8cd a000 	str.w	sl, [sp]
      pDAC->_Super = UI_Params;
 800265e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002662:	4670      	mov	r0, lr
 8002664:	464b      	mov	r3, r9
 8002666:	4642      	mov	r2, r8
 8002668:	4639      	mov	r1, r7
 800266a:	f000 f87d 	bl	8002768 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 800266e:	6830      	ldr	r0, [r6, #0]
 8002670:	f000 f9f0 	bl	8002a54 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_MEAS_ROT_SPEED );
 8002674:	6830      	ldr	r0, [r6, #0]
 8002676:	2230      	movs	r2, #48	; 0x30
 8002678:	2100      	movs	r1, #0
 800267a:	f000 f9f3 	bl	8002a64 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 800267e:	6830      	ldr	r0, [r6, #0]
 8002680:	2224      	movs	r2, #36	; 0x24
 8002682:	2101      	movs	r1, #1
 8002684:	f000 f9ee 	bl	8002a64 <UI_SetDAC>
    pMCP->_Super = UI_Params;
 8002688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    pMCP = &MCP_UI_Params;
 800268a:	f8df c068 	ldr.w	ip, [pc, #104]	; 80026f4 <UI_TaskInit+0xd0>
 800268e:	f8c6 c004 	str.w	ip, [r6, #4]
    pMCP->_Super = UI_Params;
 8002692:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002698:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800269c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 80026a4:	4658      	mov	r0, fp
 80026a6:	f007 f969 	bl	800997c <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 80026aa:	e9d6 2000 	ldrd	r2, r0, [r6]
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <UI_TaskInit+0xbc>)
 80026b0:	9c05      	ldr	r4, [sp, #20]
 80026b2:	9402      	str	r4, [sp, #8]
 80026b4:	e9cd 3200 	strd	r3, r2, [sp]
 80026b8:	4659      	mov	r1, fp
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <UI_TaskInit+0xc0>)
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <UI_TaskInit+0xc4>)
 80026be:	f7ff fa3b 	bl	8001b38 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80026c2:	6870      	ldr	r0, [r6, #4]
 80026c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80026c8:	464b      	mov	r3, r9
 80026ca:	4642      	mov	r2, r8
 80026cc:	4639      	mov	r1, r7
 

}
 80026ce:	b007      	add	sp, #28
 80026d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80026d4:	f000 b848 	b.w	8002768 <UI_Init>
 80026d8:	20000244 	.word	0x20000244
 80026dc:	2000061c 	.word	0x2000061c
 80026e0:	08009c09 	.word	0x08009c09
 80026e4:	080099e1 	.word	0x080099e1
 80026e8:	08009a05 	.word	0x08009a05
 80026ec:	20000208 	.word	0x20000208
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20001880 	.word	0x20001880

080026f8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <UI_Scheduler+0x30>)
 80026fa:	891a      	ldrh	r2, [r3, #8]
 80026fc:	b292      	uxth	r2, r2
 80026fe:	b11a      	cbz	r2, 8002708 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002700:	891a      	ldrh	r2, [r3, #8]
 8002702:	3a01      	subs	r2, #1
 8002704:	b292      	uxth	r2, r2
 8002706:	811a      	strh	r2, [r3, #8]
  }

  if(bCOMTimeoutCounter > 1u)
 8002708:	895a      	ldrh	r2, [r3, #10]
 800270a:	2a01      	cmp	r2, #1
 800270c:	d903      	bls.n	8002716 <UI_Scheduler+0x1e>
  {
    bCOMTimeoutCounter--;
 800270e:	895a      	ldrh	r2, [r3, #10]
 8002710:	3a01      	subs	r2, #1
 8002712:	b292      	uxth	r2, r2
 8002714:	815a      	strh	r2, [r3, #10]
  }

  if(bCOMATRTimeCounter > 1u)
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <UI_Scheduler+0x34>)
 8002718:	8813      	ldrh	r3, [r2, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d903      	bls.n	8002726 <UI_Scheduler+0x2e>
  {
    bCOMATRTimeCounter--;
 800271e:	8813      	ldrh	r3, [r2, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
  }
}
 8002726:	4770      	bx	lr
 8002728:	2000061c 	.word	0x2000061c
 800272c:	200005d8 	.word	0x200005d8

08002730 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8002730:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002732:	4c06      	ldr	r4, [pc, #24]	; (800274c <UI_DACUpdate+0x1c>)
{
 8002734:	4605      	mov	r5, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002736:	6820      	ldr	r0, [r4, #0]
 8002738:	f000 f82a 	bl	8002790 <UI_GetSelectedMC>
 800273c:	42a8      	cmp	r0, r5
 800273e:	d000      	beq.n	8002742 <UI_DACUpdate+0x12>
  {  
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8002740:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002742:	6820      	ldr	r0, [r4, #0]
}
 8002744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002748:	f000 b988 	b.w	8002a5c <UI_DACExec>
 800274c:	2000061c 	.word	0x2000061c

08002750 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002750:	4b01      	ldr	r3, [pc, #4]	; (8002758 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002752:	2200      	movs	r2, #0
 8002754:	815a      	strh	r2, [r3, #10]
}
 8002756:	4770      	bx	lr
 8002758:	2000061c 	.word	0x2000061c

0800275c <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 800275c:	4b01      	ldr	r3, [pc, #4]	; (8002764 <UI_SerialCommunicationTimeOutStart+0x8>)
 800275e:	224f      	movs	r2, #79	; 0x4f
 8002760:	815a      	strh	r2, [r3, #10]
}
 8002762:	4770      	bx	lr
 8002764:	2000061c 	.word	0x2000061c

08002768 <UI_Init>:
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  *  @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
 
{
 8002768:	b430      	push	{r4, r5}
 800276a:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 800276c:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 800276e:	2500      	movs	r5, #0
 8002770:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  pHandle->bDriveNum = bMCNum;
 8002774:	7701      	strb	r1, [r0, #28]
  pHandle->pMCT = pMCT;
 8002776:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 800277a:	bc30      	pop	{r4, r5}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <UI_SelectMC>:
  *  @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002780:	7f03      	ldrb	r3, [r0, #28]
 8002782:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002784:	bf86      	itte	hi
 8002786:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 800278a:	2001      	movhi	r0, #1
    retVal = false;
 800278c:	2000      	movls	r0, #0
  }
  return retVal;
}
 800278e:	4770      	bx	lr

08002790 <UI_GetSelectedMC>:
  *  @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002790:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002798:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800279a:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800279e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80027a2:	b084      	sub	sp, #16
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80027a4:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80027a8:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 

  bool retVal = true;
  switch (bRegID)
 80027ac:	295b      	cmp	r1, #91	; 0x5b
 80027ae:	f200 80a0 	bhi.w	80028f2 <UI_SetReg+0x15a>
 80027b2:	e8df f001 	tbb	[pc, r1]
 80027b6:	9e3b      	.short	0x9e3b
 80027b8:	469e3f9e 	.word	0x469e3f9e
 80027bc:	6658524c 	.word	0x6658524c
 80027c0:	8678726c 	.word	0x8678726c
 80027c4:	9e9e928c 	.word	0x9e9e928c
 80027c8:	9e9e9e9e 	.word	0x9e9e9e9e
 80027cc:	9e9e9e9e 	.word	0x9e9e9e9e
 80027d0:	9e9e9e9e 	.word	0x9e9e9e9e
 80027d4:	9e9e9e9e 	.word	0x9e9e9e9e
 80027d8:	9e9e9e9e 	.word	0x9e9e9e9e
 80027dc:	9e9e9e9e 	.word	0x9e9e9e9e
 80027e0:	9e9e9e9e 	.word	0x9e9e9e9e
 80027e4:	9e9e9e9e 	.word	0x9e9e9e9e
 80027e8:	9e9e9e9e 	.word	0x9e9e9e9e
 80027ec:	9e9e9e9e 	.word	0x9e9e9e9e
 80027f0:	9e9e9e9e 	.word	0x9e9e9e9e
 80027f4:	989e9e9e 	.word	0x989e9e9e
 80027f8:	9e9e9e9e 	.word	0x9e9e9e9e
 80027fc:	9e9e9e9e 	.word	0x9e9e9e9e
 8002800:	9e9e9e9e 	.word	0x9e9e9e9e
 8002804:	9e9e9e9e 	.word	0x9e9e9e9e
 8002808:	9e9e9e9e 	.word	0x9e9e9e9e
 800280c:	9e9e9e9e 	.word	0x9e9e9e9e
 8002810:	2e9e      	.short	0x2e9e
      MCI_SetIdref(pMCI,(int16_t)wValue);
    }
    break;
  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002812:	4943      	ldr	r1, [pc, #268]	; (8002920 <UI_SetReg+0x188>)
 8002814:	fb81 3102 	smull	r3, r1, r1, r2
 8002818:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800281c:	4630      	mov	r0, r6
 800281e:	b209      	sxth	r1, r1
 8002820:	2200      	movs	r2, #0
 8002822:	f005 fb1b 	bl	8007e5c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002826:	2001      	movs	r0, #1
    retVal = false;
    break;
  }

  return retVal;
}
 8002828:	b004      	add	sp, #16
 800282a:	bd70      	pop	{r4, r5, r6, pc}
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800282c:	b2d1      	uxtb	r1, r2
 800282e:	f7ff ffa7 	bl	8002780 <UI_SelectMC>
    break;
 8002832:	e7f9      	b.n	8002828 <UI_SetReg+0x90>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002834:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
 8002838:	d05d      	beq.n	80028f6 <UI_SetReg+0x15e>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800283a:	2c01      	cmp	r4, #1
 800283c:	d065      	beq.n	800290a <UI_SetReg+0x172>
  bool retVal = true;
 800283e:	2001      	movs	r0, #1
 8002840:	e7f2      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002842:	6828      	ldr	r0, [r5, #0]
 8002844:	b211      	sxth	r1, r2
 8002846:	f005 fd35 	bl	80082b4 <PID_SetKP>
  bool retVal = true;
 800284a:	2001      	movs	r0, #1
    break;
 800284c:	e7ec      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 800284e:	6828      	ldr	r0, [r5, #0]
 8002850:	b211      	sxth	r1, r2
 8002852:	f005 fd31 	bl	80082b8 <PID_SetKI>
  bool retVal = true;
 8002856:	2001      	movs	r0, #1
    break;
 8002858:	e7e6      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 800285a:	6828      	ldr	r0, [r5, #0]
 800285c:	b211      	sxth	r1, r2
 800285e:	f005 fd3b 	bl	80082d8 <PID_SetKD>
  bool retVal = true;
 8002862:	2001      	movs	r0, #1
    break;
 8002864:	e7e0      	b.n	8002828 <UI_SetReg+0x90>
      currComp = MCI_GetIqdref(pMCI);
 8002866:	4630      	mov	r0, r6
 8002868:	9201      	str	r2, [sp, #4]
 800286a:	f005 fb9f 	bl	8007fac <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 800286e:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 8002870:	9003      	str	r0, [sp, #12]
      currComp.q = (int16_t)wValue;
 8002872:	f8ad 200c 	strh.w	r2, [sp, #12]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002876:	4630      	mov	r0, r6
 8002878:	9903      	ldr	r1, [sp, #12]
 800287a:	f005 fb03 	bl	8007e84 <MCI_SetCurrentReferences>
  bool retVal = true;
 800287e:	2001      	movs	r0, #1
    break;
 8002880:	e7d2      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002882:	6868      	ldr	r0, [r5, #4]
 8002884:	b211      	sxth	r1, r2
 8002886:	f005 fd15 	bl	80082b4 <PID_SetKP>
  bool retVal = true;
 800288a:	2001      	movs	r0, #1
    break;
 800288c:	e7cc      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 800288e:	6868      	ldr	r0, [r5, #4]
 8002890:	b211      	sxth	r1, r2
 8002892:	f005 fd11 	bl	80082b8 <PID_SetKI>
  bool retVal = true;
 8002896:	2001      	movs	r0, #1
    break;
 8002898:	e7c6      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 800289a:	6868      	ldr	r0, [r5, #4]
 800289c:	b211      	sxth	r1, r2
 800289e:	f005 fd1b 	bl	80082d8 <PID_SetKD>
  bool retVal = true;
 80028a2:	2001      	movs	r0, #1
    break;
 80028a4:	e7c0      	b.n	8002828 <UI_SetReg+0x90>
      currComp = MCI_GetIqdref(pMCI);
 80028a6:	4630      	mov	r0, r6
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	f005 fb7f 	bl	8007fac <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 80028ae:	9a01      	ldr	r2, [sp, #4]
      currComp = MCI_GetIqdref(pMCI);
 80028b0:	9003      	str	r0, [sp, #12]
      currComp.d = (int16_t)wValue;
 80028b2:	f8ad 200e 	strh.w	r2, [sp, #14]
      MCI_SetCurrentReferences(pMCI,currComp);
 80028b6:	4630      	mov	r0, r6
 80028b8:	9903      	ldr	r1, [sp, #12]
 80028ba:	f005 fae3 	bl	8007e84 <MCI_SetCurrentReferences>
  bool retVal = true;
 80028be:	2001      	movs	r0, #1
    break;
 80028c0:	e7b2      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80028c2:	68a8      	ldr	r0, [r5, #8]
 80028c4:	b211      	sxth	r1, r2
 80028c6:	f005 fcf5 	bl	80082b4 <PID_SetKP>
  bool retVal = true;
 80028ca:	2001      	movs	r0, #1
    break;
 80028cc:	e7ac      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80028ce:	68a8      	ldr	r0, [r5, #8]
 80028d0:	b211      	sxth	r1, r2
 80028d2:	f005 fcf1 	bl	80082b8 <PID_SetKI>
  bool retVal = true;
 80028d6:	2001      	movs	r0, #1
    break;
 80028d8:	e7a6      	b.n	8002828 <UI_SetReg+0x90>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80028da:	68a8      	ldr	r0, [r5, #8]
 80028dc:	b211      	sxth	r1, r2
 80028de:	f005 fcfb 	bl	80082d8 <PID_SetKD>
  bool retVal = true;
 80028e2:	2001      	movs	r0, #1
    break;
 80028e4:	e7a0      	b.n	8002828 <UI_SetReg+0x90>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80028e6:	4630      	mov	r0, r6
 80028e8:	b211      	sxth	r1, r2
 80028ea:	f005 fb7f 	bl	8007fec <MCI_SetIdref>
  bool retVal = true;
 80028ee:	2001      	movs	r0, #1
    break;
 80028f0:	e79a      	b.n	8002828 <UI_SetReg+0x90>
    retVal = false;
 80028f2:	2000      	movs	r0, #0
 80028f4:	e798      	b.n	8002828 <UI_SetReg+0x90>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80028f6:	4630      	mov	r0, r6
 80028f8:	f005 fb74 	bl	8007fe4 <MCI_GetTeref>
 80028fc:	4622      	mov	r2, r4
 80028fe:	4601      	mov	r1, r0
 8002900:	4630      	mov	r0, r6
 8002902:	f005 fab3 	bl	8007e6c <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002906:	2001      	movs	r0, #1
 8002908:	e78e      	b.n	8002828 <UI_SetReg+0x90>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800290a:	4630      	mov	r0, r6
 800290c:	f005 fb32 	bl	8007f74 <MCI_GetMecSpeedRefUnit>
 8002910:	2200      	movs	r2, #0
 8002912:	4601      	mov	r1, r0
 8002914:	4630      	mov	r0, r6
 8002916:	f005 faa1 	bl	8007e5c <MCI_ExecSpeedRamp>
  bool retVal = true;
 800291a:	4620      	mov	r0, r4
 800291c:	e784      	b.n	8002828 <UI_SetReg+0x90>
 800291e:	bf00      	nop
 8002920:	2aaaaaab 	.word	0x2aaaaaab

08002924 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002924:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002926:	6a03      	ldr	r3, [r0, #32]
 8002928:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 

  switch (bCmdID)
 800292c:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800292e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002932:	290d      	cmp	r1, #13
 8002934:	d82c      	bhi.n	8002990 <UI_ExecCmd+0x6c>
 8002936:	e8df f001 	tbb	[pc, r1]
 800293a:	1217      	.short	0x1217
 800293c:	0e0c0c07 	.word	0x0e0c0c07
 8002940:	2b21261c 	.word	0x2b21261c
 8002944:	122b2b2b 	.word	0x122b2b2b
 
    }
    break;
  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8002948:	4620      	mov	r0, r4
 800294a:	f005 faf9 	bl	8007f40 <MCI_GetSTMState>
 800294e:	2806      	cmp	r0, #6
 8002950:	d020      	beq.n	8002994 <UI_ExecCmd+0x70>
  bool retVal = true;
 8002952:	2001      	movs	r0, #1
  default:
    retVal = false;
    break;
  }
  return retVal;
}
 8002954:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002956:	4620      	mov	r0, r4
 8002958:	f005 faf2 	bl	8007f40 <MCI_GetSTMState>
 800295c:	b120      	cbz	r0, 8002968 <UI_ExecCmd+0x44>
        MCI_StopMotor(pMCI);
 800295e:	4620      	mov	r0, r4
 8002960:	f005 faa8 	bl	8007eb4 <MCI_StopMotor>
  bool retVal = true;
 8002964:	2001      	movs	r0, #1
}
 8002966:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002968:	4620      	mov	r0, r4
 800296a:	f005 fa99 	bl	8007ea0 <MCI_StartMotor>
  bool retVal = true;
 800296e:	2001      	movs	r0, #1
}
 8002970:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002972:	4620      	mov	r0, r4
 8002974:	f005 faa2 	bl	8007ebc <MCI_FaultAcknowledged>
  bool retVal = true;
 8002978:	2001      	movs	r0, #1
}
 800297a:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 800297c:	4620      	mov	r0, r4
 800297e:	f005 fb39 	bl	8007ff4 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002982:	2001      	movs	r0, #1
}
 8002984:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002986:	4620      	mov	r0, r4
 8002988:	f005 fa9c 	bl	8007ec4 <MCI_EncoderAlign>
  bool retVal = true;
 800298c:	2001      	movs	r0, #1
}
 800298e:	bd10      	pop	{r4, pc}
    retVal = false;
 8002990:	2000      	movs	r0, #0
}
 8002992:	bd10      	pop	{r4, pc}
        MCI_StopSpeedRamp(pMCI);
 8002994:	4620      	mov	r0, r4
 8002996:	f005 fae1 	bl	8007f5c <MCI_StopSpeedRamp>
  bool retVal = true;
 800299a:	2001      	movs	r0, #1
}
 800299c:	bd10      	pop	{r4, pc}
 800299e:	bf00      	nop

080029a0 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds. 
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 80029a0:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029a4:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80029a8:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80029aa:	fb83 c301 	smull	ip, r3, r3, r1
 80029ae:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80029b2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80029b6:	b209      	sxth	r1, r1
 80029b8:	f005 fa50 	bl	8007e5c <MCI_ExecSpeedRamp>
  return true;
}
 80029bc:	2001      	movs	r0, #1
 80029be:	bd10      	pop	{r4, pc}
 80029c0:	2aaaaaab 	.word	0x2aaaaaab

080029c4 <UI_GetRevupData>:
  *         
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80029c6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80029ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80029cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80029d0:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80029d2:	b194      	cbz	r4, 80029fa <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80029d4:	4620      	mov	r0, r4
 80029d6:	461e      	mov	r6, r3
 80029d8:	4617      	mov	r7, r2
 80029da:	460d      	mov	r5, r1
 80029dc:	f007 f980 	bl	8009ce0 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80029e0:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80029e2:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80029e4:	4620      	mov	r0, r4
 80029e6:	f007 f981 	bl	8009cec <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80029ea:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80029ec:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80029ee:	4620      	mov	r0, r4
 80029f0:	f007 f984 	bl	8009cfc <RUC_GetPhaseFinalTorque>
 80029f4:	9b06      	ldr	r3, [sp, #24]
  bool hRetVal = true;
 80029f6:	2401      	movs	r4, #1
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80029f8:	8018      	strh	r0, [r3, #0]
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80029fa:	4620      	mov	r0, r4
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029fe:	bf00      	nop

08002a00 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	461f      	mov	r7, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a04:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8002a08:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002a0a:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002a12:	695c      	ldr	r4, [r3, #20]
{
 8002a14:	460d      	mov	r5, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002a16:	4620      	mov	r0, r4
 8002a18:	f007 f950 	bl	8009cbc <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002a1c:	463a      	mov	r2, r7
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4620      	mov	r0, r4
 8002a22:	f007 f951 	bl	8009cc8 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002a26:	4620      	mov	r0, r4
 8002a28:	4632      	mov	r2, r6
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f007 f952 	bl	8009cd4 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002a30:	2001      	movs	r0, #1
 8002a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a34 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame. 
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002a34:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a36:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002a38:	f8ad 1004 	strh.w	r1, [sp, #4]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a3c:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
  currComp.d = hIdRef;
 8002a40:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a44:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002a48:	9901      	ldr	r1, [sp, #4]
}
 8002a4a:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002a4c:	f005 ba1a 	b.w	8007e84 <MCI_SetCurrentReferences>

08002a50 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002a50:	2000      	movs	r0, #0
 8002a52:	4770      	bx	lr

08002a54 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002a54:	6943      	ldr	r3, [r0, #20]
 8002a56:	b103      	cbz	r3, 8002a5a <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002a58:	4718      	bx	r3
  }
}
 8002a5a:	4770      	bx	lr

08002a5c <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002a5c:	6983      	ldr	r3, [r0, #24]
 8002a5e:	b103      	cbz	r3, 8002a62 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002a60:	4718      	bx	r3
  }
}
 8002a62:	4770      	bx	lr

08002a64 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002a64:	6843      	ldr	r3, [r0, #4]
 8002a66:	b103      	cbz	r3, 8002a6a <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002a68:	4718      	bx	r3
  }
}
 8002a6a:	4770      	bx	lr

08002a6c <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002a6c:	6883      	ldr	r3, [r0, #8]
 8002a6e:	b103      	cbz	r3, 8002a72 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002a70:	4718      	bx	r3
  }
  return retVal;
}
 8002a72:	2083      	movs	r0, #131	; 0x83
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <UI_GetReg>:
{
 8002a78:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a7a:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a7e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002a82:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a84:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a88:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if ( success != (bool *) 0 ) 
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	f000 8089 	beq.w	8002ba4 <UI_GetReg+0x12c>
    *success = true;
 8002a92:	2401      	movs	r4, #1
 8002a94:	7014      	strb	r4, [r2, #0]
  switch (bRegID)
 8002a96:	2981      	cmp	r1, #129	; 0x81
 8002a98:	f200 81f2 	bhi.w	8002e80 <UI_GetReg+0x408>
 8002a9c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002aa0:	01af01b5 	.word	0x01af01b5
 8002aa4:	014101ab 	.word	0x014101ab
 8002aa8:	0136013a 	.word	0x0136013a
 8002aac:	012e0132 	.word	0x012e0132
 8002ab0:	011e0102 	.word	0x011e0102
 8002ab4:	01e301e7 	.word	0x01e301e7
 8002ab8:	012200fd 	.word	0x012200fd
 8002abc:	0126012a 	.word	0x0126012a
 8002ac0:	01f001f0 	.word	0x01f001f0
 8002ac4:	01f001f0 	.word	0x01f001f0
 8002ac8:	01f001f0 	.word	0x01f001f0
 8002acc:	01f001f0 	.word	0x01f001f0
 8002ad0:	01d501f0 	.word	0x01d501f0
 8002ad4:	01cd01d1 	.word	0x01cd01d1
 8002ad8:	01c501c9 	.word	0x01c501c9
 8002adc:	017b01be 	.word	0x017b01be
 8002ae0:	01f001eb 	.word	0x01f001eb
 8002ae4:	0145014a 	.word	0x0145014a
 8002ae8:	01d901de 	.word	0x01d901de
 8002aec:	017b0150 	.word	0x017b0150
 8002af0:	010201eb 	.word	0x010201eb
 8002af4:	018500fd 	.word	0x018500fd
 8002af8:	01a101a6 	.word	0x01a101a6
 8002afc:	010a0180 	.word	0x010a0180
 8002b00:	01f00168 	.word	0x01f00168
 8002b04:	01f001f0 	.word	0x01f001f0
 8002b08:	01f001f0 	.word	0x01f001f0
 8002b0c:	01f001f0 	.word	0x01f001f0
 8002b10:	01f001f0 	.word	0x01f001f0
 8002b14:	01f001f0 	.word	0x01f001f0
 8002b18:	016201f0 	.word	0x016201f0
 8002b1c:	0155015c 	.word	0x0155015c
 8002b20:	00fd019a 	.word	0x00fd019a
 8002b24:	01f001f0 	.word	0x01f001f0
 8002b28:	01f001f0 	.word	0x01f001f0
 8002b2c:	01f001f0 	.word	0x01f001f0
 8002b30:	01f001f0 	.word	0x01f001f0
 8002b34:	01f001f0 	.word	0x01f001f0
 8002b38:	01f001f0 	.word	0x01f001f0
 8002b3c:	01f001f0 	.word	0x01f001f0
 8002b40:	01f001f0 	.word	0x01f001f0
 8002b44:	01f001f0 	.word	0x01f001f0
 8002b48:	01f001f0 	.word	0x01f001f0
 8002b4c:	01f001f0 	.word	0x01f001f0
 8002b50:	01f001f0 	.word	0x01f001f0
 8002b54:	018e01f0 	.word	0x018e01f0
 8002b58:	01f001f0 	.word	0x01f001f0
 8002b5c:	01f001f0 	.word	0x01f001f0
 8002b60:	01f001f0 	.word	0x01f001f0
 8002b64:	01f001f0 	.word	0x01f001f0
 8002b68:	01f001f0 	.word	0x01f001f0
 8002b6c:	01f001f0 	.word	0x01f001f0
 8002b70:	01f001f0 	.word	0x01f001f0
 8002b74:	01f001f0 	.word	0x01f001f0
 8002b78:	01f001f0 	.word	0x01f001f0
 8002b7c:	01ba018a 	.word	0x01ba018a
 8002b80:	01f001b8 	.word	0x01f001b8
 8002b84:	01070107 	.word	0x01070107
 8002b88:	01f001f0 	.word	0x01f001f0
 8002b8c:	01f001f0 	.word	0x01f001f0
 8002b90:	01f001f0 	.word	0x01f001f0
 8002b94:	01f001f0 	.word	0x01f001f0
 8002b98:	01f001f0 	.word	0x01f001f0
 8002b9c:	01f001f0 	.word	0x01f001f0
 8002ba0:	00fa01f0 	.word	0x00fa01f0
 8002ba4:	2973      	cmp	r1, #115	; 0x73
 8002ba6:	d875      	bhi.n	8002c94 <UI_GetReg+0x21c>
 8002ba8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002bac:	0129012f 	.word	0x0129012f
 8002bb0:	00bb0125 	.word	0x00bb0125
 8002bb4:	00b000b4 	.word	0x00b000b4
 8002bb8:	00a800ac 	.word	0x00a800ac
 8002bbc:	0098007c 	.word	0x0098007c
 8002bc0:	015d0161 	.word	0x015d0161
 8002bc4:	009c0077 	.word	0x009c0077
 8002bc8:	00a000a4 	.word	0x00a000a4
 8002bcc:	00740074 	.word	0x00740074
 8002bd0:	00740074 	.word	0x00740074
 8002bd4:	00740074 	.word	0x00740074
 8002bd8:	00740074 	.word	0x00740074
 8002bdc:	014f0074 	.word	0x014f0074
 8002be0:	0147014b 	.word	0x0147014b
 8002be4:	013f0143 	.word	0x013f0143
 8002be8:	00f50138 	.word	0x00f50138
 8002bec:	00740165 	.word	0x00740165
 8002bf0:	00bf00c4 	.word	0x00bf00c4
 8002bf4:	01530158 	.word	0x01530158
 8002bf8:	00f500ca 	.word	0x00f500ca
 8002bfc:	007c0165 	.word	0x007c0165
 8002c00:	00ff0077 	.word	0x00ff0077
 8002c04:	011b0120 	.word	0x011b0120
 8002c08:	008400fa 	.word	0x008400fa
 8002c0c:	007400e2 	.word	0x007400e2
 8002c10:	00740074 	.word	0x00740074
 8002c14:	00740074 	.word	0x00740074
 8002c18:	00740074 	.word	0x00740074
 8002c1c:	00740074 	.word	0x00740074
 8002c20:	00740074 	.word	0x00740074
 8002c24:	00dc0074 	.word	0x00dc0074
 8002c28:	00cf00d6 	.word	0x00cf00d6
 8002c2c:	00770114 	.word	0x00770114
 8002c30:	00740074 	.word	0x00740074
 8002c34:	00740074 	.word	0x00740074
 8002c38:	00740074 	.word	0x00740074
 8002c3c:	00740074 	.word	0x00740074
 8002c40:	00740074 	.word	0x00740074
 8002c44:	00740074 	.word	0x00740074
 8002c48:	00740074 	.word	0x00740074
 8002c4c:	00740074 	.word	0x00740074
 8002c50:	00740074 	.word	0x00740074
 8002c54:	00740074 	.word	0x00740074
 8002c58:	00740074 	.word	0x00740074
 8002c5c:	00740074 	.word	0x00740074
 8002c60:	01080074 	.word	0x01080074
 8002c64:	00740074 	.word	0x00740074
 8002c68:	00740074 	.word	0x00740074
 8002c6c:	00740074 	.word	0x00740074
 8002c70:	00740074 	.word	0x00740074
 8002c74:	00740074 	.word	0x00740074
 8002c78:	00740074 	.word	0x00740074
 8002c7c:	00740074 	.word	0x00740074
 8002c80:	00740074 	.word	0x00740074
 8002c84:	00740074 	.word	0x00740074
 8002c88:	01340104 	.word	0x01340104
 8002c8c:	00740132 	.word	0x00740132
 8002c90:	00810081 	.word	0x00810081
      bRetVal = 0;
 8002c94:	2000      	movs	r0, #0
}
 8002c96:	b00c      	add	sp, #48	; 0x30
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
        bRetVal = MCI_GetIqdref(pMCI).d;
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	f005 f986 	bl	8007fac <MCI_GetIqdref>
 8002ca0:	1400      	asrs	r0, r0, #16
      break;
 8002ca2:	e7f8      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetIqdref(pMCI).q;
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f005 f981 	bl	8007fac <MCI_GetIqdref>
 8002caa:	b200      	sxth	r0, r0
      break;
 8002cac:	e7f3      	b.n	8002c96 <UI_GetReg+0x21e>
      bRetVal = CTRBDID;
 8002cae:	f242 701f 	movw	r0, #10015	; 0x271f
 8002cb2:	e7f0      	b.n	8002c96 <UI_GetReg+0x21e>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002cb4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002cba:	0f1a      	lsrs	r2, r3, #28
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002cc2:	2a01      	cmp	r2, #1
 8002cc4:	f103 33ff 	add.w	r3, r3, #4294967295
 8002cc8:	f240 80e2 	bls.w	8002e90 <UI_GetReg+0x418>
        if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d8e1      	bhi.n	8002c94 <UI_GetReg+0x21c>
          pSPD = pMCT->pSpeedSensorAux;
 8002cd0:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d0de      	beq.n	8002c94 <UI_GetReg+0x21c>
          bRetVal = SPD_GetElAngle(pSPD);
 8002cd6:	f006 fc8f 	bl	80095f8 <SPD_GetElAngle>
 8002cda:	e7dc      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002cdc:	6868      	ldr	r0, [r5, #4]
 8002cde:	f005 faed 	bl	80082bc <PID_GetKP>
      break;
 8002ce2:	e7d8      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002ce4:	68a8      	ldr	r0, [r5, #8]
 8002ce6:	f005 fae9 	bl	80082bc <PID_GetKP>
      break;
 8002cea:	e7d4      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002cec:	68a8      	ldr	r0, [r5, #8]
 8002cee:	f005 faf5 	bl	80082dc <PID_GetKD>
      break;
 8002cf2:	e7d0      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002cf4:	68a8      	ldr	r0, [r5, #8]
 8002cf6:	f005 fae5 	bl	80082c4 <PID_GetKI>
      break;
 8002cfa:	e7cc      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002cfc:	6828      	ldr	r0, [r5, #0]
 8002cfe:	f005 faed 	bl	80082dc <PID_GetKD>
      break;
 8002d02:	e7c8      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002d04:	6828      	ldr	r0, [r5, #0]
 8002d06:	f005 fadd 	bl	80082c4 <PID_GetKI>
      break;
 8002d0a:	e7c4      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002d0c:	6828      	ldr	r0, [r5, #0]
 8002d0e:	f005 fad5 	bl	80082bc <PID_GetKP>
      break;
 8002d12:	e7c0      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002d14:	4630      	mov	r0, r6
 8002d16:	f005 f92d 	bl	8007f74 <MCI_GetMecSpeedRefUnit>
 8002d1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d1e:	0040      	lsls	r0, r0, #1
      break;
 8002d20:	e7b9      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002d22:	4630      	mov	r0, r6
 8002d24:	f005 f910 	bl	8007f48 <MCI_GetControlMode>
      break;
 8002d28:	e7b5      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetIab(pMCI).a;
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	f005 f926 	bl	8007f7c <MCI_GetIab>
 8002d30:	b200      	sxth	r0, r0
      break;
 8002d32:	e7b0      	b.n	8002c96 <UI_GetReg+0x21e>
        if (pMCT->pRevupCtrl)
 8002d34:	6968      	ldr	r0, [r5, #20]
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d0ac      	beq.n	8002c94 <UI_GetReg+0x21c>
          bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002d3a:	f006 ffe7 	bl	8009d0c <RUC_GetNumberOfPhases>
 8002d3e:	e7aa      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002d40:	4630      	mov	r0, r6
 8002d42:	f005 f923 	bl	8007f8c <MCI_GetIalphabeta>
 8002d46:	1400      	asrs	r0, r0, #16
      break;
 8002d48:	e7a5      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002d4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002d4c:	f006 fd4c 	bl	80097e8 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002d50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d54:	0040      	lsls	r0, r0, #1
      break;
 8002d56:	e79e      	b.n	8002c96 <UI_GetReg+0x21e>
        if (pHandle->pFctDACGetUserChannelValue)
 8002d58:	6903      	ldr	r3, [r0, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d09a      	beq.n	8002c94 <UI_GetReg+0x21c>
          bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4798      	blx	r3
 8002d62:	e798      	b.n	8002c96 <UI_GetReg+0x21e>
        if (pHandle->pFctDACGetUserChannelValue)
 8002d64:	6903      	ldr	r3, [r0, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d094      	beq.n	8002c94 <UI_GetReg+0x21c>
          bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4798      	blx	r3
 8002d6e:	e792      	b.n	8002c96 <UI_GetReg+0x21e>
        uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d70:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d76:	0f1a      	lsrs	r2, r3, #28
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002d7e:	2a01      	cmp	r2, #1
 8002d80:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d84:	d97f      	bls.n	8002e86 <UI_GetReg+0x40e>
        if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d884      	bhi.n	8002c94 <UI_GetReg+0x21c>
          pSPD = pMCT->pSpeedSensorAux;
 8002d8a:	69e8      	ldr	r0, [r5, #28]
        if (pSPD != MC_NULL)
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d081      	beq.n	8002c94 <UI_GetReg+0x21c>
          bRetVal = SPD_GetS16Speed(pSPD);
 8002d90:	f006 fc6e 	bl	8009670 <SPD_GetS16Speed>
 8002d94:	e77f      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetIqd(pMCI).q;
 8002d96:	4630      	mov	r0, r6
 8002d98:	f005 f900 	bl	8007f9c <MCI_GetIqd>
 8002d9c:	b200      	sxth	r0, r0
      break;
 8002d9e:	e77a      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002da0:	4630      	mov	r0, r6
 8002da2:	f005 f915 	bl	8007fd0 <MCI_GetValphabeta>
 8002da6:	1400      	asrs	r0, r0, #16
      break;
 8002da8:	e775      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetVqd(pMCI).q;
 8002daa:	4630      	mov	r0, r6
 8002dac:	f005 f906 	bl	8007fbc <MCI_GetVqd>
 8002db0:	b200      	sxth	r0, r0
      break;
 8002db2:	e770      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002db4:	6828      	ldr	r0, [r5, #0]
 8002db6:	f005 fa8b 	bl	80082d0 <PID_GetKPDivisor>
      break;
 8002dba:	e76c      	b.n	8002c96 <UI_GetReg+0x21e>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f005 f8c3 	bl	8007f48 <MCI_GetControlMode>
 8002dc2:	2801      	cmp	r0, #1
        bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002dc4:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002dc6:	d068      	beq.n	8002e9a <UI_GetReg+0x422>
        bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002dc8:	f005 f8d4 	bl	8007f74 <MCI_GetMecSpeedRefUnit>
 8002dcc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002dd0:	0040      	lsls	r0, r0, #1
 8002dd2:	e760      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002dd4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002dd6:	f006 fd09 	bl	80097ec <STC_GetMinAppNegativeMecSpeedUnit>
 8002dda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002dde:	0040      	lsls	r0, r0, #1
      break;
 8002de0:	e759      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002de2:	4630      	mov	r0, r6
 8002de4:	f005 f8f4 	bl	8007fd0 <MCI_GetValphabeta>
 8002de8:	b200      	sxth	r0, r0
      break;
 8002dea:	e754      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetVqd(pMCI).d;
 8002dec:	4630      	mov	r0, r6
 8002dee:	f005 f8e5 	bl	8007fbc <MCI_GetVqd>
 8002df2:	1400      	asrs	r0, r0, #16
      break;
 8002df4:	e74f      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002df6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002df8:	f006 fdac 	bl	8009954 <STM_GetState>
      break;
 8002dfc:	e74b      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002dfe:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 8002e00:	b00c      	add	sp, #48	; 0x30
 8002e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002e06:	f006 bdb3 	b.w	8009970 <STM_GetFaultState>
        bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002e0a:	f7ff fcc1 	bl	8002790 <UI_GetSelectedMC>
      break;
 8002e0e:	e742      	b.n	8002c96 <UI_GetReg+0x21e>
      bRetVal = (int32_t)(MC_UID);
 8002e10:	4825      	ldr	r0, [pc, #148]	; (8002ea8 <UI_GetReg+0x430>)
 8002e12:	e740      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002e14:	6828      	ldr	r0, [r5, #0]
 8002e16:	f005 fa5d 	bl	80082d4 <PID_GetKIDivisor>
      break;
 8002e1a:	e73c      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f005 f8a1 	bl	8007f64 <MCI_GetAvrgMecSpeedUnit>
 8002e22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e26:	0040      	lsls	r0, r0, #1
      break;
 8002e28:	e735      	b.n	8002c96 <UI_GetReg+0x21e>
        MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	f7ff fe1e 	bl	8002a6c <UI_GetDAC>
      break;
 8002e30:	e731      	b.n	8002c96 <UI_GetReg+0x21e>
        MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8002e32:	2100      	movs	r1, #0
 8002e34:	f7ff fe1a 	bl	8002a6c <UI_GetDAC>
      break;
 8002e38:	e72d      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002e3a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8002e3c:	f005 f9d6 	bl	80081ec <MPM_GetAvrgElMotorPowerW>
      break;
 8002e40:	e729      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002e42:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002e44:	f005 fa18 	bl	8008278 <NTC_GetAvTemp_C>
      break;
 8002e48:	e725      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002e4a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002e4c:	f004 fd98 	bl	8007980 <VBS_GetAvBusVoltage_V>
      break;
 8002e50:	e721      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002e52:	4630      	mov	r0, r6
 8002e54:	f005 f89a 	bl	8007f8c <MCI_GetIalphabeta>
 8002e58:	b200      	sxth	r0, r0
      break;
 8002e5a:	e71c      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetIab(pMCI).b;
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	f005 f88d 	bl	8007f7c <MCI_GetIab>
 8002e62:	1400      	asrs	r0, r0, #16
      break;
 8002e64:	e717      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002e66:	6868      	ldr	r0, [r5, #4]
 8002e68:	f005 fa38 	bl	80082dc <PID_GetKD>
      break;
 8002e6c:	e713      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002e6e:	6868      	ldr	r0, [r5, #4]
 8002e70:	f005 fa28 	bl	80082c4 <PID_GetKI>
      break;
 8002e74:	e70f      	b.n	8002c96 <UI_GetReg+0x21e>
        bRetVal = MCI_GetIqd(pMCI).d;
 8002e76:	4630      	mov	r0, r6
 8002e78:	f005 f890 	bl	8007f9c <MCI_GetIqd>
 8002e7c:	1400      	asrs	r0, r0, #16
      break;
 8002e7e:	e70a      	b.n	8002c96 <UI_GetReg+0x21e>
    *success = false;
 8002e80:	2000      	movs	r0, #0
 8002e82:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002e84:	e707      	b.n	8002c96 <UI_GetReg+0x21e>
        if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e86:	2b01      	cmp	r3, #1
          pSPD = pMCT->pSpeedSensorMain;
 8002e88:	69a8      	ldr	r0, [r5, #24]
        if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e8a:	f63f af7f 	bhi.w	8002d8c <UI_GetReg+0x314>
 8002e8e:	e77c      	b.n	8002d8a <UI_GetReg+0x312>
        if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e90:	2b01      	cmp	r3, #1
          pSPD = pMCT->pSpeedSensorMain;
 8002e92:	69a8      	ldr	r0, [r5, #24]
        if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002e94:	f63f af1d 	bhi.w	8002cd2 <UI_GetReg+0x25a>
 8002e98:	e71a      	b.n	8002cd0 <UI_GetReg+0x258>
        bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002e9a:	f005 f857 	bl	8007f4c <MCI_GetLastRampFinalSpeed>
 8002e9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ea2:	0040      	lsls	r0, r0, #1
 8002ea4:	e6f7      	b.n	8002c96 <UI_GetReg+0x21e>
 8002ea6:	bf00      	nop
 8002ea8:	34a6847a 	.word	0x34a6847a

08002eac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <SystemInit+0x18>)
 8002eae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eb2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ebe:	6099      	str	r1, [r3, #8]
#endif
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b500      	push	{lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eca:	2003      	movs	r0, #3
{
 8002ecc:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ece:	f000 ff05 	bl	8003cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7ff faa4 	bl	8002420 <HAL_InitTick>
 8002ed8:	b118      	cbz	r0, 8002ee2 <HAL_Init+0x1a>
  {
    status = HAL_ERROR;
 8002eda:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;

}
 8002edc:	b003      	add	sp, #12
 8002ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ee2:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8002ee4:	f7fe ffc6 	bl	8001e74 <HAL_MspInit>
 8002ee8:	9801      	ldr	r0, [sp, #4]
}
 8002eea:	b003      	add	sp, #12
 8002eec:	f85d fb04 	ldr.w	pc, [sp], #4

08002ef0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ef0:	4a03      	ldr	r2, [pc, #12]	; (8002f00 <HAL_IncTick+0x10>)
 8002ef2:	4904      	ldr	r1, [pc, #16]	; (8002f04 <HAL_IncTick+0x14>)
 8002ef4:	6813      	ldr	r3, [r2, #0]
 8002ef6:	6809      	ldr	r1, [r1, #0]
 8002ef8:	440b      	add	r3, r1
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	2000194c 	.word	0x2000194c
 8002f04:	200005e0 	.word	0x200005e0

08002f08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f08:	4b01      	ldr	r3, [pc, #4]	; (8002f10 <HAL_GetTick+0x8>)
 8002f0a:	6818      	ldr	r0, [r3, #0]
}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	2000194c 	.word	0x2000194c

08002f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff fff6 	bl	8002f08 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002f1e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002f20:	d002      	beq.n	8002f28 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f22:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <HAL_Delay+0x20>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f28:	f7ff ffee 	bl	8002f08 <HAL_GetTick>
 8002f2c:	1b40      	subs	r0, r0, r5
 8002f2e:	42a0      	cmp	r0, r4
 8002f30:	d3fa      	bcc.n	8002f28 <HAL_Delay+0x14>
  {
  }
}
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
 8002f34:	200005e0 	.word	0x200005e0

08002f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f40:	2800      	cmp	r0, #0
 8002f42:	f000 80a1 	beq.w	8003088 <HAL_ADC_Init+0x150>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f46:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002f48:	4604      	mov	r4, r0
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	f000 8091 	beq.w	8003072 <HAL_ADC_Init+0x13a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f50:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f52:	6893      	ldr	r3, [r2, #8]
 8002f54:	009d      	lsls	r5, r3, #2
 8002f56:	d505      	bpl.n	8002f64 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f58:	6893      	ldr	r3, [r2, #8]
 8002f5a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f62:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f64:	6893      	ldr	r3, [r2, #8]
 8002f66:	00d8      	lsls	r0, r3, #3
 8002f68:	d417      	bmi.n	8002f9a <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f6a:	4b75      	ldr	r3, [pc, #468]	; (8003140 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 8002f6c:	6891      	ldr	r1, [r2, #8]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4874      	ldr	r0, [pc, #464]	; (8003144 <HAL_ADC_Init+0x20c>)
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8002f78:	fba0 0303 	umull	r0, r3, r0, r3
 8002f7c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002f86:	6091      	str	r1, [r2, #8]
 8002f88:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002f8a:	9b01      	ldr	r3, [sp, #4]
 8002f8c:	b12b      	cbz	r3, 8002f9a <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f9      	bne.n	8002f8e <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f9a:	6893      	ldr	r3, [r2, #8]
 8002f9c:	00d9      	lsls	r1, r3, #3
 8002f9e:	d45a      	bmi.n	8003056 <HAL_ADC_Init+0x11e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fa2:	f043 0310 	orr.w	r3, r3, #16
 8002fa6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fb0:	6893      	ldr	r3, [r2, #8]
 8002fb2:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8002fb6:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fbc:	d152      	bne.n	8003064 <HAL_ADC_Init+0x12c>
 8002fbe:	06db      	lsls	r3, r3, #27
 8002fc0:	d450      	bmi.n	8003064 <HAL_ADC_Init+0x12c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fce:	6893      	ldr	r3, [r2, #8]
 8002fd0:	07de      	lsls	r6, r3, #31
 8002fd2:	d409      	bmi.n	8002fe8 <HAL_ADC_Init+0xb0>
 8002fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fd8:	495b      	ldr	r1, [pc, #364]	; (8003148 <HAL_ADC_Init+0x210>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	6889      	ldr	r1, [r1, #8]
 8002fde:	07cd      	lsls	r5, r1, #31
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	f140 8083 	bpl.w	80030ee <HAL_ADC_Init+0x1b6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8002fe8:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8002fec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fee:	432b      	orrs	r3, r5
 8002ff0:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ff2:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff4:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8002ff8:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ffc:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ffe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003002:	d103      	bne.n	800300c <HAL_ADC_Init+0xd4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003004:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003006:	3901      	subs	r1, #1
 8003008:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800300c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800300e:	b121      	cbz	r1, 800301a <HAL_ADC_Init+0xe2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003010:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003012:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003016:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003018:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800301a:	68d6      	ldr	r6, [r2, #12]
 800301c:	494b      	ldr	r1, [pc, #300]	; (800314c <HAL_ADC_Init+0x214>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800301e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003020:	4031      	ands	r1, r6
 8003022:	430b      	orrs	r3, r1
 8003024:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003026:	6913      	ldr	r3, [r2, #16]
 8003028:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800302c:	432b      	orrs	r3, r5
 800302e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003030:	6893      	ldr	r3, [r2, #8]
 8003032:	0759      	lsls	r1, r3, #29
 8003034:	d52b      	bpl.n	800308e <HAL_ADC_Init+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003036:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003038:	6963      	ldr	r3, [r4, #20]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d04f      	beq.n	80030de <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800303e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003040:	f023 030f 	bic.w	r3, r3, #15
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003046:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003048:	f023 0303 	bic.w	r3, r3, #3
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003052:	b002      	add	sp, #8
 8003054:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003056:	6893      	ldr	r3, [r2, #8]
 8003058:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305c:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003060:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003062:	d0ac      	beq.n	8002fbe <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003066:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003068:	f043 0310 	orr.w	r3, r3, #16
 800306c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800306e:	b002      	add	sp, #8
 8003070:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003072:	f7fe ff27 	bl	8001ec4 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003076:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	6625      	str	r5, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800307a:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 800307c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003080:	009d      	lsls	r5, r3, #2
 8003082:	f57f af6f 	bpl.w	8002f64 <HAL_ADC_Init+0x2c>
 8003086:	e767      	b.n	8002f58 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8003088:	2001      	movs	r0, #1
}
 800308a:	b002      	add	sp, #8
 800308c:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800308e:	6893      	ldr	r3, [r2, #8]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	d4d1      	bmi.n	8003038 <HAL_ADC_Init+0x100>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003094:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003096:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800309a:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 800309c:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800309e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030a2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030a4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030a8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030ac:	430b      	orrs	r3, r1
 80030ae:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030b0:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80030b2:	b33d      	cbz	r5, 8003104 <HAL_ADC_Init+0x1cc>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030ba:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80030be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c6:	432b      	orrs	r3, r5
 80030c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80030cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d023      	beq.n	800311c <HAL_ADC_Init+0x1e4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030d4:	6913      	ldr	r3, [r2, #16]
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6113      	str	r3, [r2, #16]
 80030dc:	e7ac      	b.n	8003038 <HAL_ADC_Init+0x100>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030e0:	6a23      	ldr	r3, [r4, #32]
 80030e2:	f021 010f 	bic.w	r1, r1, #15
 80030e6:	3b01      	subs	r3, #1
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6313      	str	r3, [r2, #48]	; 0x30
 80030ec:	e7ab      	b.n	8003046 <HAL_ADC_Init+0x10e>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f47f af7a 	bne.w	8002fe8 <HAL_ADC_Init+0xb0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030f4:	4916      	ldr	r1, [pc, #88]	; (8003150 <HAL_ADC_Init+0x218>)
 80030f6:	6865      	ldr	r5, [r4, #4]
 80030f8:	688b      	ldr	r3, [r1, #8]
 80030fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80030fe:	432b      	orrs	r3, r5
 8003100:	608b      	str	r3, [r1, #8]
 8003102:	e771      	b.n	8002fe8 <HAL_ADC_Init+0xb0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003108:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800310a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800310e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003112:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003116:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800311a:	e7d7      	b.n	80030cc <HAL_ADC_Init+0x194>
        MODIFY_REG(hadc->Instance->CFGR2,
 800311c:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 8003120:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8003122:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003124:	430b      	orrs	r3, r1
 8003126:	6911      	ldr	r1, [r2, #16]
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	4333      	orrs	r3, r6
 800312e:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003132:	432b      	orrs	r3, r5
 8003134:	f021 0104 	bic.w	r1, r1, #4
 8003138:	430b      	orrs	r3, r1
 800313a:	6113      	str	r3, [r2, #16]
 800313c:	e77c      	b.n	8003038 <HAL_ADC_Init+0x100>
 800313e:	bf00      	nop
 8003140:	200005dc 	.word	0x200005dc
 8003144:	053e2d63 	.word	0x053e2d63
 8003148:	50000100 	.word	0x50000100
 800314c:	fff04007 	.word	0xfff04007
 8003150:	50000300 	.word	0x50000300

08003154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003158:	4603      	mov	r3, r0
 800315a:	b082      	sub	sp, #8
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800315c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0;
 8003160:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003162:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8003164:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003166:	f000 8103 	beq.w	8003370 <HAL_ADC_ConfigChannel+0x21c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316a:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316c:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hadc);
 800316e:	2001      	movs	r0, #1
 8003170:	0756      	lsls	r6, r2, #29
 8003172:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8003176:	d44f      	bmi.n	8003218 <HAL_ADC_ConfigChannel+0xc4>
  MODIFY_REG(*preg,
 8003178:	e9d1 2000 	ldrd	r2, r0, [r1]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800317c:	0986      	lsrs	r6, r0, #6
 800317e:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8003182:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8003186:	f000 001f 	and.w	r0, r0, #31
 800318a:	5977      	ldr	r7, [r6, r5]
 800318c:	f04f 0c1f 	mov.w	ip, #31
 8003190:	fa0c fc00 	lsl.w	ip, ip, r0
 8003194:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003198:	ea27 070c 	bic.w	r7, r7, ip
 800319c:	4082      	lsls	r2, r0
 800319e:	433a      	orrs	r2, r7
 80031a0:	5172      	str	r2, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a2:	68a2      	ldr	r2, [r4, #8]
 80031a4:	0755      	lsls	r5, r2, #29
 80031a6:	d549      	bpl.n	800323c <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031a8:	68a2      	ldr	r2, [r4, #8]
 80031aa:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ac:	68a0      	ldr	r0, [r4, #8]
 80031ae:	07c0      	lsls	r0, r0, #31
 80031b0:	d413      	bmi.n	80031da <HAL_ADC_ConfigChannel+0x86>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031b2:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80031b4:	48c1      	ldr	r0, [pc, #772]	; (80034bc <HAL_ADC_ConfigChannel+0x368>)
 80031b6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031ba:	f8df c328 	ldr.w	ip, [pc, #808]	; 80034e4 <HAL_ADC_ConfigChannel+0x390>
 80031be:	f006 0718 	and.w	r7, r6, #24
 80031c2:	40f8      	lsrs	r0, r7
 80031c4:	f3c2 0712 	ubfx	r7, r2, #0, #19
 80031c8:	4010      	ands	r0, r2
 80031ca:	ea25 0507 	bic.w	r5, r5, r7
 80031ce:	4328      	orrs	r0, r5
 80031d0:	4566      	cmp	r6, ip
 80031d2:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
 80031d6:	f000 808b 	beq.w	80032f0 <HAL_ADC_ConfigChannel+0x19c>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031da:	49b9      	ldr	r1, [pc, #740]	; (80034c0 <HAL_ADC_ConfigChannel+0x36c>)
 80031dc:	420a      	tst	r2, r1
 80031de:	d02b      	beq.n	8003238 <HAL_ADC_ConfigChannel+0xe4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80031e0:	4db8      	ldr	r5, [pc, #736]	; (80034c4 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031e2:	49b9      	ldr	r1, [pc, #740]	; (80034c8 <HAL_ADC_ConfigChannel+0x374>)
 80031e4:	68a8      	ldr	r0, [r5, #8]
 80031e6:	428a      	cmp	r2, r1
 80031e8:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80031ec:	d01e      	beq.n	800322c <HAL_ADC_ConfigChannel+0xd8>
 80031ee:	49b7      	ldr	r1, [pc, #732]	; (80034cc <HAL_ADC_ConfigChannel+0x378>)
 80031f0:	428a      	cmp	r2, r1
 80031f2:	d01b      	beq.n	800322c <HAL_ADC_ConfigChannel+0xd8>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f4:	49b6      	ldr	r1, [pc, #728]	; (80034d0 <HAL_ADC_ConfigChannel+0x37c>)
 80031f6:	428a      	cmp	r2, r1
 80031f8:	f040 80be 	bne.w	8003378 <HAL_ADC_ConfigChannel+0x224>
 80031fc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003200:	d11a      	bne.n	8003238 <HAL_ADC_ConfigChannel+0xe4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003202:	4ab4      	ldr	r2, [pc, #720]	; (80034d4 <HAL_ADC_ConfigChannel+0x380>)
 8003204:	4294      	cmp	r4, r2
 8003206:	d017      	beq.n	8003238 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003208:	68aa      	ldr	r2, [r5, #8]
 800320a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800320e:	4316      	orrs	r6, r2
 8003210:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8003214:	60ae      	str	r6, [r5, #8]
 8003216:	e003      	b.n	8003220 <HAL_ADC_ConfigChannel+0xcc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800321a:	f042 0220 	orr.w	r2, r2, #32
 800321e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003226:	b002      	add	sp, #8
 8003228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800322c:	0202      	lsls	r2, r0, #8
 800322e:	d403      	bmi.n	8003238 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003230:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003234:	f000 80cb 	beq.w	80033ce <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003238:	2000      	movs	r0, #0
 800323a:	e7f1      	b.n	8003220 <HAL_ADC_ConfigChannel+0xcc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800323c:	68a5      	ldr	r5, [r4, #8]
 800323e:	680a      	ldr	r2, [r1, #0]
 8003240:	f015 0508 	ands.w	r5, r5, #8
 8003244:	d1b2      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x58>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003246:	688e      	ldr	r6, [r1, #8]
 8003248:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 800324c:	2007      	movs	r0, #7
 800324e:	0dd2      	lsrs	r2, r2, #23
 8003250:	fa00 f00e 	lsl.w	r0, r0, lr
 8003254:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003258:	f002 0204 	and.w	r2, r2, #4
 800325c:	ea6f 0000 	mvn.w	r0, r0
 8003260:	f104 0c14 	add.w	ip, r4, #20
 8003264:	f000 811a 	beq.w	800349c <HAL_ADC_ConfigChannel+0x348>
  MODIFY_REG(*preg,
 8003268:	f852 700c 	ldr.w	r7, [r2, ip]
 800326c:	fa06 f60e 	lsl.w	r6, r6, lr
 8003270:	4038      	ands	r0, r7
 8003272:	4306      	orrs	r6, r0
 8003274:	f842 600c 	str.w	r6, [r2, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003278:	6962      	ldr	r2, [r4, #20]
 800327a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800327e:	6162      	str	r2, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003280:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003284:	68e7      	ldr	r7, [r4, #12]
 8003286:	680a      	ldr	r2, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003288:	f1bc 0f04 	cmp.w	ip, #4
 800328c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8003290:	f000 80bb 	beq.w	800340a <HAL_ADC_ConfigChannel+0x2b6>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003294:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(*preg,
 8003296:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 800329a:	f8df e24c 	ldr.w	lr, [pc, #588]	; 80034e8 <HAL_ADC_ConfigChannel+0x394>
 800329e:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 80032a2:	007f      	lsls	r7, r7, #1
 80032a4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80032a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80032ac:	40be      	lsls	r6, r7
 80032ae:	4316      	orrs	r6, r2
 80032b0:	ea08 0e0e 	and.w	lr, r8, lr
 80032b4:	ea46 060e 	orr.w	r6, r6, lr
 80032b8:	f840 602c 	str.w	r6, [r0, ip, lsl #2]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032bc:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80032be:	698e      	ldr	r6, [r1, #24]
 80032c0:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80032c4:	f891 c01c 	ldrb.w	ip, [r1, #28]
 80032c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80032cc:	4332      	orrs	r2, r6
 80032ce:	f840 2027 	str.w	r2, [r0, r7, lsl #2]
 80032d2:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(*preg,
 80032d4:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 80032d8:	f1bc 0f01 	cmp.w	ip, #1
 80032dc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80032e0:	bf08      	it	eq
 80032e2:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 80032e6:	4315      	orrs	r5, r2
 80032e8:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
 80032ec:	680a      	ldr	r2, [r1, #0]
 80032ee:	e75d      	b.n	80031ac <HAL_ADC_ConfigChannel+0x58>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032f0:	2f00      	cmp	r7, #0
 80032f2:	d055      	beq.n	80033a0 <HAL_ADC_ConfigChannel+0x24c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	fa92 f0a2 	rbit	r0, r2
 80032f8:	fab0 f080 	clz	r0, r0
 80032fc:	3001      	adds	r0, #1
 80032fe:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003302:	2809      	cmp	r0, #9
 8003304:	f200 80f2 	bhi.w	80034ec <HAL_ADC_ConfigChannel+0x398>
 8003308:	fa92 f6a2 	rbit	r6, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800330c:	fab6 f686 	clz	r6, r6
 8003310:	fa92 f0a2 	rbit	r0, r2
 8003314:	fab0 f080 	clz	r0, r0
 8003318:	3001      	adds	r0, #1
 800331a:	3601      	adds	r6, #1
 800331c:	2501      	movs	r5, #1
 800331e:	f000 001f 	and.w	r0, r0, #31
 8003322:	06b6      	lsls	r6, r6, #26
 8003324:	fa05 f000 	lsl.w	r0, r5, r0
 8003328:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800332c:	4306      	orrs	r6, r0
 800332e:	fa92 f5a2 	rbit	r5, r2
 8003332:	fab5 f585 	clz	r5, r5
 8003336:	3501      	adds	r5, #1
 8003338:	f005 051f 	and.w	r5, r5, #31
 800333c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8003340:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003342:	4330      	orrs	r0, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003344:	ea4f 5cd0 	mov.w	ip, r0, lsr #23
 8003348:	f00c 0c04 	and.w	ip, ip, #4
 800334c:	f104 0714 	add.w	r7, r4, #20
  MODIFY_REG(*preg,
 8003350:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003354:	f85c 5007 	ldr.w	r5, [ip, r7]
 8003358:	688e      	ldr	r6, [r1, #8]
 800335a:	2207      	movs	r2, #7
 800335c:	4082      	lsls	r2, r0
 800335e:	ea25 0502 	bic.w	r5, r5, r2
 8003362:	fa06 f000 	lsl.w	r0, r6, r0
 8003366:	4328      	orrs	r0, r5
 8003368:	f84c 0007 	str.w	r0, [ip, r7]
 800336c:	680a      	ldr	r2, [r1, #0]
 800336e:	e734      	b.n	80031da <HAL_ADC_ConfigChannel+0x86>
  __HAL_LOCK(hadc);
 8003370:	2002      	movs	r0, #2
}
 8003372:	b002      	add	sp, #8
 8003374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003378:	4957      	ldr	r1, [pc, #348]	; (80034d8 <HAL_ADC_ConfigChannel+0x384>)
 800337a:	428a      	cmp	r2, r1
 800337c:	f47f af5c 	bne.w	8003238 <HAL_ADC_ConfigChannel+0xe4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003380:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003384:	f47f af58 	bne.w	8003238 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003388:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <HAL_ADC_ConfigChannel+0x380>)
 800338a:	4294      	cmp	r4, r2
 800338c:	f43f af54 	beq.w	8003238 <HAL_ADC_ConfigChannel+0xe4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003390:	68aa      	ldr	r2, [r5, #8]
 8003392:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003396:	4332      	orrs	r2, r6
 8003398:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800339c:	60aa      	str	r2, [r5, #8]
 800339e:	e73f      	b.n	8003220 <HAL_ADC_ConfigChannel+0xcc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033a0:	0e92      	lsrs	r2, r2, #26
 80033a2:	3201      	adds	r2, #1
 80033a4:	f002 051f 	and.w	r5, r2, #31
 80033a8:	2601      	movs	r6, #1
 80033aa:	0692      	lsls	r2, r2, #26
 80033ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80033b0:	40ae      	lsls	r6, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b2:	2d09      	cmp	r5, #9
 80033b4:	ea46 0602 	orr.w	r6, r6, r2
 80033b8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80033bc:	d9c0      	bls.n	8003340 <HAL_ADC_ConfigChannel+0x1ec>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033be:	f1a0 021e 	sub.w	r2, r0, #30
 80033c2:	0512      	lsls	r2, r2, #20
 80033c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c8:	ea42 0006 	orr.w	r0, r2, r6
 80033cc:	e7ba      	b.n	8003344 <HAL_ADC_ConfigChannel+0x1f0>
 80033ce:	483d      	ldr	r0, [pc, #244]	; (80034c4 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033d0:	4a42      	ldr	r2, [pc, #264]	; (80034dc <HAL_ADC_ConfigChannel+0x388>)
 80033d2:	6881      	ldr	r1, [r0, #8]
 80033d4:	4c42      	ldr	r4, [pc, #264]	; (80034e0 <HAL_ADC_ConfigChannel+0x38c>)
 80033d6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80033da:	430e      	orrs	r6, r1
 80033dc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 80033e0:	6086      	str	r6, [r0, #8]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	0992      	lsrs	r2, r2, #6
 80033e6:	fba4 1202 	umull	r1, r2, r4, r2
 80033ea:	0992      	lsrs	r2, r2, #6
 80033ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80033f0:	0092      	lsls	r2, r2, #2
 80033f2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80033f4:	9a01      	ldr	r2, [sp, #4]
 80033f6:	2a00      	cmp	r2, #0
 80033f8:	f43f af1e 	beq.w	8003238 <HAL_ADC_ConfigChannel+0xe4>
            wait_loop_index--;
 80033fc:	9a01      	ldr	r2, [sp, #4]
 80033fe:	3a01      	subs	r2, #1
 8003400:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003402:	9a01      	ldr	r2, [sp, #4]
 8003404:	2a00      	cmp	r2, #0
 8003406:	d1f9      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x2a8>
 8003408:	e716      	b.n	8003238 <HAL_ADC_ConfigChannel+0xe4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800340a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800340c:	6e25      	ldr	r5, [r4, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800340e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8003412:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003416:	2f00      	cmp	r7, #0
 8003418:	d14a      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x35c>
 800341a:	f3c2 6684 	ubfx	r6, r2, #26, #5
 800341e:	42b5      	cmp	r5, r6
 8003420:	d106      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x2dc>
  MODIFY_REG(*preg,
 8003422:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003424:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003428:	6622      	str	r2, [r4, #96]	; 0x60
 800342a:	680a      	ldr	r2, [r1, #0]
 800342c:	f3c2 0712 	ubfx	r7, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003430:	6845      	ldr	r5, [r0, #4]
 8003432:	6846      	ldr	r6, [r0, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003434:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003438:	2f00      	cmp	r7, #0
 800343a:	d179      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x3dc>
 800343c:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8003440:	42ae      	cmp	r6, r5
 8003442:	f040 8095 	bne.w	8003570 <HAL_ADC_ConfigChannel+0x41c>
  MODIFY_REG(*preg,
 8003446:	6842      	ldr	r2, [r0, #4]
 8003448:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800344c:	6042      	str	r2, [r0, #4]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800344e:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003450:	6885      	ldr	r5, [r0, #8]
 8003452:	6886      	ldr	r6, [r0, #8]
 8003454:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003458:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800345c:	2d00      	cmp	r5, #0
 800345e:	d171      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x3f0>
 8003460:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8003464:	42ae      	cmp	r6, r5
 8003466:	f100 070c 	add.w	r7, r0, #12
 800346a:	d17c      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x412>
  MODIFY_REG(*preg,
 800346c:	6882      	ldr	r2, [r0, #8]
 800346e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003472:	6082      	str	r2, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003474:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003476:	6838      	ldr	r0, [r7, #0]
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800347e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003482:	2d00      	cmp	r5, #0
 8003484:	d16a      	bne.n	800355c <HAL_ADC_ConfigChannel+0x408>
 8003486:	f3c2 6584 	ubfx	r5, r2, #26, #5
 800348a:	4285      	cmp	r5, r0
 800348c:	f47f ae8e 	bne.w	80031ac <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003496:	603a      	str	r2, [r7, #0]
 8003498:	680a      	ldr	r2, [r1, #0]
 800349a:	e687      	b.n	80031ac <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 800349c:	f852 600c 	ldr.w	r6, [r2, ip]
 80034a0:	4030      	ands	r0, r6
 80034a2:	f842 000c 	str.w	r0, [r2, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80034a6:	6962      	ldr	r2, [r4, #20]
 80034a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034ac:	6162      	str	r2, [r4, #20]
 80034ae:	e6e7      	b.n	8003280 <HAL_ADC_ConfigChannel+0x12c>
 80034b0:	fa92 f6a2 	rbit	r6, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034b4:	fab6 f686 	clz	r6, r6
 80034b8:	e7b1      	b.n	800341e <HAL_ADC_ConfigChannel+0x2ca>
 80034ba:	bf00      	nop
 80034bc:	0007ffff 	.word	0x0007ffff
 80034c0:	80080000 	.word	0x80080000
 80034c4:	50000300 	.word	0x50000300
 80034c8:	c3210000 	.word	0xc3210000
 80034cc:	90c00010 	.word	0x90c00010
 80034d0:	c7520000 	.word	0xc7520000
 80034d4:	50000100 	.word	0x50000100
 80034d8:	cb840000 	.word	0xcb840000
 80034dc:	200005dc 	.word	0x200005dc
 80034e0:	053e2d63 	.word	0x053e2d63
 80034e4:	407f0000 	.word	0x407f0000
 80034e8:	03fff000 	.word	0x03fff000
 80034ec:	fa92 f6a2 	rbit	r6, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034f0:	fab6 f686 	clz	r6, r6
 80034f4:	fa92 f0a2 	rbit	r0, r2
 80034f8:	fab0 f080 	clz	r0, r0
 80034fc:	3001      	adds	r0, #1
 80034fe:	3601      	adds	r6, #1
 8003500:	2501      	movs	r5, #1
 8003502:	f000 001f 	and.w	r0, r0, #31
 8003506:	06b6      	lsls	r6, r6, #26
 8003508:	fa05 f000 	lsl.w	r0, r5, r0
 800350c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8003510:	4306      	orrs	r6, r0
 8003512:	fa92 f5a2 	rbit	r5, r2
 8003516:	fab5 f585 	clz	r5, r5
 800351a:	3501      	adds	r5, #1
 800351c:	f005 051f 	and.w	r5, r5, #31
 8003520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003524:	f1a5 021e 	sub.w	r2, r5, #30
 8003528:	0512      	lsls	r2, r2, #20
 800352a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800352e:	e74b      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x274>
 8003530:	fa92 f5a2 	rbit	r5, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003534:	fab5 f585 	clz	r5, r5
 8003538:	42ae      	cmp	r6, r5
 800353a:	d084      	beq.n	8003446 <HAL_ADC_ConfigChannel+0x2f2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800353c:	6885      	ldr	r5, [r0, #8]
 800353e:	6886      	ldr	r6, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003540:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003544:	fa92 f5a2 	rbit	r5, r2
 8003548:	fab5 f585 	clz	r5, r5
 800354c:	42b5      	cmp	r5, r6
 800354e:	f100 070c 	add.w	r7, r0, #12
 8003552:	d08b      	beq.n	800346c <HAL_ADC_ConfigChannel+0x318>
 8003554:	68c5      	ldr	r5, [r0, #12]
 8003556:	68c0      	ldr	r0, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003558:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800355c:	fa92 f5a2 	rbit	r5, r2
 8003560:	fab5 f585 	clz	r5, r5
 8003564:	e791      	b.n	800348a <HAL_ADC_ConfigChannel+0x336>
 8003566:	68c6      	ldr	r6, [r0, #12]
 8003568:	68c0      	ldr	r0, [r0, #12]
 800356a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800356e:	e78c      	b.n	800348a <HAL_ADC_ConfigChannel+0x336>
 8003570:	6886      	ldr	r6, [r0, #8]
 8003572:	6886      	ldr	r6, [r0, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003574:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003578:	e774      	b.n	8003464 <HAL_ADC_ConfigChannel+0x310>
 800357a:	bf00      	nop

0800357c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800357c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003580:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8003584:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8003586:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003588:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 800358a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800358c:	f000 815f 	beq.w	800384e <HAL_ADCEx_InjectedConfigChannel+0x2d2>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003590:	6943      	ldr	r3, [r0, #20]
  __HAL_LOCK(hadc);
 8003592:	2201      	movs	r2, #1
 8003594:	4604      	mov	r4, r0
 8003596:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d072      	beq.n	8003684 <HAL_ADCEx_InjectedConfigChannel+0x108>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800359e:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d06f      	beq.n	8003684 <HAL_ADCEx_InjectedConfigChannel+0x108>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80035a4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80035a6:	2a00      	cmp	r2, #0
 80035a8:	f040 812a 	bne.w	8003800 <HAL_ADCEx_InjectedConfigChannel+0x284>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80035ac:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80035ae:	1e5a      	subs	r2, r3, #1
 80035b0:	2800      	cmp	r0, #0
 80035b2:	f000 822c 	beq.w	8003a0e <HAL_ADCEx_InjectedConfigChannel+0x492>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80035b6:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80035ba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80035bc:	4310      	orrs	r0, r2
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80035be:	4318      	orrs	r0, r3
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80035c0:	e9d1 3500 	ldrd	r3, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80035c4:	66a2      	str	r2, [r4, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80035c6:	f005 051f 	and.w	r5, r5, #31
 80035ca:	f3c3 6284 	ubfx	r2, r3, #26, #5
 80035ce:	40aa      	lsls	r2, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80035d0:	4310      	orrs	r0, r2
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	6660      	str	r0, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035d6:	6890      	ldr	r0, [r2, #8]
 80035d8:	0700      	lsls	r0, r0, #28
 80035da:	d410      	bmi.n	80035fe <HAL_ADCEx_InjectedConfigChannel+0x82>
 80035dc:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80035e0:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
 80035e4:	0540      	lsls	r0, r0, #21
 80035e6:	2d00      	cmp	r5, #0
 80035e8:	f040 80ff 	bne.w	80037ea <HAL_ADCEx_InjectedConfigChannel+0x26e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80035ec:	68d5      	ldr	r5, [r2, #12]
 80035ee:	f891 6024 	ldrb.w	r6, [r1, #36]	; 0x24
 80035f2:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80035f6:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80035fa:	4328      	orrs	r0, r5
 80035fc:	60d0      	str	r0, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035fe:	6890      	ldr	r0, [r2, #8]
 8003600:	f010 0004 	ands.w	r0, r0, #4
 8003604:	d057      	beq.n	80036b6 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003606:	6890      	ldr	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003608:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800360a:	6895      	ldr	r5, [r2, #8]
 800360c:	07ef      	lsls	r7, r5, #31
 800360e:	d414      	bmi.n	800363a <HAL_ADCEx_InjectedConfigChannel+0xbe>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003610:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003612:	4dca      	ldr	r5, [pc, #808]	; (800393c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8003614:	f8d2 60b0 	ldr.w	r6, [r2, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003618:	f8df e34c 	ldr.w	lr, [pc, #844]	; 8003968 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
 800361c:	f007 0c18 	and.w	ip, r7, #24
 8003620:	fa25 f50c 	lsr.w	r5, r5, ip
 8003624:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 8003628:	401d      	ands	r5, r3
 800362a:	ea26 060c 	bic.w	r6, r6, ip
 800362e:	4335      	orrs	r5, r6
 8003630:	4577      	cmp	r7, lr
 8003632:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
 8003636:	f000 810e 	beq.w	8003856 <HAL_ADCEx_InjectedConfigChannel+0x2da>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800363a:	49c1      	ldr	r1, [pc, #772]	; (8003940 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 800363c:	420b      	tst	r3, r1
 800363e:	d01b      	beq.n	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003640:	4dc0      	ldr	r5, [pc, #768]	; (8003944 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003642:	4ec1      	ldr	r6, [pc, #772]	; (8003948 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 8003644:	68a9      	ldr	r1, [r5, #8]
 8003646:	42b3      	cmp	r3, r6
 8003648:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 800364c:	f000 80a7 	beq.w	800379e <HAL_ADCEx_InjectedConfigChannel+0x222>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003650:	4ebe      	ldr	r6, [pc, #760]	; (800394c <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 8003652:	42b3      	cmp	r3, r6
 8003654:	f000 80a3 	beq.w	800379e <HAL_ADCEx_InjectedConfigChannel+0x222>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003658:	4ebd      	ldr	r6, [pc, #756]	; (8003950 <HAL_ADCEx_InjectedConfigChannel+0x3d4>)
 800365a:	42b3      	cmp	r3, r6
 800365c:	f040 8152 	bne.w	8003904 <HAL_ADCEx_InjectedConfigChannel+0x388>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003660:	01ce      	lsls	r6, r1, #7
 8003662:	d409      	bmi.n	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003664:	4bbb      	ldr	r3, [pc, #748]	; (8003954 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8003666:	429a      	cmp	r2, r3
 8003668:	d006      	beq.n	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800366a:	68ab      	ldr	r3, [r5, #8]
 800366c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003670:	431f      	orrs	r7, r3
 8003672:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003676:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003678:	2300      	movs	r3, #0
 800367a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800367e:	b003      	add	sp, #12
 8003680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003684:	e9d1 3000 	ldrd	r3, r0, [r1]
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003688:	2809      	cmp	r0, #9
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	d1a3      	bne.n	80035d6 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800368e:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8003690:	0c5d      	lsrs	r5, r3, #17
 8003692:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8003696:	b120      	cbz	r0, 80036a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003698:	6ace      	ldr	r6, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800369a:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800369e:	4330      	orrs	r0, r6
 80036a0:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80036a2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80036a4:	4eac      	ldr	r6, [pc, #688]	; (8003958 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 80036a6:	4030      	ands	r0, r6
 80036a8:	4328      	orrs	r0, r5
 80036aa:	64d0      	str	r0, [r2, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036ac:	6890      	ldr	r0, [r2, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80036ae:	6665      	str	r5, [r4, #100]	; 0x64
 80036b0:	0700      	lsls	r0, r0, #28
 80036b2:	d4a4      	bmi.n	80035fe <HAL_ADCEx_InjectedConfigChannel+0x82>
 80036b4:	e792      	b.n	80035dc <HAL_ADCEx_InjectedConfigChannel+0x60>
 80036b6:	6895      	ldr	r5, [r2, #8]
 80036b8:	f015 0508 	ands.w	r5, r5, #8
 80036bc:	d1a5      	bne.n	800360a <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80036be:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80036c0:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80036c4:	2e00      	cmp	r6, #0
 80036c6:	f040 80b5 	bne.w	8003834 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80036ca:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80036cc:	68d0      	ldr	r0, [r2, #12]
 80036ce:	bf0c      	ite	eq
 80036d0:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80036d4:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 80036d8:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036da:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80036dc:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 80036e0:	2e01      	cmp	r6, #1
 80036e2:	f000 8145 	beq.w	8003970 <HAL_ADCEx_InjectedConfigChannel+0x3f4>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80036e6:	6916      	ldr	r6, [r2, #16]
 80036e8:	f026 0602 	bic.w	r6, r6, #2
 80036ec:	6116      	str	r6, [r2, #16]
 80036ee:	f3c3 5804 	ubfx	r8, r3, #20, #5
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80036f2:	688f      	ldr	r7, [r1, #8]
 80036f4:	0ddb      	lsrs	r3, r3, #23
 80036f6:	2607      	movs	r6, #7
 80036f8:	f003 0e04 	and.w	lr, r3, #4
 80036fc:	f102 0c14 	add.w	ip, r2, #20
 8003700:	fa06 f608 	lsl.w	r6, r6, r8
 8003704:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8003708:	ea6f 0606 	mvn.w	r6, r6
  MODIFY_REG(*preg,
 800370c:	f85e 300c 	ldr.w	r3, [lr, ip]
 8003710:	f000 810b 	beq.w	800392a <HAL_ADCEx_InjectedConfigChannel+0x3ae>
 8003714:	401e      	ands	r6, r3
 8003716:	fa07 f708 	lsl.w	r7, r7, r8
 800371a:	4337      	orrs	r7, r6
 800371c:	f84e 700c 	str.w	r7, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003720:	6953      	ldr	r3, [r2, #20]
 8003722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003726:	6153      	str	r3, [r2, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003728:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800372c:	68d7      	ldr	r7, [r2, #12]
 800372e:	680b      	ldr	r3, [r1, #0]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003730:	f1be 0f04 	cmp.w	lr, #4
 8003734:	f102 0660 	add.w	r6, r2, #96	; 0x60
 8003738:	f000 8126 	beq.w	8003988 <HAL_ADCEx_InjectedConfigChannel+0x40c>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800373c:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8003740:	694f      	ldr	r7, [r1, #20]
  MODIFY_REG(*preg,
 8003742:	f856 902e 	ldr.w	r9, [r6, lr, lsl #2]
 8003746:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800396c <HAL_ADCEx_InjectedConfigChannel+0x3f0>
 800374a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800374e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8003752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003756:	fa07 f70c 	lsl.w	r7, r7, ip
 800375a:	431f      	orrs	r7, r3
 800375c:	ea09 0808 	and.w	r8, r9, r8
 8003760:	ea47 0708 	orr.w	r7, r7, r8
 8003764:	f846 702e 	str.w	r7, [r6, lr, lsl #2]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003768:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 800376c:	698f      	ldr	r7, [r1, #24]
 800376e:	f856 302c 	ldr.w	r3, [r6, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003772:	f891 e01c 	ldrb.w	lr, [r1, #28]
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	433b      	orrs	r3, r7
 800377c:	f846 302c 	str.w	r3, [r6, ip, lsl #2]
 8003780:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003782:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
 8003786:	f1be 0f01 	cmp.w	lr, #1
 800378a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800378e:	bf08      	it	eq
 8003790:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8003794:	431d      	orrs	r5, r3
 8003796:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
 800379a:	680b      	ldr	r3, [r1, #0]
 800379c:	e735      	b.n	800360a <HAL_ADCEx_InjectedConfigChannel+0x8e>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800379e:	020b      	lsls	r3, r1, #8
 80037a0:	f53f af6a 	bmi.w	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037a4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80037a8:	f47f af66 	bne.w	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80037ac:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80037b0:	496a      	ldr	r1, [pc, #424]	; (800395c <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 80037b2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80037b6:	431f      	orrs	r7, r3
 80037b8:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 80037bc:	f8c2 7308 	str.w	r7, [r2, #776]	; 0x308
 80037c0:	680b      	ldr	r3, [r1, #0]
 80037c2:	4a67      	ldr	r2, [pc, #412]	; (8003960 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80037d4:	9b01      	ldr	r3, [sp, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f43f af4e 	beq.w	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
          wait_loop_index--;
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80037e2:	9b01      	ldr	r3, [sp, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f9      	bne.n	80037dc <HAL_ADCEx_InjectedConfigChannel+0x260>
 80037e8:	e746      	b.n	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      MODIFY_REG(hadc->Instance->CFGR,
 80037ea:	68d5      	ldr	r5, [r2, #12]
 80037ec:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80037f0:	4328      	orrs	r0, r5
 80037f2:	60d0      	str	r0, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037f4:	6890      	ldr	r0, [r2, #8]
 80037f6:	f010 0004 	ands.w	r0, r0, #4
 80037fa:	f47f af04 	bne.w	8003606 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 80037fe:	e75a      	b.n	80036b6 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003800:	e9d1 3000 	ldrd	r3, r0, [r1]
 8003804:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8003806:	f000 001f 	and.w	r0, r0, #31
 800380a:	f3c3 6584 	ubfx	r5, r3, #26, #5
 800380e:	4085      	lsls	r5, r0
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003810:	4335      	orrs	r5, r6
 8003812:	1e50      	subs	r0, r2, #1
 8003814:	e9c4 5019 	strd	r5, r0, [r4, #100]	; 0x64
 8003818:	6822      	ldr	r2, [r4, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800381a:	2800      	cmp	r0, #0
 800381c:	f47f aedb 	bne.w	80035d6 <HAL_ADCEx_InjectedConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003820:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003822:	4e4d      	ldr	r6, [pc, #308]	; (8003958 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8003824:	4030      	ands	r0, r6
 8003826:	4305      	orrs	r5, r0
 8003828:	64d5      	str	r5, [r2, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800382a:	6890      	ldr	r0, [r2, #8]
 800382c:	0700      	lsls	r0, r0, #28
 800382e:	f53f aee6 	bmi.w	80035fe <HAL_ADCEx_InjectedConfigChannel+0x82>
 8003832:	e6d3      	b.n	80035dc <HAL_ADCEx_InjectedConfigChannel+0x60>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003834:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003836:	2e00      	cmp	r6, #0
 8003838:	f43f af47 	beq.w	80036ca <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800383c:	2801      	cmp	r0, #1
 800383e:	f000 8108 	beq.w	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003842:	68d0      	ldr	r0, [r2, #12]
 8003844:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8003848:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384a:	4628      	mov	r0, r5
 800384c:	e746      	b.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x160>
  __HAL_LOCK(hadc);
 800384e:	2002      	movs	r0, #2
}
 8003850:	b003      	add	sp, #12
 8003852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003856:	f1bc 0f00 	cmp.w	ip, #0
 800385a:	d12b      	bne.n	80038b4 <HAL_ADCEx_InjectedConfigChannel+0x338>
 800385c:	0e9b      	lsrs	r3, r3, #26
 800385e:	3301      	adds	r3, #1
 8003860:	f003 061f 	and.w	r6, r3, #31
 8003864:	069d      	lsls	r5, r3, #26
 8003866:	2301      	movs	r3, #1
 8003868:	40b3      	lsls	r3, r6
 800386a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800386e:	2e09      	cmp	r6, #9
 8003870:	ea45 0503 	orr.w	r5, r5, r3
 8003874:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003878:	d942      	bls.n	8003900 <HAL_ADCEx_InjectedConfigChannel+0x384>
 800387a:	3b1e      	subs	r3, #30
 800387c:	051b      	lsls	r3, r3, #20
 800387e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003882:	432b      	orrs	r3, r5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003884:	ea4f 5cd3 	mov.w	ip, r3, lsr #23
 8003888:	f00c 0c04 	and.w	ip, ip, #4
 800388c:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8003890:	f3c3 5304 	ubfx	r3, r3, #20, #5
 8003894:	f85c 6007 	ldr.w	r6, [ip, r7]
 8003898:	688d      	ldr	r5, [r1, #8]
 800389a:	f04f 0e07 	mov.w	lr, #7
 800389e:	fa0e fe03 	lsl.w	lr, lr, r3
 80038a2:	ea26 060e 	bic.w	r6, r6, lr
 80038a6:	fa05 f303 	lsl.w	r3, r5, r3
 80038aa:	4333      	orrs	r3, r6
 80038ac:	f84c 3007 	str.w	r3, [ip, r7]
 80038b0:	680b      	ldr	r3, [r1, #0]
 80038b2:	e6c2      	b.n	800363a <HAL_ADCEx_InjectedConfigChannel+0xbe>
 80038b4:	fa93 f5a3 	rbit	r5, r3
 80038b8:	fab5 f585 	clz	r5, r5
 80038bc:	3501      	adds	r5, #1
 80038be:	f005 051f 	and.w	r5, r5, #31
 80038c2:	2d09      	cmp	r5, #9
 80038c4:	f200 80a8 	bhi.w	8003a18 <HAL_ADCEx_InjectedConfigChannel+0x49c>
 80038c8:	fa93 f5a3 	rbit	r5, r3
 80038cc:	fab5 f585 	clz	r5, r5
 80038d0:	fa93 f6a3 	rbit	r6, r3
 80038d4:	fab6 f686 	clz	r6, r6
 80038d8:	3601      	adds	r6, #1
 80038da:	3501      	adds	r5, #1
 80038dc:	2701      	movs	r7, #1
 80038de:	f006 061f 	and.w	r6, r6, #31
 80038e2:	06ad      	lsls	r5, r5, #26
 80038e4:	fa07 f606 	lsl.w	r6, r7, r6
 80038e8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80038ec:	4335      	orrs	r5, r6
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	443b      	add	r3, r7
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003900:	051b      	lsls	r3, r3, #20
 8003902:	e7be      	b.n	8003882 <HAL_ADCEx_InjectedConfigChannel+0x306>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003904:	4e17      	ldr	r6, [pc, #92]	; (8003964 <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8003906:	42b3      	cmp	r3, r6
 8003908:	f47f aeb6 	bne.w	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800390c:	0249      	lsls	r1, r1, #9
 800390e:	f53f aeb3 	bmi.w	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      if (ADC_VREFINT_INSTANCE(hadc))
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8003914:	429a      	cmp	r2, r3
 8003916:	f43f aeaf 	beq.w	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800391a:	68ab      	ldr	r3, [r5, #8]
 800391c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003920:	431f      	orrs	r7, r3
 8003922:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8003926:	60af      	str	r7, [r5, #8]
 8003928:	e6a6      	b.n	8003678 <HAL_ADCEx_InjectedConfigChannel+0xfc>
  MODIFY_REG(*preg,
 800392a:	401e      	ands	r6, r3
 800392c:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003930:	6953      	ldr	r3, [r2, #20]
 8003932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003936:	6153      	str	r3, [r2, #20]
 8003938:	e6f6      	b.n	8003728 <HAL_ADCEx_InjectedConfigChannel+0x1ac>
 800393a:	bf00      	nop
 800393c:	0007ffff 	.word	0x0007ffff
 8003940:	80080000 	.word	0x80080000
 8003944:	50000300 	.word	0x50000300
 8003948:	c3210000 	.word	0xc3210000
 800394c:	90c00010 	.word	0x90c00010
 8003950:	c7520000 	.word	0xc7520000
 8003954:	50000100 	.word	0x50000100
 8003958:	04104000 	.word	0x04104000
 800395c:	200005dc 	.word	0x200005dc
 8003960:	053e2d63 	.word	0x053e2d63
 8003964:	cb840000 	.word	0xcb840000
 8003968:	407f0000 	.word	0x407f0000
 800396c:	03fff000 	.word	0x03fff000
      MODIFY_REG(hadc->Instance->CFGR2,
 8003970:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8003972:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8003974:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8003978:	433e      	orrs	r6, r7
 800397a:	f046 0602 	orr.w	r6, r6, #2
 800397e:	f42c 77ff 	bic.w	r7, ip, #510	; 0x1fe
 8003982:	433e      	orrs	r6, r7
 8003984:	6116      	str	r6, [r2, #16]
 8003986:	e6b2      	b.n	80036ee <HAL_ADCEx_InjectedConfigChannel+0x172>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003988:	6e15      	ldr	r5, [r2, #96]	; 0x60
 800398a:	6e15      	ldr	r5, [r2, #96]	; 0x60
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800398c:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 8003990:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003994:	f1bc 0f00 	cmp.w	ip, #0
 8003998:	d03b      	beq.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x496>
 800399a:	fa93 f7a3 	rbit	r7, r3
 800399e:	fab7 f787 	clz	r7, r7
 80039a2:	42bd      	cmp	r5, r7
 80039a4:	d106      	bne.n	80039b4 <HAL_ADCEx_InjectedConfigChannel+0x438>
  MODIFY_REG(*preg,
 80039a6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80039a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ac:	6613      	str	r3, [r2, #96]	; 0x60
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	f3c3 0c12 	ubfx	ip, r3, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039b4:	6875      	ldr	r5, [r6, #4]
 80039b6:	6877      	ldr	r7, [r6, #4]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80039b8:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80039bc:	f1bc 0f00 	cmp.w	ip, #0
 80039c0:	d14c      	bne.n	8003a5c <HAL_ADCEx_InjectedConfigChannel+0x4e0>
 80039c2:	f3c3 6584 	ubfx	r5, r3, #26, #5
 80039c6:	42af      	cmp	r7, r5
 80039c8:	d172      	bne.n	8003ab0 <HAL_ADCEx_InjectedConfigChannel+0x534>
  MODIFY_REG(*preg,
 80039ca:	6873      	ldr	r3, [r6, #4]
 80039cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039d0:	6073      	str	r3, [r6, #4]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80039d2:	680b      	ldr	r3, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039d4:	68b5      	ldr	r5, [r6, #8]
 80039d6:	68b7      	ldr	r7, [r6, #8]
 80039d8:	f3c3 0512 	ubfx	r5, r3, #0, #19
 80039dc:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	d145      	bne.n	8003a70 <HAL_ADCEx_InjectedConfigChannel+0x4f4>
 80039e4:	f3c3 6584 	ubfx	r5, r3, #26, #5
 80039e8:	42af      	cmp	r7, r5
 80039ea:	f106 0c0c 	add.w	ip, r6, #12
 80039ee:	d047      	beq.n	8003a80 <HAL_ADCEx_InjectedConfigChannel+0x504>
 80039f0:	68f7      	ldr	r7, [r6, #12]
 80039f2:	68f6      	ldr	r6, [r6, #12]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80039f4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80039f8:	42b5      	cmp	r5, r6
 80039fa:	f47f ae06 	bne.w	800360a <HAL_ADCEx_InjectedConfigChannel+0x8e>
  MODIFY_REG(*preg,
 80039fe:	f8dc 3000 	ldr.w	r3, [ip]
 8003a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	f8cc 3000 	str.w	r3, [ip]
 8003a0a:	680b      	ldr	r3, [r1, #0]
 8003a0c:	e5fd      	b.n	800360a <HAL_ADCEx_InjectedConfigChannel+0x8e>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003a0e:	4610      	mov	r0, r2
 8003a10:	e5d6      	b.n	80035c0 <HAL_ADCEx_InjectedConfigChannel+0x44>
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003a12:	f3c3 6784 	ubfx	r7, r3, #26, #5
 8003a16:	e7c4      	b.n	80039a2 <HAL_ADCEx_InjectedConfigChannel+0x426>
 8003a18:	fa93 f5a3 	rbit	r5, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8003a1c:	fab5 f585 	clz	r5, r5
 8003a20:	fa93 f6a3 	rbit	r6, r3
 8003a24:	fab6 f686 	clz	r6, r6
 8003a28:	3601      	adds	r6, #1
 8003a2a:	3501      	adds	r5, #1
 8003a2c:	2701      	movs	r7, #1
 8003a2e:	f006 061f 	and.w	r6, r6, #31
 8003a32:	06ad      	lsls	r5, r5, #26
 8003a34:	fa07 f606 	lsl.w	r6, r7, r6
 8003a38:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003a3c:	4335      	orrs	r5, r6
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	443b      	add	r3, r7
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a50:	e713      	b.n	800387a <HAL_ADCEx_InjectedConfigChannel+0x2fe>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a52:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8003a54:	f046 0620 	orr.w	r6, r6, #32
 8003a58:	65e6      	str	r6, [r4, #92]	; 0x5c
 8003a5a:	e63f      	b.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x160>
 8003a5c:	fa93 f5a3 	rbit	r5, r3
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003a60:	fab5 f585 	clz	r5, r5
 8003a64:	42af      	cmp	r7, r5
 8003a66:	d0b0      	beq.n	80039ca <HAL_ADCEx_InjectedConfigChannel+0x44e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a68:	68b5      	ldr	r5, [r6, #8]
 8003a6a:	68b7      	ldr	r7, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003a6c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8003a70:	fa93 f5a3 	rbit	r5, r3
 8003a74:	fab5 f585 	clz	r5, r5
 8003a78:	42bd      	cmp	r5, r7
 8003a7a:	f106 0c0c 	add.w	ip, r6, #12
 8003a7e:	d112      	bne.n	8003aa6 <HAL_ADCEx_InjectedConfigChannel+0x52a>
  MODIFY_REG(*preg,
 8003a80:	68b3      	ldr	r3, [r6, #8]
 8003a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a86:	60b3      	str	r3, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003a88:	680b      	ldr	r3, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a8a:	f8dc 5000 	ldr.w	r5, [ip]
 8003a8e:	f8dc 6000 	ldr.w	r6, [ip]
 8003a92:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8003a96:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003a9a:	b175      	cbz	r5, 8003aba <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8003a9c:	fa93 f5a3 	rbit	r5, r3
 8003aa0:	fab5 f585 	clz	r5, r5
 8003aa4:	e7a8      	b.n	80039f8 <HAL_ADCEx_InjectedConfigChannel+0x47c>
 8003aa6:	68f5      	ldr	r5, [r6, #12]
 8003aa8:	68f6      	ldr	r6, [r6, #12]
 8003aaa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003aae:	e7f5      	b.n	8003a9c <HAL_ADCEx_InjectedConfigChannel+0x520>
 8003ab0:	68b7      	ldr	r7, [r6, #8]
 8003ab2:	68b7      	ldr	r7, [r6, #8]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003ab4:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8003ab8:	e796      	b.n	80039e8 <HAL_ADCEx_InjectedConfigChannel+0x46c>
 8003aba:	f3c3 6584 	ubfx	r5, r3, #26, #5
 8003abe:	e79b      	b.n	80039f8 <HAL_ADCEx_InjectedConfigChannel+0x47c>

08003ac0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ac0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003ac4:	2a01      	cmp	r2, #1
 8003ac6:	d047      	beq.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
{
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003aca:	6804      	ldr	r4, [r0, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003acc:	680e      	ldr	r6, [r1, #0]
 8003ace:	4603      	mov	r3, r0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ad0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8003ad4:	f04f 0001 	mov.w	r0, #1
 8003ad8:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003adc:	d007      	beq.n	8003aee <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae0:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae2:	f042 0220 	orr.w	r2, r2, #32
 8003ae6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8003ae8:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aee:	4d27      	ldr	r5, [pc, #156]	; (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8003af0:	68aa      	ldr	r2, [r5, #8]
 8003af2:	0752      	lsls	r2, r2, #29
 8003af4:	d509      	bpl.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003af6:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003b00:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0a:	68a0      	ldr	r0, [r4, #8]
 8003b0c:	f010 0004 	ands.w	r0, r0, #4
 8003b10:	d1f2      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b12:	b31e      	cbz	r6, 8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b14:	f8df e078 	ldr.w	lr, [pc, #120]	; 8003b90 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003b18:	684f      	ldr	r7, [r1, #4]
 8003b1a:	f8de 2008 	ldr.w	r2, [lr, #8]
 8003b1e:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8003b22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b26:	433a      	orrs	r2, r7
 8003b28:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8003b2c:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b30:	68a2      	ldr	r2, [r4, #8]
 8003b32:	07d4      	lsls	r4, r2, #31
 8003b34:	d427      	bmi.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 8003b36:	68a8      	ldr	r0, [r5, #8]
 8003b38:	f010 0001 	ands.w	r0, r0, #1
 8003b3c:	d121      	bne.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        MODIFY_REG(tmpADC_Common->CCR,
 8003b3e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8003b42:	688c      	ldr	r4, [r1, #8]
 8003b44:	f422 6171 	bic.w	r1, r2, #3856	; 0xf10
 8003b48:	f021 010f 	bic.w	r1, r1, #15
 8003b4c:	ea46 0204 	orr.w	r2, r6, r4
 8003b50:	430a      	orrs	r2, r1
 8003b52:	f8ce 2008 	str.w	r2, [lr, #8]
 8003b56:	e7d4      	b.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 8003b58:	2002      	movs	r0, #2
}
 8003b5a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8003b5e:	6891      	ldr	r1, [r2, #8]
 8003b60:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003b64:	6091      	str	r1, [r2, #8]
 8003b66:	68a0      	ldr	r0, [r4, #8]
 8003b68:	68a9      	ldr	r1, [r5, #8]
 8003b6a:	07c9      	lsls	r1, r1, #31
 8003b6c:	f000 0001 	and.w	r0, r0, #1
 8003b70:	d407      	bmi.n	8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b72:	b930      	cbnz	r0, 8003b82 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b74:	6891      	ldr	r1, [r2, #8]
 8003b76:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003b7a:	f021 010f 	bic.w	r1, r1, #15
 8003b7e:	6091      	str	r1, [r2, #8]
 8003b80:	e7bf      	b.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b82:	2000      	movs	r0, #0
 8003b84:	e7bd      	b.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b86:	68aa      	ldr	r2, [r5, #8]
 8003b88:	e7bb      	b.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b8a:	bf00      	nop
 8003b8c:	50000100 	.word	0x50000100
 8003b90:	50000300 	.word	0x50000300

08003b94 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b96:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d054      	beq.n	8003c4a <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003ba0:	6802      	ldr	r2, [r0, #0]
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	db4f      	blt.n	8003c4a <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003baa:	7f43      	ldrb	r3, [r0, #29]
 8003bac:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d07e      	beq.n	8003cb2 <HAL_COMP_Init+0x11e>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8003bb4:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 8003bb8:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 8003bbc:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003bbe:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 8003bc0:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 8003bc2:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003bc4:	6816      	ldr	r6, [r2, #0]
 8003bc6:	4940      	ldr	r1, [pc, #256]	; (8003cc8 <HAL_COMP_Init+0x134>)
               | hcomp->Init.Hysteresis
 8003bc8:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 8003bca:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8003bcc:	4031      	ands	r1, r6
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	0218      	lsls	r0, r3, #8
 8003bd6:	d501      	bpl.n	8003bdc <HAL_COMP_Init+0x48>
 8003bd8:	023b      	lsls	r3, r7, #8
 8003bda:	d54e      	bpl.n	8003c7a <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_COMP_Init+0x138>)
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d062      	beq.n	8003ca8 <HAL_COMP_Init+0x114>
 8003be2:	3304      	adds	r3, #4
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d06a      	beq.n	8003cbe <HAL_COMP_Init+0x12a>
 8003be8:	3304      	adds	r3, #4
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf15      	itete	ne
 8003bee:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 8003bf2:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8003bf6:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 8003bfa:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003bfe:	69a3      	ldr	r3, [r4, #24]
 8003c00:	079f      	lsls	r7, r3, #30
 8003c02:	d025      	beq.n	8003c50 <HAL_COMP_Init+0xbc>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003c04:	4d32      	ldr	r5, [pc, #200]	; (8003cd0 <HAL_COMP_Init+0x13c>)
 8003c06:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003c08:	06de      	lsls	r6, r3, #27
 8003c0a:	bf4c      	ite	mi
 8003c0c:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003c0e:	4010      	andpl	r0, r2
 8003c10:	60a8      	str	r0, [r5, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003c12:	4d2f      	ldr	r5, [pc, #188]	; (8003cd0 <HAL_COMP_Init+0x13c>)
 8003c14:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003c16:	069f      	lsls	r7, r3, #26
 8003c18:	bf4c      	ite	mi
 8003c1a:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003c1c:	4010      	andpl	r0, r2
 8003c1e:	60e8      	str	r0, [r5, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003c20:	482b      	ldr	r0, [pc, #172]	; (8003cd0 <HAL_COMP_Init+0x13c>)
 8003c22:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003c24:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003c26:	079e      	lsls	r6, r3, #30
 8003c28:	bf4c      	ite	mi
 8003c2a:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003c2c:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003c2e:	07db      	lsls	r3, r3, #31
 8003c30:	6045      	str	r5, [r0, #4]
 8003c32:	d51d      	bpl.n	8003c70 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <HAL_COMP_Init+0x13c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003c3c:	7f63      	ldrb	r3, [r4, #29]
 8003c3e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003c42:	b18b      	cbz	r3, 8003c68 <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8003c46:	b003      	add	sp, #12
 8003c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8003c4a:	2001      	movs	r0, #1
}
 8003c4c:	b003      	add	sp, #12
 8003c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <HAL_COMP_Init+0x13c>)
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	4011      	ands	r1, r2
 8003c56:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003c5e:	7f63      	ldrb	r3, [r4, #29]
 8003c60:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ed      	bne.n	8003c44 <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	7763      	strb	r3, [r4, #29]
}
 8003c6c:	b003      	add	sp, #12
 8003c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c70:	4917      	ldr	r1, [pc, #92]	; (8003cd0 <HAL_COMP_Init+0x13c>)
 8003c72:	680b      	ldr	r3, [r1, #0]
 8003c74:	401a      	ands	r2, r3
 8003c76:	600a      	str	r2, [r1, #0]
 8003c78:	e7f1      	b.n	8003c5e <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_COMP_Init+0x140>)
 8003c7c:	4916      	ldr	r1, [pc, #88]	; (8003cd8 <HAL_COMP_Init+0x144>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	fba1 1303 	umull	r1, r3, r1, r3
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8003c90:	9b01      	ldr	r3, [sp, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0a2      	beq.n	8003bdc <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8003c9c:	9b01      	ldr	r3, [sp, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f9      	bne.n	8003c96 <HAL_COMP_Init+0x102>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_COMP_Init+0x138>)
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d19c      	bne.n	8003be2 <HAL_COMP_Init+0x4e>
 8003ca8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003cac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cb0:	e7a5      	b.n	8003bfe <HAL_COMP_Init+0x6a>
      hcomp->Lock = HAL_UNLOCKED;
 8003cb2:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8003cb4:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8003cb6:	f7fe f97d 	bl	8001fb4 <HAL_COMP_MspInit>
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	e77a      	b.n	8003bb4 <HAL_COMP_Init+0x20>
 8003cbe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cc6:	e79a      	b.n	8003bfe <HAL_COMP_Init+0x6a>
 8003cc8:	ff007e0f 	.word	0xff007e0f
 8003ccc:	40010200 	.word	0x40010200
 8003cd0:	40010400 	.word	0x40010400
 8003cd4:	200005dc 	.word	0x200005dc
 8003cd8:	053e2d63 	.word	0x053e2d63

08003cdc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003cde:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8003ce4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce6:	0200      	lsls	r0, r0, #8
 8003ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cec:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003cf4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003cf6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_NVIC_SetPriority+0x64>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d08:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0a:	f1c3 0507 	rsb	r5, r3, #7
 8003d0e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d10:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d14:	bf28      	it	cs
 8003d16:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d18:	2c06      	cmp	r4, #6
 8003d1a:	d919      	bls.n	8003d50 <HAL_NVIC_SetPriority+0x50>
 8003d1c:	3b03      	subs	r3, #3
 8003d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003d22:	409c      	lsls	r4, r3
 8003d24:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	40aa      	lsls	r2, r5
 8003d2e:	ea21 0102 	bic.w	r1, r1, r2
 8003d32:	fa01 f203 	lsl.w	r2, r1, r3
 8003d36:	4322      	orrs	r2, r4
 8003d38:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	db0a      	blt.n	8003d56 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d40:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d44:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d48:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d4c:	bc30      	pop	{r4, r5}
 8003d4e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d50:	2400      	movs	r4, #0
 8003d52:	4623      	mov	r3, r4
 8003d54:	e7e8      	b.n	8003d28 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_NVIC_SetPriority+0x68>)
 8003d58:	f000 000f 	and.w	r0, r0, #15
 8003d5c:	4403      	add	r3, r0
 8003d5e:	761a      	strb	r2, [r3, #24]
 8003d60:	bc30      	pop	{r4, r5}
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	e000ecfc 	.word	0xe000ecfc

08003d6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	db07      	blt.n	8003d80 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d70:	f000 011f 	and.w	r1, r0, #31
 8003d74:	2301      	movs	r3, #1
 8003d76:	0940      	lsrs	r0, r0, #5
 8003d78:	4a02      	ldr	r2, [pc, #8]	; (8003d84 <HAL_NVIC_EnableIRQ+0x18>)
 8003d7a:	408b      	lsls	r3, r1
 8003d7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000e100 	.word	0xe000e100

08003d88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	3801      	subs	r0, #1
 8003d8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003d8e:	d20e      	bcs.n	8003dae <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d92:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d94:	4c08      	ldr	r4, [pc, #32]	; (8003db8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	20f0      	movs	r0, #240	; 0xf0
 8003d9a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003dae:	2001      	movs	r0, #1
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e010 	.word	0xe000e010
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d03c      	beq.n	8003e3a <HAL_CRC_Init+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003dc0:	7f43      	ldrb	r3, [r0, #29]
{
 8003dc2:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003dc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dc8:	4604      	mov	r4, r0
 8003dca:	b1fb      	cbz	r3, 8003e0c <HAL_CRC_Init+0x50>
  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003dcc:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003dce:	2202      	movs	r2, #2
 8003dd0:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003dd2:	bb1b      	cbnz	r3, 8003e1c <HAL_CRC_Init+0x60>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <HAL_CRC_Init+0x84>)
 8003dd8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	f022 0218 	bic.w	r2, r2, #24
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003de2:	7962      	ldrb	r2, [r4, #5]
 8003de4:	bb22      	cbnz	r2, 8003e30 <HAL_CRC_Init+0x74>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003dec:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003df6:	4311      	orrs	r1, r2
 8003df8:	6099      	str	r1, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e00:	4302      	orrs	r2, r0
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e02:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003e04:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003e06:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8003e08:	7761      	strb	r1, [r4, #29]
}
 8003e0a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003e0c:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003e0e:	f7fe f935 	bl	800207c <HAL_CRC_MspInit>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e12:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e14:	2202      	movs	r2, #2
 8003e16:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0db      	beq.n	8003dd4 <HAL_CRC_Init+0x18>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e1c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003e20:	4620      	mov	r0, r4
 8003e22:	f000 f80f 	bl	8003e44 <HAL_CRCEx_Polynomial_Set>
 8003e26:	b930      	cbnz	r0, 8003e36 <HAL_CRC_Init+0x7a>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003e28:	7962      	ldrb	r2, [r4, #5]
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	2a00      	cmp	r2, #0
 8003e2e:	d0da      	beq.n	8003de6 <HAL_CRC_Init+0x2a>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003e30:	6922      	ldr	r2, [r4, #16]
 8003e32:	611a      	str	r2, [r3, #16]
 8003e34:	e7da      	b.n	8003dec <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8003e36:	2001      	movs	r0, #1
}
 8003e38:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	04c11db7 	.word	0x04c11db7

08003e44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003e44:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e46:	231e      	movs	r3, #30
 8003e48:	e002      	b.n	8003e50 <HAL_CRCEx_Polynomial_Set+0xc>
 8003e4a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e4e:	d321      	bcc.n	8003e94 <HAL_CRCEx_Polynomial_Set+0x50>
 8003e50:	fa21 f403 	lsr.w	r4, r1, r3
 8003e54:	07e4      	lsls	r4, r4, #31
 8003e56:	d5f8      	bpl.n	8003e4a <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 8003e58:	2a18      	cmp	r2, #24
 8003e5a:	d81d      	bhi.n	8003e98 <HAL_CRCEx_Polynomial_Set+0x54>
 8003e5c:	e8df f002 	tbb	[pc, r2]
 8003e60:	1c1c1c0f 	.word	0x1c1c1c0f
 8003e64:	1c1c1c1c 	.word	0x1c1c1c1c
 8003e68:	1c1c1c23 	.word	0x1c1c1c23
 8003e6c:	1c1c1c1c 	.word	0x1c1c1c1c
 8003e70:	1c1c1c0d 	.word	0x1c1c1c0d
 8003e74:	1c1c1c1c 	.word	0x1c1c1c1c
 8003e78:	20          	.byte	0x20
 8003e79:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e7a:	2b07      	cmp	r3, #7
 8003e7c:	d80c      	bhi.n	8003e98 <HAL_CRCEx_Polynomial_Set+0x54>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e7e:	6800      	ldr	r0, [r0, #0]
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8003e80:	f85d 4b04 	ldr.w	r4, [sp], #4
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e84:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e86:	6883      	ldr	r3, [r0, #8]
 8003e88:	f023 0318 	bic.w	r3, r3, #24
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	6082      	str	r2, [r0, #8]
 8003e90:	2000      	movs	r0, #0
}
 8003e92:	4770      	bx	lr
  switch (PolyLength)
 8003e94:	2a00      	cmp	r2, #0
 8003e96:	d0f2      	beq.n	8003e7e <HAL_CRCEx_Polynomial_Set+0x3a>
      status =  HAL_ERROR;
 8003e98:	2001      	movs	r0, #1
}
 8003e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e9e:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d9ec      	bls.n	8003e7e <HAL_CRCEx_Polynomial_Set+0x3a>
 8003ea4:	e7f8      	b.n	8003e98 <HAL_CRCEx_Polynomial_Set+0x54>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d9e9      	bls.n	8003e7e <HAL_CRCEx_Polynomial_Set+0x3a>
 8003eaa:	e7f5      	b.n	8003e98 <HAL_CRCEx_Polynomial_Set+0x54>

08003eac <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003eac:	b188      	cbz	r0, 8003ed2 <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003eae:	7903      	ldrb	r3, [r0, #4]
{
 8003eb0:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8003eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	b13b      	cbz	r3, 8003eca <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003eba:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ebc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ebe:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ec0:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003ec2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ec4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003ec6:	7122      	strb	r2, [r4, #4]
}
 8003ec8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003eca:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003ecc:	f7fe f8ec 	bl	80020a8 <HAL_DAC_MspInit>
 8003ed0:	e7f3      	b.n	8003eba <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003ed2:	2001      	movs	r0, #1
}
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop

08003edc <HAL_DAC_IRQHandler>:
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003edc:	6803      	ldr	r3, [r0, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	0491      	lsls	r1, r2, #18
{
 8003ee2:	b510      	push	{r4, lr}
 8003ee4:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003ee6:	d502      	bpl.n	8003eee <HAL_DAC_IRQHandler+0x12>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	0492      	lsls	r2, r2, #18
 8003eec:	d418      	bmi.n	8003f20 <HAL_DAC_IRQHandler+0x44>
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	0091      	lsls	r1, r2, #2
 8003ef2:	d502      	bpl.n	8003efa <HAL_DAC_IRQHandler+0x1e>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	d400      	bmi.n	8003efc <HAL_DAC_IRQHandler+0x20>
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
}
 8003efa:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8003efc:	2204      	movs	r2, #4
 8003efe:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003f00:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003f02:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003f06:	f042 0202 	orr.w	r2, r2, #2
 8003f0a:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003f0c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003f14:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003f1c:	f000 b8fa 	b.w	8004114 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8003f20:	2204      	movs	r2, #4
 8003f22:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003f24:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003f30:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f38:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003f3a:	f7ff ffcd 	bl	8003ed8 <HAL_DAC_DMAUnderrunCallbackCh1>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	e7d5      	b.n	8003eee <HAL_DAC_IRQHandler+0x12>
 8003f42:	bf00      	nop

08003f44 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f44:	7943      	ldrb	r3, [r0, #5]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f000 80c4 	beq.w	80040d4 <HAL_DAC_ConfigChannel+0x190>
{
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003f50:	688f      	ldr	r7, [r1, #8]
 8003f52:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f54:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8003f56:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f58:	2f04      	cmp	r7, #4
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	4605      	mov	r5, r0
  __HAL_LOCK(hdac);
 8003f5e:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f60:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f62:	d079      	beq.n	8004058 <HAL_DAC_ConfigChannel+0x114>
 8003f64:	6803      	ldr	r3, [r0, #0]
 8003f66:	f004 0410 	and.w	r4, r4, #16
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003f6a:	69f2      	ldr	r2, [r6, #28]
 8003f6c:	2a01      	cmp	r2, #1
 8003f6e:	d069      	beq.n	8004044 <HAL_DAC_ConfigChannel+0x100>
 8003f70:	e9d6 c005 	ldrd	ip, r0, [r6, #20]
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003f76:	2107      	movs	r1, #7
 8003f78:	40a1      	lsls	r1, r4
 8003f7a:	f422 4840 	bic.w	r8, r2, #49152	; 0xc000
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003f7e:	07c2      	lsls	r2, r0, #31
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003f80:	ea6f 0101 	mvn.w	r1, r1
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003f84:	d55a      	bpl.n	800403c <HAL_DAC_ConfigChannel+0xf8>
  {
    connectOnChip = 0x00000000UL;
 8003f86:	2000      	movs	r0, #0
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003f88:	f44f 7280 	mov.w	r2, #256	; 0x100
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003f8c:	ea47 070c 	orr.w	r7, r7, ip
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003f90:	40a2      	lsls	r2, r4
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003f92:	f896 c004 	ldrb.w	ip, [r6, #4]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003f96:	4307      	orrs	r7, r0
 8003f98:	ea01 0108 	and.w	r1, r1, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003f9c:	43d2      	mvns	r2, r2
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f9e:	7970      	ldrb	r0, [r6, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003fa0:	f1bc 0f01 	cmp.w	ip, #1
 8003fa4:	ea02 0201 	and.w	r2, r2, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003fa8:	f44f 7800 	mov.w	r8, #512	; 0x200
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003fac:	6831      	ldr	r1, [r6, #0]
 8003fae:	bf08      	it	eq
 8003fb0:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003fb4:	fa08 f804 	lsl.w	r8, r8, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003fb8:	2801      	cmp	r0, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003fba:	ea6f 0808 	mvn.w	r8, r8
 8003fbe:	bf08      	it	eq
 8003fc0:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003fc4:	2902      	cmp	r1, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003fc6:	ea08 0802 	and.w	r8, r8, r2
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003fca:	f000 8085 	beq.w	80040d8 <HAL_DAC_ConfigChannel+0x194>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003fce:	ea48 0801 	orr.w	r8, r8, r1
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fd2:	40a7      	lsls	r7, r4
 8003fd4:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003fd8:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003fda:	6818      	ldr	r0, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003fdc:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003fe0:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8003fe4:	40a6      	lsls	r6, r4
 8003fe6:	ea20 0006 	bic.w	r0, r0, r6
 8003fea:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8003fec:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003fee:	f640 76fe 	movw	r6, #4094	; 0xffe
 8003ff2:	40a6      	lsls	r6, r4
 8003ff4:	ea20 0606 	bic.w	r6, r0, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ff8:	fa01 f004 	lsl.w	r0, r1, r4
 8003ffc:	4330      	orrs	r0, r6
  hdac->Instance->CR = tmpreg1;
 8003ffe:	6018      	str	r0, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	26c0      	movs	r6, #192	; 0xc0
 8004004:	40a6      	lsls	r6, r4
 8004006:	ea20 0006 	bic.w	r0, r0, r6
 800400a:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800400c:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800400e:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004010:	f3c1 0183 	ubfx	r1, r1, #2, #4
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004014:	f640 760f 	movw	r6, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004018:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800401c:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800401e:	fa06 f104 	lsl.w	r1, r6, r4
 8004022:	fa02 f404 	lsl.w	r4, r2, r4
 8004026:	ea20 0201 	bic.w	r2, r0, r1
 800402a:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800402c:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800402e:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004030:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8004032:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8004034:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 8004036:	716a      	strb	r2, [r5, #5]
}
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800403c:	0782      	lsls	r2, r0, #30
 800403e:	d545      	bpl.n	80040cc <HAL_DAC_ConfigChannel+0x188>
    connectOnChip = DAC_MCR_MODE1_0;
 8004040:	2001      	movs	r0, #1
 8004042:	e7a1      	b.n	8003f88 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 8004044:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004046:	6a32      	ldr	r2, [r6, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004048:	201f      	movs	r0, #31
 800404a:	40a0      	lsls	r0, r4
 800404c:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004050:	40a2      	lsls	r2, r4
 8004052:	430a      	orrs	r2, r1
    hdac->Instance->CCR = tmpreg1;
 8004054:	639a      	str	r2, [r3, #56]	; 0x38
 8004056:	e78b      	b.n	8003f70 <HAL_DAC_ConfigChannel+0x2c>
    if (Channel == DAC_CHANNEL_1)
 8004058:	b9bc      	cbnz	r4, 800408a <HAL_DAC_ConfigChannel+0x146>
      tickstart = HAL_GetTick();
 800405a:	f7fe ff55 	bl	8002f08 <HAL_GetTick>
 800405e:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004060:	e004      	b.n	800406c <HAL_DAC_ConfigChannel+0x128>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004062:	f7fe ff51 	bl	8002f08 <HAL_GetTick>
 8004066:	1bc0      	subs	r0, r0, r7
 8004068:	2801      	cmp	r0, #1
 800406a:	d83e      	bhi.n	80040ea <HAL_DAC_ConfigChannel+0x1a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	0419      	lsls	r1, r3, #16
 8004072:	d4f6      	bmi.n	8004062 <HAL_DAC_ConfigChannel+0x11e>
      HAL_Delay(1);
 8004074:	2001      	movs	r0, #1
 8004076:	f7fe ff4d 	bl	8002f14 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800407a:	682b      	ldr	r3, [r5, #0]
 800407c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
 8004080:	e00d      	b.n	800409e <HAL_DAC_ConfigChannel+0x15a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004082:	f7fe ff41 	bl	8002f08 <HAL_GetTick>
 8004086:	2801      	cmp	r0, #1
 8004088:	d82f      	bhi.n	80040ea <HAL_DAC_ConfigChannel+0x1a6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	dbf7      	blt.n	8004082 <HAL_DAC_ConfigChannel+0x13e>
      HAL_Delay(1U);
 8004092:	2001      	movs	r0, #1
 8004094:	f7fe ff3e 	bl	8002f14 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800409e:	f004 0410 	and.w	r4, r4, #16
 80040a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80040a6:	68b7      	ldr	r7, [r6, #8]
 80040a8:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80040ac:	40a0      	lsls	r0, r4
 80040ae:	ea22 0200 	bic.w	r2, r2, r0
 80040b2:	40a1      	lsls	r1, r4
 80040b4:	430a      	orrs	r2, r1
 80040b6:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80040b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ba:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80040bc:	20ff      	movs	r0, #255	; 0xff
 80040be:	40a0      	lsls	r0, r4
 80040c0:	ea22 0200 	bic.w	r2, r2, r0
 80040c4:	40a1      	lsls	r1, r4
 80040c6:	430a      	orrs	r2, r1
 80040c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80040ca:	e74e      	b.n	8003f6a <HAL_DAC_ConfigChannel+0x26>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80040cc:	fabc f08c 	clz	r0, ip
 80040d0:	0940      	lsrs	r0, r0, #5
 80040d2:	e759      	b.n	8003f88 <HAL_DAC_ConfigChannel+0x44>
  __HAL_LOCK(hdac);
 80040d4:	2002      	movs	r0, #2
}
 80040d6:	4770      	bx	lr
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80040d8:	f000 fef0 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_DAC_ConfigChannel+0x1c8>)
 80040de:	4298      	cmp	r0, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_DAC_ConfigChannel+0x1b8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80040e2:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80040e6:	682b      	ldr	r3, [r5, #0]
 80040e8:	e773      	b.n	8003fd2 <HAL_DAC_ConfigChannel+0x8e>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040ea:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040ec:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040ee:	f043 0308 	orr.w	r3, r3, #8
 80040f2:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 80040f4:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040f6:	712a      	strb	r2, [r5, #4]
}
 80040f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_DAC_ConfigChannel+0x1cc>)
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	4290      	cmp	r0, r2
 8004102:	f67f af66 	bls.w	8003fd2 <HAL_DAC_ConfigChannel+0x8e>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004106:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 800410a:	e762      	b.n	8003fd2 <HAL_DAC_ConfigChannel+0x8e>
 800410c:	09896800 	.word	0x09896800
 8004110:	04c4b400 	.word	0x04c4b400

08004114 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop

08004118 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004118:	2800      	cmp	r0, #0
 800411a:	f000 80d2 	beq.w	80042c2 <HAL_FDCAN_Init+0x1aa>
{
 800411e:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004120:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004124:	4604      	mov	r4, r0
 8004126:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80c4 	beq.w	80042b8 <HAL_FDCAN_Init+0x1a0>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	6993      	ldr	r3, [r2, #24]
 8004134:	f023 0310 	bic.w	r3, r3, #16
 8004138:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800413a:	f7fe fee5 	bl	8002f08 <HAL_GetTick>
 800413e:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004140:	e005      	b.n	800414e <HAL_FDCAN_Init+0x36>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004142:	f7fe fee1 	bl	8002f08 <HAL_GetTick>
 8004146:	1b40      	subs	r0, r0, r5
 8004148:	280a      	cmp	r0, #10
 800414a:	f200 80ac 	bhi.w	80042a6 <HAL_FDCAN_Init+0x18e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	0711      	lsls	r1, r2, #28
 8004154:	d4f5      	bmi.n	8004142 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800415e:	f7fe fed3 	bl	8002f08 <HAL_GetTick>
 8004162:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004164:	e005      	b.n	8004172 <HAL_FDCAN_Init+0x5a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004166:	f7fe fecf 	bl	8002f08 <HAL_GetTick>
 800416a:	1b40      	subs	r0, r0, r5
 800416c:	280a      	cmp	r0, #10
 800416e:	f200 809a 	bhi.w	80042a6 <HAL_FDCAN_Init+0x18e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	07d2      	lsls	r2, r2, #31
 8004178:	d5f5      	bpl.n	8004166 <HAL_FDCAN_Init+0x4e>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800417a:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800417c:	4958      	ldr	r1, [pc, #352]	; (80042e0 <HAL_FDCAN_Init+0x1c8>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800417e:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8004182:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004184:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8004186:	f000 80a3 	beq.w	80042d0 <HAL_FDCAN_Init+0x1b8>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800418a:	7c22      	ldrb	r2, [r4, #16]
 800418c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	bf0c      	ite	eq
 8004192:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004196:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800419a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800419c:	7c62      	ldrb	r2, [r4, #17]
 800419e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	bf0c      	ite	eq
 80041a4:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041a8:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 80041ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80041ae:	7ca2      	ldrb	r2, [r4, #18]
 80041b0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	bf0c      	ite	eq
 80041b6:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041ba:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 80041be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041c0:	699a      	ldr	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80041c2:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041ca:	432a      	orrs	r2, r5
 80041cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80041d4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80041d6:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80041d8:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80041da:	f022 0210 	bic.w	r2, r2, #16
 80041de:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80041e0:	d071      	beq.n	80042c6 <HAL_FDCAN_Init+0x1ae>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80041e2:	b179      	cbz	r1, 8004204 <HAL_FDCAN_Init+0xec>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80041e4:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80041e6:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80041e8:	d076      	beq.n	80042d8 <HAL_FDCAN_Init+0x1c0>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80041ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041ee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80041f0:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80041f2:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80041f4:	f042 0210 	orr.w	r2, r2, #16
 80041f8:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80041fa:	d103      	bne.n	8004204 <HAL_FDCAN_Init+0xec>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	f042 0220 	orr.w	r2, r2, #32
 8004202:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004204:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004208:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800420a:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800420c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800420e:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004210:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004214:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004216:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004218:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800421a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800421c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004220:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004224:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004226:	d10e      	bne.n	8004246 <HAL_FDCAN_Init+0x12e>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004228:	e9d4 520b 	ldrd	r5, r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800422c:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004230:	3a01      	subs	r2, #1
 8004232:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004234:	3d01      	subs	r5, #1
 8004236:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800423a:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800423c:	4302      	orrs	r2, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800423e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004240:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004244:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004246:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800424a:	6be5      	ldr	r5, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800424c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800424e:	4825      	ldr	r0, [pc, #148]	; (80042e4 <HAL_FDCAN_Init+0x1cc>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004250:	432a      	orrs	r2, r5
 8004252:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004256:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800425a:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800425c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004260:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004268:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800426c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800426e:	4d1e      	ldr	r5, [pc, #120]	; (80042e8 <HAL_FDCAN_Init+0x1d0>)
 8004270:	6465      	str	r5, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004276:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800427a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800427e:	491b      	ldr	r1, [pc, #108]	; (80042ec <HAL_FDCAN_Init+0x1d4>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_FDCAN_Init+0x1d8>)
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004282:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_FDCAN_Init+0x1dc>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004284:	3540      	adds	r5, #64	; 0x40
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004286:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800428a:	e9c4 5112 	strd	r5, r1, [r4, #72]	; 0x48
 800428e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004292:	2100      	movs	r1, #0
 8004294:	f005 fd62 	bl	8009d5c <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8004298:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800429a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800429c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->LatestTxFifoQRequest = 0U;
 800429e:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80042a0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80042a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042a8:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 80042b0:	2001      	movs	r0, #1
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042b2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80042b8:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80042bc:	f7fd ff2e 	bl	800211c <HAL_FDCAN_MspInit>
 80042c0:	e736      	b.n	8004130 <HAL_FDCAN_Init+0x18>
    return HAL_ERROR;
 80042c2:	2001      	movs	r0, #1
}
 80042c4:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	f042 0204 	orr.w	r2, r2, #4
 80042cc:	619a      	str	r2, [r3, #24]
 80042ce:	e799      	b.n	8004204 <HAL_FDCAN_Init+0xec>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80042d0:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_FDCAN_Init+0x1e0>)
 80042d2:	6861      	ldr	r1, [r4, #4]
 80042d4:	6011      	str	r1, [r2, #0]
 80042d6:	e758      	b.n	800418a <HAL_FDCAN_Init+0x72>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80042d8:	f042 0220 	orr.w	r2, r2, #32
 80042dc:	619a      	str	r2, [r3, #24]
 80042de:	e791      	b.n	8004204 <HAL_FDCAN_Init+0xec>
 80042e0:	40006400 	.word	0x40006400
 80042e4:	4000a400 	.word	0x4000a400
 80042e8:	4000a470 	.word	0x4000a470
 80042ec:	4000a588 	.word	0x4000a588
 80042f0:	4000a678 	.word	0x4000a678
 80042f4:	4000a660 	.word	0x4000a660
 80042f8:	40006500 	.word	0x40006500

080042fc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042fc:	f8d1 c000 	ldr.w	ip, [r1]
 8004300:	f1bc 0f00 	cmp.w	ip, #0
 8004304:	f000 80c7 	beq.w	8004496 <HAL_GPIO_Init+0x19a>
{
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800430c:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 80044c4 <HAL_GPIO_Init+0x1c8>
{
 8004310:	b083      	sub	sp, #12
 8004312:	4688      	mov	r8, r1
  uint32_t position = 0x00U;
 8004314:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004316:	f04f 0901 	mov.w	r9, #1
 800431a:	fa09 f205 	lsl.w	r2, r9, r5
    if (iocurrent != 0x00u)
 800431e:	ea12 060c 	ands.w	r6, r2, ip
 8004322:	d074      	beq.n	800440e <HAL_GPIO_Init+0x112>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004328:	f021 0a10 	bic.w	sl, r1, #16
 800432c:	f1ba 0f02 	cmp.w	sl, #2
 8004330:	d074      	beq.n	800441c <HAL_GPIO_Init+0x120>
 8004332:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004334:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8004336:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800433a:	40bb      	lsls	r3, r7
 800433c:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800433e:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004342:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004346:	40bc      	lsls	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004348:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800434c:	ea44 040b 	orr.w	r4, r4, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004350:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8004354:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004356:	f240 8082 	bls.w	800445e <HAL_GPIO_Init+0x162>
      temp = GPIOx->PUPDR;
 800435a:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800435c:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004360:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004362:	40ba      	lsls	r2, r7
 8004364:	431a      	orrs	r2, r3
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004366:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 8004368:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800436a:	d550      	bpl.n	800440e <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436c:	4a4f      	ldr	r2, [pc, #316]	; (80044ac <HAL_GPIO_Init+0x1b0>)
 800436e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6613      	str	r3, [r2, #96]	; 0x60
 8004376:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004378:	f025 0403 	bic.w	r4, r5, #3
 800437c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8004388:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800438a:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004390:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	270f      	movs	r7, #15
 8004396:	409f      	lsls	r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004398:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800439c:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043a0:	d013      	beq.n	80043ca <HAL_GPIO_Init+0xce>
 80043a2:	4f43      	ldr	r7, [pc, #268]	; (80044b0 <HAL_GPIO_Init+0x1b4>)
 80043a4:	42b8      	cmp	r0, r7
 80043a6:	d072      	beq.n	800448e <HAL_GPIO_Init+0x192>
 80043a8:	4f42      	ldr	r7, [pc, #264]	; (80044b4 <HAL_GPIO_Init+0x1b8>)
 80043aa:	42b8      	cmp	r0, r7
 80043ac:	d06a      	beq.n	8004484 <HAL_GPIO_Init+0x188>
 80043ae:	4f42      	ldr	r7, [pc, #264]	; (80044b8 <HAL_GPIO_Init+0x1bc>)
 80043b0:	42b8      	cmp	r0, r7
 80043b2:	d071      	beq.n	8004498 <HAL_GPIO_Init+0x19c>
 80043b4:	4f41      	ldr	r7, [pc, #260]	; (80044bc <HAL_GPIO_Init+0x1c0>)
 80043b6:	42b8      	cmp	r0, r7
 80043b8:	d073      	beq.n	80044a2 <HAL_GPIO_Init+0x1a6>
 80043ba:	4f41      	ldr	r7, [pc, #260]	; (80044c0 <HAL_GPIO_Init+0x1c4>)
 80043bc:	42b8      	cmp	r0, r7
 80043be:	bf0c      	ite	eq
 80043c0:	2705      	moveq	r7, #5
 80043c2:	2706      	movne	r7, #6
 80043c4:	fa07 f303 	lsl.w	r3, r7, r3
 80043c8:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ca:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR1;
 80043cc:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 80043d0:	43f2      	mvns	r2, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043d2:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 80043d4:	bf54      	ite	pl
 80043d6:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80043d8:	4333      	orrmi	r3, r6
        }
        EXTI->IMR1 = temp;
 80043da:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 80043de:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043e2:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 80043e4:	bf54      	ite	pl
 80043e6:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80043e8:	4333      	orrmi	r3, r6
        }
        EXTI->EMR1 = temp;
 80043ea:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043ee:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043f2:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 80043f4:	bf54      	ite	pl
 80043f6:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80043f8:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR1 = temp;
 80043fa:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 80043fe:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004402:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 8004404:	bf54      	ite	pl
 8004406:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8004408:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR1 = temp;
 800440a:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 800440e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004410:	fa3c f305 	lsrs.w	r3, ip, r5
 8004414:	d181      	bne.n	800431a <HAL_GPIO_Init+0x1e>
  }
}
 8004416:	b003      	add	sp, #12
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 800441c:	08ef      	lsrs	r7, r5, #3
 800441e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004422:	f005 0407 	and.w	r4, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8004426:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004428:	00a4      	lsls	r4, r4, #2
 800442a:	f04f 0a0f 	mov.w	sl, #15
 800442e:	fa0a fb04 	lsl.w	fp, sl, r4
 8004432:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004436:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800443a:	40a3      	lsls	r3, r4
 800443c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004440:	623b      	str	r3, [r7, #32]
 8004442:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004444:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8004446:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800444a:	40bb      	lsls	r3, r7
 800444c:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800444e:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004452:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004456:	40bc      	lsls	r4, r7
 8004458:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->MODER = temp;
 800445c:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800445e:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004460:	ea04 0a03 	and.w	sl, r4, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004464:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8004468:	40bc      	lsls	r4, r7
 800446a:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 800446e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004470:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004474:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004478:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800447c:	40ac      	lsls	r4, r5
 800447e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8004480:	6044      	str	r4, [r0, #4]
 8004482:	e76a      	b.n	800435a <HAL_GPIO_Init+0x5e>
 8004484:	2702      	movs	r7, #2
 8004486:	fa07 f303 	lsl.w	r3, r7, r3
 800448a:	431a      	orrs	r2, r3
 800448c:	e79d      	b.n	80043ca <HAL_GPIO_Init+0xce>
 800448e:	fa09 f303 	lsl.w	r3, r9, r3
 8004492:	431a      	orrs	r2, r3
 8004494:	e799      	b.n	80043ca <HAL_GPIO_Init+0xce>
 8004496:	4770      	bx	lr
 8004498:	2703      	movs	r7, #3
 800449a:	fa07 f303 	lsl.w	r3, r7, r3
 800449e:	431a      	orrs	r2, r3
 80044a0:	e793      	b.n	80043ca <HAL_GPIO_Init+0xce>
 80044a2:	2704      	movs	r7, #4
 80044a4:	fa07 f303 	lsl.w	r3, r7, r3
 80044a8:	431a      	orrs	r2, r3
 80044aa:	e78e      	b.n	80043ca <HAL_GPIO_Init+0xce>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	48000400 	.word	0x48000400
 80044b4:	48000800 	.word	0x48000800
 80044b8:	48000c00 	.word	0x48000c00
 80044bc:	48001000 	.word	0x48001000
 80044c0:	48001400 	.word	0x48001400
 80044c4:	40010400 	.word	0x40010400

080044c8 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d05c      	beq.n	8004586 <HAL_OPAMP_Init+0xbe>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80044cc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d058      	beq.n	8004586 <HAL_OPAMP_Init+0xbe>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80044d4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d054      	beq.n	8004586 <HAL_OPAMP_Init+0xbe>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044dc:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_OPAMP_Init+0x100>)
{
 80044de:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	661a      	str	r2, [r3, #96]	; 0x60
 80044e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 80044ea:	b082      	sub	sp, #8
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80044f4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80044f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d044      	beq.n	800458a <HAL_OPAMP_Init+0xc2>
 8004500:	4604      	mov	r4, r0

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004502:	f7fd fe53 	bl	80021ac <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004506:	68a3      	ldr	r3, [r4, #8]
 8004508:	f023 0220 	bic.w	r2, r3, #32
 800450c:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800450e:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004510:	d041      	beq.n	8004596 <HAL_OPAMP_Init+0xce>
 8004512:	6860      	ldr	r0, [r4, #4]
 8004514:	68e6      	ldr	r6, [r4, #12]
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	6925      	ldr	r5, [r4, #16]
 800451a:	4303      	orrs	r3, r0
 800451c:	4333      	orrs	r3, r6
 800451e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004520:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004522:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004524:	f021 0110 	bic.w	r1, r1, #16
 8004528:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 800452a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 800452c:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 800452e:	4333      	orrs	r3, r6
 8004530:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
 8004534:	432b      	orrs	r3, r5
 8004536:	4925      	ldr	r1, [pc, #148]	; (80045cc <HAL_OPAMP_Init+0x104>)
 8004538:	6815      	ldr	r5, [r2, #0]
 800453a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800453e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004542:	7d20      	ldrb	r0, [r4, #20]
 8004544:	4029      	ands	r1, r5
 8004546:	2801      	cmp	r0, #1
 8004548:	ea43 0301 	orr.w	r3, r3, r1
 800454c:	bf14      	ite	ne
 800454e:	2100      	movne	r1, #0
 8004550:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8004554:	430b      	orrs	r3, r1
 8004556:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004558:	6993      	ldr	r3, [r2, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	db09      	blt.n	8004572 <HAL_OPAMP_Init+0xaa>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800455e:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8004562:	6a20      	ldr	r0, [r4, #32]
 8004564:	6991      	ldr	r1, [r2, #24]
 8004566:	432b      	orrs	r3, r5
 8004568:	4303      	orrs	r3, r0
 800456a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800456e:	430b      	orrs	r3, r1
 8004570:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004572:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004576:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800457a:	b94b      	cbnz	r3, 8004590 <HAL_OPAMP_Init+0xc8>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800457c:	2301      	movs	r3, #1
 800457e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8004582:	b002      	add	sp, #8
 8004584:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004586:	2001      	movs	r0, #1
}
 8004588:	4770      	bx	lr
      hopamp->Lock = HAL_UNLOCKED;
 800458a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 800458e:	e7b7      	b.n	8004500 <HAL_OPAMP_Init+0x38>
    return status;
 8004590:	2000      	movs	r0, #0
}
 8004592:	b002      	add	sp, #8
 8004594:	bd70      	pop	{r4, r5, r6, pc}
 8004596:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8004598:	6811      	ldr	r1, [r2, #0]
 800459a:	6920      	ldr	r0, [r4, #16]
 800459c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800459e:	4333      	orrs	r3, r6
 80045a0:	4303      	orrs	r3, r0
 80045a2:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 80045a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 80045a8:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 80045aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 80045ac:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80045ae:	4303      	orrs	r3, r0
 80045b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80045b2:	6816      	ldr	r6, [r2, #0]
 80045b4:	4905      	ldr	r1, [pc, #20]	; (80045cc <HAL_OPAMP_Init+0x104>)
 80045b6:	432b      	orrs	r3, r5
 80045b8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80045ba:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80045be:	4031      	ands	r1, r6
 80045c0:	7d20      	ldrb	r0, [r4, #20]
 80045c2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80045c6:	e7be      	b.n	8004546 <HAL_OPAMP_Init+0x7e>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	e0003e11 	.word	0xe0003e11

080045d0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045d0:	4a3b      	ldr	r2, [pc, #236]	; (80046c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 80045d2:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045d4:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045d6:	b968      	cbnz	r0, 80045f4 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	d014      	beq.n	800460c <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045e2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80045e6:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80045f2:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80045f8:	d02f      	beq.n	800465a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004602:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004604:	2000      	movs	r0, #0
}
 8004606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800460a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800460c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004610:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004612:	482d      	ldr	r0, [pc, #180]	; (80046c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004614:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004618:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004622:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004626:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004628:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800462a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800462c:	2332      	movs	r3, #50	; 0x32
 800462e:	fb03 f304 	mul.w	r3, r3, r4
 8004632:	fba0 0303 	umull	r0, r3, r0, r3
 8004636:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004638:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800463a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800463e:	d506      	bpl.n	800464e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004640:	e000      	b.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x74>
 8004642:	b123      	cbz	r3, 800464e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004644:	6951      	ldr	r1, [r2, #20]
 8004646:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004648:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800464c:	d4f9      	bmi.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	055c      	lsls	r4, r3, #21
 8004654:	d5d6      	bpl.n	8004604 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004656:	2003      	movs	r0, #3
 8004658:	e7d5      	b.n	8004606 <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800465a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d009      	beq.n	8004678 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004664:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8004668:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004672:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004676:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004678:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800467e:	4812      	ldr	r0, [pc, #72]	; (80046c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004680:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004684:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004688:	6811      	ldr	r1, [r2, #0]
 800468a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800468e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004692:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004694:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004696:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004698:	2332      	movs	r3, #50	; 0x32
 800469a:	fb03 f304 	mul.w	r3, r3, r4
 800469e:	fba0 0303 	umull	r0, r3, r0, r3
 80046a2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046a4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046a6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046aa:	d5d0      	bpl.n	800464e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80046ac:	e001      	b.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0xe2>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0cd      	beq.n	800464e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80046b2:	6951      	ldr	r1, [r2, #20]
 80046b4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80046b6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ba:	d5c8      	bpl.n	800464e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80046bc:	e7f7      	b.n	80046ae <HAL_PWREx_ControlVoltageScaling+0xde>
 80046be:	bf00      	nop
 80046c0:	40007000 	.word	0x40007000
 80046c4:	200005dc 	.word	0x200005dc
 80046c8:	431bde83 	.word	0x431bde83

080046cc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046cc:	2800      	cmp	r0, #0
 80046ce:	f000 816c 	beq.w	80049aa <HAL_RCC_OscConfig+0x2de>
{
 80046d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	6803      	ldr	r3, [r0, #0]
 80046d8:	07d9      	lsls	r1, r3, #31
{
 80046da:	b082      	sub	sp, #8
 80046dc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	d52d      	bpl.n	800473c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e0:	49b7      	ldr	r1, [pc, #732]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 80046e2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046ea:	2a0c      	cmp	r2, #12
 80046ec:	f000 80f5 	beq.w	80048da <HAL_RCC_OscConfig+0x20e>
 80046f0:	2a08      	cmp	r2, #8
 80046f2:	f000 80f7 	beq.w	80048e4 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	f000 812e 	beq.w	800495c <HAL_RCC_OscConfig+0x290>
 8004700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004704:	f000 81e0 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x3fc>
 8004708:	4dad      	ldr	r5, [pc, #692]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 800470a:	682a      	ldr	r2, [r5, #0]
 800470c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004710:	602a      	str	r2, [r5, #0]
 8004712:	682a      	ldr	r2, [r5, #0]
 8004714:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004718:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800471a:	2b00      	cmp	r3, #0
 800471c:	f040 8123 	bne.w	8004966 <HAL_RCC_OscConfig+0x29a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fe fbf2 	bl	8002f08 <HAL_GetTick>
 8004724:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004726:	e005      	b.n	8004734 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004728:	f7fe fbee 	bl	8002f08 <HAL_GetTick>
 800472c:	1b80      	subs	r0, r0, r6
 800472e:	2864      	cmp	r0, #100	; 0x64
 8004730:	f200 8137 	bhi.w	80049a2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	039f      	lsls	r7, r3, #14
 8004738:	d4f6      	bmi.n	8004728 <HAL_RCC_OscConfig+0x5c>
 800473a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473c:	079e      	lsls	r6, r3, #30
 800473e:	f100 80a5 	bmi.w	800488c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	071a      	lsls	r2, r3, #28
 8004744:	d519      	bpl.n	800477a <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004746:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004748:	4d9d      	ldr	r5, [pc, #628]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80d7 	beq.w	80048fe <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 8004750:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe fbd4 	bl	8002f08 <HAL_GetTick>
 8004760:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004762:	e005      	b.n	8004770 <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004764:	f7fe fbd0 	bl	8002f08 <HAL_GetTick>
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	2802      	cmp	r0, #2
 800476c:	f200 8119 	bhi.w	80049a2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004770:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004774:	079f      	lsls	r7, r3, #30
 8004776:	d5f5      	bpl.n	8004764 <HAL_RCC_OscConfig+0x98>
 8004778:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477a:	0759      	lsls	r1, r3, #29
 800477c:	d53f      	bpl.n	80047fe <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800477e:	4b90      	ldr	r3, [pc, #576]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 8004780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004782:	00d2      	lsls	r2, r2, #3
 8004784:	f100 812b 	bmi.w	80049de <HAL_RCC_OscConfig+0x312>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800478a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800478e:	659a      	str	r2, [r3, #88]	; 0x58
 8004790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800479a:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479c:	4d89      	ldr	r5, [pc, #548]	; (80049c4 <HAL_RCC_OscConfig+0x2f8>)
 800479e:	682a      	ldr	r2, [r5, #0]
 80047a0:	05d7      	lsls	r7, r2, #23
 80047a2:	f140 80ee 	bpl.w	8004982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a6:	68a3      	ldr	r3, [r4, #8]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	f000 811a 	beq.w	80049e2 <HAL_RCC_OscConfig+0x316>
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	f000 81cb 	beq.w	8004b4a <HAL_RCC_OscConfig+0x47e>
 80047b4:	4d82      	ldr	r5, [pc, #520]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 80047b6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 80047c2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 810e 	bne.w	80049f0 <HAL_RCC_OscConfig+0x324>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fe fb98 	bl	8002f08 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80047dc:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047de:	e006      	b.n	80047ee <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e0:	f7fe fb92 	bl	8002f08 <HAL_GetTick>
 80047e4:	eba0 0008 	sub.w	r0, r0, r8
 80047e8:	42b8      	cmp	r0, r7
 80047ea:	f200 80da 	bhi.w	80049a2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047ee:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80047f2:	079a      	lsls	r2, r3, #30
 80047f4:	d4f4      	bmi.n	80047e0 <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	f040 8123 	bne.w	8004a42 <HAL_RCC_OscConfig+0x376>
 80047fc:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047fe:	069b      	lsls	r3, r3, #26
 8004800:	d518      	bpl.n	8004834 <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004802:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004804:	4d6e      	ldr	r5, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8107 	beq.w	8004a1a <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_HSI48_ENABLE();
 800480c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fe fb76 	bl	8002f08 <HAL_GetTick>
 800481c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800481e:	e005      	b.n	800482c <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004820:	f7fe fb72 	bl	8002f08 <HAL_GetTick>
 8004824:	1b80      	subs	r0, r0, r6
 8004826:	2802      	cmp	r0, #2
 8004828:	f200 80bb 	bhi.w	80049a2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800482c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004830:	079f      	lsls	r7, r3, #30
 8004832:	d5f5      	bpl.n	8004820 <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004834:	69e0      	ldr	r0, [r4, #28]
 8004836:	b328      	cbz	r0, 8004884 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004838:	4d61      	ldr	r5, [pc, #388]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 800483a:	68aa      	ldr	r2, [r5, #8]
 800483c:	f002 020c 	and.w	r2, r2, #12
 8004840:	2a0c      	cmp	r2, #12
 8004842:	f000 814e 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x416>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004848:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800484a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800484e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004850:	f000 80fd 	beq.w	8004a4e <HAL_RCC_OscConfig+0x382>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004854:	68ea      	ldr	r2, [r5, #12]
 8004856:	f022 0203 	bic.w	r2, r2, #3
 800485a:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800485c:	68ea      	ldr	r2, [r5, #12]
 800485e:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8004862:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004866:	60ea      	str	r2, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fe fb4e 	bl	8002f08 <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800486c:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800486e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004870:	e005      	b.n	800487e <HAL_RCC_OscConfig+0x1b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fe fb49 	bl	8002f08 <HAL_GetTick>
 8004876:	1b40      	subs	r0, r0, r5
 8004878:	2802      	cmp	r0, #2
 800487a:	f200 8092 	bhi.w	80049a2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	d4f6      	bmi.n	8004872 <HAL_RCC_OscConfig+0x1a6>
      }
    }
  }
  }

  return HAL_OK;
 8004884:	2000      	movs	r0, #0
}
 8004886:	b002      	add	sp, #8
 8004888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488c:	4a4c      	ldr	r2, [pc, #304]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 800488e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004890:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004892:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004896:	2b0c      	cmp	r3, #12
 8004898:	d045      	beq.n	8004926 <HAL_RCC_OscConfig+0x25a>
 800489a:	2b04      	cmp	r3, #4
 800489c:	d047      	beq.n	800492e <HAL_RCC_OscConfig+0x262>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800489e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80048a0:	4d47      	ldr	r5, [pc, #284]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8083 	beq.w	80049ae <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_HSI_ENABLE();
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048b0:	f7fe fb2a 	bl	8002f08 <HAL_GetTick>
 80048b4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b6:	e004      	b.n	80048c2 <HAL_RCC_OscConfig+0x1f6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fe fb26 	bl	8002f08 <HAL_GetTick>
 80048bc:	1b80      	subs	r0, r0, r6
 80048be:	2802      	cmp	r0, #2
 80048c0:	d86f      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	0558      	lsls	r0, r3, #21
 80048c6:	d5f7      	bpl.n	80048b8 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	686b      	ldr	r3, [r5, #4]
 80048ca:	6922      	ldr	r2, [r4, #16]
 80048cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80048d4:	606b      	str	r3, [r5, #4]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	e733      	b.n	8004742 <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048da:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048de:	2903      	cmp	r1, #3
 80048e0:	f47f af09 	bne.w	80046f6 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	0392      	lsls	r2, r2, #14
 80048ea:	f57f af27 	bpl.w	800473c <HAL_RCC_OscConfig+0x70>
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	2a00      	cmp	r2, #0
 80048f2:	f47f af23 	bne.w	800473c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80048f6:	2001      	movs	r0, #1
}
 80048f8:	b002      	add	sp, #8
 80048fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80048fe:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800490a:	f7fe fafd 	bl	8002f08 <HAL_GetTick>
 800490e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004910:	e004      	b.n	800491c <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004912:	f7fe faf9 	bl	8002f08 <HAL_GetTick>
 8004916:	1b80      	subs	r0, r0, r6
 8004918:	2802      	cmp	r0, #2
 800491a:	d842      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800491c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004920:	0798      	lsls	r0, r3, #30
 8004922:	d4f6      	bmi.n	8004912 <HAL_RCC_OscConfig+0x246>
 8004924:	e728      	b.n	8004778 <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004926:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800492a:	2a02      	cmp	r2, #2
 800492c:	d1b7      	bne.n	800489e <HAL_RCC_OscConfig+0x1d2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	055d      	lsls	r5, r3, #21
 8004934:	d502      	bpl.n	800493c <HAL_RCC_OscConfig+0x270>
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0dc      	beq.n	80048f6 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493c:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 800493e:	6920      	ldr	r0, [r4, #16]
 8004940:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004942:	4921      	ldr	r1, [pc, #132]	; (80049c8 <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004948:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800494c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800494e:	6808      	ldr	r0, [r1, #0]
 8004950:	f7fd fd66 	bl	8002420 <HAL_InitTick>
 8004954:	2800      	cmp	r0, #0
 8004956:	d1ce      	bne.n	80048f6 <HAL_RCC_OscConfig+0x22a>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	e6f2      	b.n	8004742 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495c:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004964:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004966:	f7fe facf 	bl	8002f08 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800496a:	4d15      	ldr	r5, [pc, #84]	; (80049c0 <HAL_RCC_OscConfig+0x2f4>)
        tickstart = HAL_GetTick();
 800496c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800496e:	e004      	b.n	800497a <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004970:	f7fe faca 	bl	8002f08 <HAL_GetTick>
 8004974:	1b80      	subs	r0, r0, r6
 8004976:	2864      	cmp	r0, #100	; 0x64
 8004978:	d813      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800497a:	682b      	ldr	r3, [r5, #0]
 800497c:	039b      	lsls	r3, r3, #14
 800497e:	d5f7      	bpl.n	8004970 <HAL_RCC_OscConfig+0x2a4>
 8004980:	e6db      	b.n	800473a <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004982:	682a      	ldr	r2, [r5, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004988:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800498a:	f7fe fabd 	bl	8002f08 <HAL_GetTick>
 800498e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	05d8      	lsls	r0, r3, #23
 8004994:	f53f af07 	bmi.w	80047a6 <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004998:	f7fe fab6 	bl	8002f08 <HAL_GetTick>
 800499c:	1bc0      	subs	r0, r0, r7
 800499e:	2802      	cmp	r0, #2
 80049a0:	d9f6      	bls.n	8004990 <HAL_RCC_OscConfig+0x2c4>
            return HAL_TIMEOUT;
 80049a2:	2003      	movs	r0, #3
}
 80049a4:	b002      	add	sp, #8
 80049a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80049aa:	2001      	movs	r0, #1
}
 80049ac:	4770      	bx	lr
        __HAL_RCC_HSI_DISABLE();
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049b6:	f7fe faa7 	bl	8002f08 <HAL_GetTick>
 80049ba:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049bc:	e00b      	b.n	80049d6 <HAL_RCC_OscConfig+0x30a>
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40007000 	.word	0x40007000
 80049c8:	200005e4 	.word	0x200005e4
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fe fa9c 	bl	8002f08 <HAL_GetTick>
 80049d0:	1b80      	subs	r0, r0, r6
 80049d2:	2802      	cmp	r0, #2
 80049d4:	d8e5      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	0559      	lsls	r1, r3, #21
 80049da:	d4f7      	bmi.n	80049cc <HAL_RCC_OscConfig+0x300>
 80049dc:	e7bc      	b.n	8004958 <HAL_RCC_OscConfig+0x28c>
    FlagStatus       pwrclkchanged = RESET;
 80049de:	2600      	movs	r6, #0
 80049e0:	e6dc      	b.n	800479c <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e2:	4a61      	ldr	r2, [pc, #388]	; (8004b68 <HAL_RCC_OscConfig+0x49c>)
 80049e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80049f0:	f7fe fa8a 	bl	8002f08 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f4:	4d5c      	ldr	r5, [pc, #368]	; (8004b68 <HAL_RCC_OscConfig+0x49c>)
      tickstart = HAL_GetTick();
 80049f6:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fc:	e005      	b.n	8004a0a <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fe fa83 	bl	8002f08 <HAL_GetTick>
 8004a02:	eba0 0008 	sub.w	r0, r0, r8
 8004a06:	42b8      	cmp	r0, r7
 8004a08:	d8cb      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x2d6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004a0e:	0799      	lsls	r1, r3, #30
 8004a10:	d5f5      	bpl.n	80049fe <HAL_RCC_OscConfig+0x332>
    if (pwrclkchanged == SET)
 8004a12:	2e00      	cmp	r6, #0
 8004a14:	f43f aef2 	beq.w	80047fc <HAL_RCC_OscConfig+0x130>
 8004a18:	e013      	b.n	8004a42 <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_HSI48_DISABLE();
 8004a1a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004a26:	f7fe fa6f 	bl	8002f08 <HAL_GetTick>
 8004a2a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a2c:	e004      	b.n	8004a38 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a2e:	f7fe fa6b 	bl	8002f08 <HAL_GetTick>
 8004a32:	1b80      	subs	r0, r0, r6
 8004a34:	2802      	cmp	r0, #2
 8004a36:	d8b4      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x2d6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a38:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004a3c:	0798      	lsls	r0, r3, #30
 8004a3e:	d4f6      	bmi.n	8004a2e <HAL_RCC_OscConfig+0x362>
 8004a40:	e6f8      	b.n	8004834 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4a49      	ldr	r2, [pc, #292]	; (8004b68 <HAL_RCC_OscConfig+0x49c>)
 8004a44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4c:	e6d6      	b.n	80047fc <HAL_RCC_OscConfig+0x130>
        tickstart = HAL_GetTick();
 8004a4e:	f7fe fa5b 	bl	8002f08 <HAL_GetTick>
 8004a52:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a54:	e004      	b.n	8004a60 <HAL_RCC_OscConfig+0x394>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fe fa57 	bl	8002f08 <HAL_GetTick>
 8004a5a:	1b80      	subs	r0, r0, r6
 8004a5c:	2802      	cmp	r0, #2
 8004a5e:	d8a0      	bhi.n	80049a2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	0199      	lsls	r1, r3, #6
 8004a64:	d4f7      	bmi.n	8004a56 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a66:	68e9      	ldr	r1, [r5, #12]
 8004a68:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <HAL_RCC_OscConfig+0x4a0>)
 8004a6a:	6a22      	ldr	r2, [r4, #32]
 8004a6c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a72:	400b      	ands	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8004a7a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004a7e:	3801      	subs	r0, #1
 8004a80:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8004a84:	0849      	lsrs	r1, r1, #1
 8004a86:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004a8a:	3901      	subs	r1, #1
 8004a8c:	0852      	lsrs	r2, r2, #1
 8004a8e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004a92:	3a01      	subs	r2, #1
 8004a94:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004a98:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004a9a:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9c:	4c32      	ldr	r4, [pc, #200]	; (8004b68 <HAL_RCC_OscConfig+0x49c>)
        __HAL_RCC_PLL_ENABLE();
 8004a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa4:	68eb      	ldr	r3, [r5, #12]
 8004aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004aac:	f7fe fa2c 	bl	8002f08 <HAL_GetTick>
 8004ab0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3f4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fe fa28 	bl	8002f08 <HAL_GetTick>
 8004ab8:	1b40      	subs	r0, r0, r5
 8004aba:	2802      	cmp	r0, #2
 8004abc:	f63f af71 	bhi.w	80049a2 <HAL_RCC_OscConfig+0x2d6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	019a      	lsls	r2, r3, #6
 8004ac4:	d5f6      	bpl.n	8004ab4 <HAL_RCC_OscConfig+0x3e8>
 8004ac6:	e6dd      	b.n	8004884 <HAL_RCC_OscConfig+0x1b8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004acc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e741      	b.n	8004966 <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ae2:	2801      	cmp	r0, #1
 8004ae4:	f43f af08 	beq.w	80048f8 <HAL_RCC_OscConfig+0x22c>
      temp_pllckcfg = RCC->PLLCFGR;
 8004ae8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aea:	6a22      	ldr	r2, [r4, #32]
 8004aec:	f003 0103 	and.w	r1, r3, #3
 8004af0:	4291      	cmp	r1, r2
 8004af2:	f47f af00 	bne.w	80048f6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004afc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004b02:	f47f aef8 	bne.w	80048f6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b0c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004b10:	f47f aef1 	bne.w	80048f6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b1a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004b1e:	f47f aeea 	bne.w	80048f6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b24:	0852      	lsrs	r2, r2, #1
 8004b26:	3a01      	subs	r2, #1
 8004b28:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b2c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004b30:	f47f aee1 	bne.w	80048f6 <HAL_RCC_OscConfig+0x22a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004b36:	0852      	lsrs	r2, r2, #1
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8004b42:	bf14      	ite	ne
 8004b44:	2001      	movne	r0, #1
 8004b46:	2000      	moveq	r0, #0
 8004b48:	e6d6      	b.n	80048f8 <HAL_RCC_OscConfig+0x22c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <HAL_RCC_OscConfig+0x49c>)
 8004b4c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004b50:	f042 0204 	orr.w	r2, r2, #4
 8004b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004b58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004b64:	e744      	b.n	80049f0 <HAL_RCC_OscConfig+0x324>
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	019f800c 	.word	0x019f800c

08004b70 <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b70:	2800      	cmp	r0, #0
 8004b72:	f000 8105 	beq.w	8004d80 <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b76:	4aad      	ldr	r2, [pc, #692]	; (8004e2c <HAL_RCC_ClockConfig+0x2bc>)
{
 8004b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b7c:	6813      	ldr	r3, [r2, #0]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	428b      	cmp	r3, r1
 8004b84:	d20c      	bcs.n	8004ba0 <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	f023 030f 	bic.w	r3, r3, #15
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	428b      	cmp	r3, r1
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8004b9a:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 8004b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba0:	6803      	ldr	r3, [r0, #0]
 8004ba2:	07df      	lsls	r7, r3, #31
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	f140 8088 	bpl.w	8004cbc <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bac:	6842      	ldr	r2, [r0, #4]
 8004bae:	2a03      	cmp	r2, #3
 8004bb0:	f000 80ad 	beq.w	8004d0e <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb4:	4b9e      	ldr	r3, [pc, #632]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb6:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb8:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	f000 80ff 	beq.w	8004dbc <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bbe:	055b      	lsls	r3, r3, #21
 8004bc0:	d5eb      	bpl.n	8004b9a <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bc2:	4b9b      	ldr	r3, [pc, #620]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004bc4:	6899      	ldr	r1, [r3, #8]
 8004bc6:	f001 010c 	and.w	r1, r1, #12
 8004bca:	2904      	cmp	r1, #4
 8004bcc:	d00a      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bce:	6899      	ldr	r1, [r3, #8]
 8004bd0:	f001 010c 	and.w	r1, r1, #12
 8004bd4:	2908      	cmp	r1, #8
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004bd8:	6899      	ldr	r1, [r3, #8]
 8004bda:	f001 010c 	and.w	r1, r1, #12
 8004bde:	290c      	cmp	r1, #12
 8004be0:	f000 80fb 	beq.w	8004dda <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004be4:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be8:	4e91      	ldr	r6, [pc, #580]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004bea:	68b3      	ldr	r3, [r6, #8]
 8004bec:	f023 0303 	bic.w	r3, r3, #3
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8004bf4:	f7fe f988 	bl	8002f08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004bfc:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	e005      	b.n	8004c0c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c00:	f7fe f982 	bl	8002f08 <HAL_GetTick>
 8004c04:	eba0 0009 	sub.w	r0, r0, r9
 8004c08:	42b8      	cmp	r0, r7
 8004c0a:	d874      	bhi.n	8004cf6 <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0c:	68b3      	ldr	r3, [r6, #8]
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c18:	d1f2      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	079f      	lsls	r7, r3, #30
 8004c1e:	f140 80d3 	bpl.w	8004dc8 <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c22:	0758      	lsls	r0, r3, #29
 8004c24:	d504      	bpl.n	8004c30 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c26:	4982      	ldr	r1, [pc, #520]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004c2e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	0719      	lsls	r1, r3, #28
 8004c32:	d506      	bpl.n	8004c42 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c34:	4a7e      	ldr	r2, [pc, #504]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004c36:	6893      	ldr	r3, [r2, #8]
 8004c38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c3c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c40:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c42:	4a7b      	ldr	r2, [pc, #492]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004c44:	68a1      	ldr	r1, [r4, #8]
 8004c46:	6893      	ldr	r3, [r2, #8]
 8004c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4e76      	ldr	r6, [pc, #472]	; (8004e2c <HAL_RCC_ClockConfig+0x2bc>)
 8004c52:	6832      	ldr	r2, [r6, #0]
 8004c54:	f002 020f 	and.w	r2, r2, #15
 8004c58:	42aa      	cmp	r2, r5
 8004c5a:	d837      	bhi.n	8004ccc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	075a      	lsls	r2, r3, #29
 8004c60:	d506      	bpl.n	8004c70 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c62:	4973      	ldr	r1, [pc, #460]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004c64:	68e0      	ldr	r0, [r4, #12]
 8004c66:	688a      	ldr	r2, [r1, #8]
 8004c68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c6c:	4302      	orrs	r2, r0
 8004c6e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	071b      	lsls	r3, r3, #28
 8004c72:	d443      	bmi.n	8004cfc <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c74:	4a6e      	ldr	r2, [pc, #440]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004c76:	6893      	ldr	r3, [r2, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	f000 80d3 	beq.w	8004e28 <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c82:	6893      	ldr	r3, [r2, #8]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	f000 809b 	beq.w	8004dc4 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c8e:	6893      	ldr	r3, [r2, #8]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d075      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8004c98:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c9a:	4a65      	ldr	r2, [pc, #404]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004c9c:	4c65      	ldr	r4, [pc, #404]	; (8004e34 <HAL_RCC_ClockConfig+0x2c4>)
 8004c9e:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 8004ca0:	4865      	ldr	r0, [pc, #404]	; (8004e38 <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca2:	4966      	ldr	r1, [pc, #408]	; (8004e3c <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 8004ca4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004caa:	5ca2      	ldrb	r2, [r4, r2]
 8004cac:	f002 021f 	and.w	r2, r2, #31
 8004cb0:	40d3      	lsrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]
}
 8004cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8004cb8:	f7fd bbb2 	b.w	8002420 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cbc:	079e      	lsls	r6, r3, #30
 8004cbe:	d4b0      	bmi.n	8004c22 <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc0:	4e5a      	ldr	r6, [pc, #360]	; (8004e2c <HAL_RCC_ClockConfig+0x2bc>)
 8004cc2:	6832      	ldr	r2, [r6, #0]
 8004cc4:	f002 020f 	and.w	r2, r2, #15
 8004cc8:	42aa      	cmp	r2, r5
 8004cca:	d9c7      	bls.n	8004c5c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ccc:	6832      	ldr	r2, [r6, #0]
 8004cce:	f022 020f 	bic.w	r2, r2, #15
 8004cd2:	432a      	orrs	r2, r5
 8004cd4:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8004cd6:	f7fe f917 	bl	8002f08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cda:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004cde:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	42ab      	cmp	r3, r5
 8004ce8:	d0b8      	beq.n	8004c5c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cea:	f7fe f90d 	bl	8002f08 <HAL_GetTick>
 8004cee:	eba0 0008 	sub.w	r0, r0, r8
 8004cf2:	42b8      	cmp	r0, r7
 8004cf4:	d9f4      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 8004cf6:	2003      	movs	r0, #3
}
 8004cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfc:	4a4c      	ldr	r2, [pc, #304]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004cfe:	6921      	ldr	r1, [r4, #16]
 8004d00:	6893      	ldr	r3, [r2, #8]
 8004d02:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004d06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d0a:	6093      	str	r3, [r2, #8]
 8004d0c:	e7b2      	b.n	8004c74 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0e:	4948      	ldr	r1, [pc, #288]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	0180      	lsls	r0, r0, #6
 8004d14:	f57f af41 	bpl.w	8004b9a <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d18:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d1a:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 8004d1c:	4f48      	ldr	r7, [pc, #288]	; (8004e40 <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d1e:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 8004d22:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d24:	68ce      	ldr	r6, [r1, #12]
 8004d26:	bf0c      	ite	eq
 8004d28:	4946      	ldreq	r1, [pc, #280]	; (8004e44 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d2a:	4947      	ldrne	r1, [pc, #284]	; (8004e48 <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d2c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004d30:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d32:	fbb1 f1f0 	udiv	r1, r1, r0
 8004d36:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d3a:	4e3d      	ldr	r6, [pc, #244]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d3c:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d40:	68f0      	ldr	r0, [r6, #12]
 8004d42:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8004d46:	3001      	adds	r0, #1
 8004d48:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8004d4a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8004d4e:	42b9      	cmp	r1, r7
 8004d50:	f67f af48 	bls.w	8004be4 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d54:	68b1      	ldr	r1, [r6, #8]
 8004d56:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8004d5a:	d007      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1fc>
 8004d5c:	f013 0802 	ands.w	r8, r3, #2
 8004d60:	f43f af42 	beq.w	8004be8 <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f47f af3c 	bne.w	8004be4 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d6c:	4930      	ldr	r1, [pc, #192]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004d6e:	688b      	ldr	r3, [r1, #8]
 8004d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d78:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d7a:	f04f 0880 	mov.w	r8, #128	; 0x80
 8004d7e:	e733      	b.n	8004be8 <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 8004d80:	2001      	movs	r0, #1
}
 8004d82:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d84:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d86:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d88:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8a:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 8004d92:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d94:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d98:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d9c:	bf0c      	ite	eq
 8004d9e:	4b29      	ldreq	r3, [pc, #164]	; (8004e44 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004da0:	4b29      	ldrne	r3, [pc, #164]	; (8004e48 <HAL_RCC_ClockConfig+0x2d8>)
 8004da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004da6:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004daa:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8004db2:	3201      	adds	r2, #1
 8004db4:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8004db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dba:	e76e      	b.n	8004c9a <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dbc:	0399      	lsls	r1, r3, #14
 8004dbe:	f53f af00 	bmi.w	8004bc2 <HAL_RCC_ClockConfig+0x52>
 8004dc2:	e6ea      	b.n	8004b9a <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8004dc4:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <HAL_RCC_ClockConfig+0x2d4>)
 8004dc6:	e768      	b.n	8004c9a <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8004dc8:	f1b8 0f00 	cmp.w	r8, #0
 8004dcc:	f43f af40 	beq.w	8004c50 <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dd0:	68b3      	ldr	r3, [r6, #8]
 8004dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd6:	60b3      	str	r3, [r6, #8]
 8004dd8:	e73a      	b.n	8004c50 <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dda:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 8004dde:	4e18      	ldr	r6, [pc, #96]	; (8004e40 <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de0:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8004de4:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004de6:	68d8      	ldr	r0, [r3, #12]
 8004de8:	bf0c      	ite	eq
 8004dea:	4b16      	ldreq	r3, [pc, #88]	; (8004e44 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dec:	4b16      	ldrne	r3, [pc, #88]	; (8004e48 <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dee:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8004df2:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004df8:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dfc:	480c      	ldr	r0, [pc, #48]	; (8004e30 <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dfe:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e02:	68c1      	ldr	r1, [r0, #12]
 8004e04:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004e08:	3101      	adds	r1, #1
 8004e0a:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 8004e0c:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 8004e10:	42b3      	cmp	r3, r6
 8004e12:	f67f aee7 	bls.w	8004be4 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e16:	6883      	ldr	r3, [r0, #8]
 8004e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e20:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e22:	f04f 0880 	mov.w	r8, #128	; 0x80
 8004e26:	e6df      	b.n	8004be8 <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_RCC_ClockConfig+0x2d8>)
 8004e2a:	e736      	b.n	8004c9a <HAL_RCC_ClockConfig+0x12a>
 8004e2c:	40022000 	.word	0x40022000
 8004e30:	40021000 	.word	0x40021000
 8004e34:	08009edc 	.word	0x08009edc
 8004e38:	200005e4 	.word	0x200005e4
 8004e3c:	200005dc 	.word	0x200005dc
 8004e40:	04c4b400 	.word	0x04c4b400
 8004e44:	007a1200 	.word	0x007a1200
 8004e48:	00f42400 	.word	0x00f42400

08004e4c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e4c:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x64>)
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	f002 020c 	and.w	r2, r2, #12
 8004e54:	2a04      	cmp	r2, #4
 8004e56:	d027      	beq.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	f002 020c 	and.w	r2, r2, #12
 8004e5e:	2a08      	cmp	r2, #8
 8004e60:	d024      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	f002 020c 	and.w	r2, r2, #12
 8004e68:	2a0c      	cmp	r2, #12
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = 0U;
 8004e6c:	2000      	movs	r0, #0
}
 8004e6e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e70:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e72:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e74:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e76:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e7a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8004e7e:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e80:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e84:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e88:	bf0c      	ite	eq
 8004e8a:	480a      	ldreq	r0, [pc, #40]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e8c:	480a      	ldrne	r0, [pc, #40]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004e8e:	fbb0 f0f2 	udiv	r0, r0, r2
 8004e92:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x64>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ea6:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004ea8:	4803      	ldr	r0, [pc, #12]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004eaa:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004eac:	4801      	ldr	r0, [pc, #4]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x68>)
 8004eae:	4770      	bx	lr
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	007a1200 	.word	0x007a1200
 8004eb8:	00f42400 	.word	0x00f42400

08004ebc <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004ebc:	4b01      	ldr	r3, [pc, #4]	; (8004ec4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	200005dc 	.word	0x200005dc

08004ec8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004eca:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004ece:	4906      	ldr	r1, [pc, #24]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ed0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004ed4:	6808      	ldr	r0, [r1, #0]
 8004ed6:	5cd3      	ldrb	r3, [r2, r3]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
}
 8004edc:	40d8      	lsrs	r0, r3
 8004ede:	4770      	bx	lr
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	08009eec 	.word	0x08009eec
 8004ee8:	200005dc 	.word	0x200005dc

08004eec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004eee:	4a06      	ldr	r2, [pc, #24]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004ef2:	4906      	ldr	r1, [pc, #24]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ef4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004ef8:	6808      	ldr	r0, [r1, #0]
 8004efa:	5cd3      	ldrb	r3, [r2, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
}
 8004f00:	40d8      	lsrs	r0, r3
 8004f02:	4770      	bx	lr
 8004f04:	40021000 	.word	0x40021000
 8004f08:	08009eec 	.word	0x08009eec
 8004f0c:	200005dc 	.word	0x200005dc

08004f10 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f10:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f12:	220f      	movs	r2, #15
 8004f14:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	f002 0203 	and.w	r2, r2, #3
 8004f1c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004f24:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004f2c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	08db      	lsrs	r3, r3, #3
{
 8004f32:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f38:	4c05      	ldr	r4, [pc, #20]	; (8004f50 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f3a:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f3c:	6823      	ldr	r3, [r4, #0]
}
 8004f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	600b      	str	r3, [r1, #0]
}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40022000 	.word	0x40022000

08004f54 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004f54:	4a02      	ldr	r2, [pc, #8]	; (8004f60 <HAL_RCC_EnableCSS+0xc>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f5c:	6013      	str	r3, [r2, #0]
}
 8004f5e:	4770      	bx	lr
 8004f60:	40021000 	.word	0x40021000

08004f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f68:	6803      	ldr	r3, [r0, #0]
{
 8004f6a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6c:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8004f70:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f72:	d057      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f74:	4b9f      	ldr	r3, [pc, #636]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f78:	00d0      	lsls	r0, r2, #3
 8004f7a:	f140 810d 	bpl.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0x234>
    FlagStatus       pwrclkchanged = RESET;
 8004f7e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f80:	4d9d      	ldr	r5, [pc, #628]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f82:	682b      	ldr	r3, [r5, #0]
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f8a:	f7fd ffbd 	bl	8002f08 <HAL_GetTick>
 8004f8e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f90:	e005      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f92:	f7fd ffb9 	bl	8002f08 <HAL_GetTick>
 8004f96:	1b80      	subs	r0, r0, r6
 8004f98:	2802      	cmp	r0, #2
 8004f9a:	f200 810f 	bhi.w	80051bc <HAL_RCCEx_PeriphCLKConfig+0x258>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f9e:	682b      	ldr	r3, [r5, #0]
 8004fa0:	05d9      	lsls	r1, r3, #23
 8004fa2:	d5f6      	bpl.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fa4:	4b93      	ldr	r3, [pc, #588]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004fa6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fa8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fac:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8004fb0:	d028      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004fb2:	428a      	cmp	r2, r1
 8004fb4:	d026      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fb6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004fbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004fca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fd2:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fd6:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 8004fd8:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fdc:	d512      	bpl.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fde:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8004fe0:	f7fd ff92 	bl	8002f08 <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe4:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004fe8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fea:	e006      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd ff8c 	bl	8002f08 <HAL_GetTick>
 8004ff0:	eba0 0008 	sub.w	r0, r0, r8
 8004ff4:	42b0      	cmp	r0, r6
 8004ff6:	f200 80e1 	bhi.w	80051bc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004ffe:	079b      	lsls	r3, r3, #30
 8005000:	d5f4      	bpl.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005002:	6c21      	ldr	r1, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005004:	4a7b      	ldr	r2, [pc, #492]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005006:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800500a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500e:	430b      	orrs	r3, r1
 8005010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005014:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005016:	b127      	cbz	r7, 8005022 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005018:	4a76      	ldr	r2, [pc, #472]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800501a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800501c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005020:	6593      	str	r3, [r2, #88]	; 0x58
 8005022:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005024:	07de      	lsls	r6, r3, #31
 8005026:	d508      	bpl.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005028:	4972      	ldr	r1, [pc, #456]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800502a:	6865      	ldr	r5, [r4, #4]
 800502c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005030:	f022 0203 	bic.w	r2, r2, #3
 8005034:	432a      	orrs	r2, r5
 8005036:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800503a:	079d      	lsls	r5, r3, #30
 800503c:	d508      	bpl.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800503e:	496d      	ldr	r1, [pc, #436]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005040:	68a5      	ldr	r5, [r4, #8]
 8005042:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005046:	f022 020c 	bic.w	r2, r2, #12
 800504a:	432a      	orrs	r2, r5
 800504c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005050:	0759      	lsls	r1, r3, #29
 8005052:	d508      	bpl.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005054:	4967      	ldr	r1, [pc, #412]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005056:	68e5      	ldr	r5, [r4, #12]
 8005058:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800505c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005060:	432a      	orrs	r2, r5
 8005062:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005066:	071a      	lsls	r2, r3, #28
 8005068:	d508      	bpl.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800506a:	4962      	ldr	r1, [pc, #392]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800506c:	6925      	ldr	r5, [r4, #16]
 800506e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005072:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005076:	432a      	orrs	r2, r5
 8005078:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800507c:	069f      	lsls	r7, r3, #26
 800507e:	d508      	bpl.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005080:	495c      	ldr	r1, [pc, #368]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005082:	6965      	ldr	r5, [r4, #20]
 8005084:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005088:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800508c:	432a      	orrs	r2, r5
 800508e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005092:	065e      	lsls	r6, r3, #25
 8005094:	d508      	bpl.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005096:	4957      	ldr	r1, [pc, #348]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005098:	69a5      	ldr	r5, [r4, #24]
 800509a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800509e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80050a2:	432a      	orrs	r2, r5
 80050a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050a8:	061d      	lsls	r5, r3, #24
 80050aa:	d508      	bpl.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ac:	4951      	ldr	r1, [pc, #324]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80050ae:	69e5      	ldr	r5, [r4, #28]
 80050b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80050b4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80050b8:	432a      	orrs	r2, r5
 80050ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050be:	05d9      	lsls	r1, r3, #23
 80050c0:	d508      	bpl.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050c2:	494c      	ldr	r1, [pc, #304]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80050c4:	6a25      	ldr	r5, [r4, #32]
 80050c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80050ca:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80050ce:	432a      	orrs	r2, r5
 80050d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050d4:	059a      	lsls	r2, r3, #22
 80050d6:	d508      	bpl.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050d8:	4946      	ldr	r1, [pc, #280]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80050da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80050dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80050e0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80050e4:	432a      	orrs	r2, r5
 80050e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050ea:	055f      	lsls	r7, r3, #21
 80050ec:	d50b      	bpl.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ee:	4941      	ldr	r1, [pc, #260]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80050f0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80050f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80050f6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80050fa:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050fc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005100:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005104:	d05c      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005106:	051e      	lsls	r6, r3, #20
 8005108:	d50b      	bpl.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800510a:	493a      	ldr	r1, [pc, #232]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800510c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800510e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005112:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005116:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005118:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800511c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005120:	d053      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x266>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005122:	04dd      	lsls	r5, r3, #19
 8005124:	d50b      	bpl.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005126:	4933      	ldr	r1, [pc, #204]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005128:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800512a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800512e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005132:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005134:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005138:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800513c:	d04a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800513e:	0499      	lsls	r1, r3, #18
 8005140:	d50b      	bpl.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005142:	492c      	ldr	r1, [pc, #176]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005144:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005146:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800514a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800514e:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005150:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005154:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005158:	d041      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x27a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800515a:	045a      	lsls	r2, r3, #17
 800515c:	d50b      	bpl.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800515e:	4925      	ldr	r1, [pc, #148]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005160:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005162:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005166:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800516a:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800516c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005170:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005174:	d038      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	d50b      	bpl.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800517c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800517e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005182:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005186:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005188:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800518c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005190:	d00d      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  }

#endif /* QUADSPI */

  return status;
}
 8005192:	b002      	add	sp, #8
 8005194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800519a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800519e:	659a      	str	r2, [r3, #88]	; 0x58
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051aa:	2701      	movs	r7, #1
 80051ac:	e6e8      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051ae:	68d3      	ldr	r3, [r2, #12]
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b4:	60d3      	str	r3, [r2, #12]
}
 80051b6:	b002      	add	sp, #8
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 80051bc:	2003      	movs	r0, #3
 80051be:	e72a      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c0:	68ca      	ldr	r2, [r1, #12]
 80051c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051c6:	60ca      	str	r2, [r1, #12]
 80051c8:	e79d      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ca:	68ca      	ldr	r2, [r1, #12]
 80051cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051d0:	60ca      	str	r2, [r1, #12]
 80051d2:	e7a6      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d4:	68ca      	ldr	r2, [r1, #12]
 80051d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051da:	60ca      	str	r2, [r1, #12]
 80051dc:	e7af      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051de:	68ca      	ldr	r2, [r1, #12]
 80051e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051e4:	60ca      	str	r2, [r1, #12]
 80051e6:	e7b8      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e8:	68ca      	ldr	r2, [r1, #12]
 80051ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051ee:	60ca      	str	r2, [r1, #12]
 80051f0:	e7c1      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40007000 	.word	0x40007000

080051fc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d06b      	beq.n	80052d8 <HAL_TIM_Base_Init+0xdc>
{
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005206:	4604      	mov	r4, r0
 8005208:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800520c:	b363      	cbz	r3, 8005268 <HAL_TIM_Base_Init+0x6c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005210:	4e3b      	ldr	r6, [pc, #236]	; (8005300 <HAL_TIM_Base_Init+0x104>)
 8005212:	69a5      	ldr	r5, [r4, #24]
 8005214:	68e0      	ldr	r0, [r4, #12]
 8005216:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	2302      	movs	r3, #2
 800521a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521e:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005220:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005222:	d05b      	beq.n	80052dc <HAL_TIM_Base_Init+0xe0>
 8005224:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005228:	d03c      	beq.n	80052a4 <HAL_TIM_Base_Init+0xa8>
 800522a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800522e:	42b2      	cmp	r2, r6
 8005230:	d01f      	beq.n	8005272 <HAL_TIM_Base_Init+0x76>
 8005232:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005236:	42b2      	cmp	r2, r6
 8005238:	d01b      	beq.n	8005272 <HAL_TIM_Base_Init+0x76>
 800523a:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 800523e:	42b2      	cmp	r2, r6
 8005240:	d017      	beq.n	8005272 <HAL_TIM_Base_Init+0x76>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005242:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005246:	42b2      	cmp	r2, r6
 8005248:	d057      	beq.n	80052fa <HAL_TIM_Base_Init+0xfe>
 800524a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800524e:	42b2      	cmp	r2, r6
 8005250:	d053      	beq.n	80052fa <HAL_TIM_Base_Init+0xfe>
 8005252:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005256:	42b2      	cmp	r2, r6
 8005258:	d04f      	beq.n	80052fa <HAL_TIM_Base_Init+0xfe>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800525a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525e:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8005260:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005262:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005264:	6291      	str	r1, [r2, #40]	; 0x28
 8005266:	e017      	b.n	8005298 <HAL_TIM_Base_Init+0x9c>
    htim->Lock = HAL_UNLOCKED;
 8005268:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800526c:	f7fd f800 	bl	8002270 <HAL_TIM_Base_MspInit>
 8005270:	e7cd      	b.n	800520e <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8005272:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005274:	4f23      	ldr	r7, [pc, #140]	; (8005304 <HAL_TIM_Base_Init+0x108>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800527a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005288:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528a:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800528c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005290:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005292:	d115      	bne.n	80052c0 <HAL_TIM_Base_Init+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005294:	6963      	ldr	r3, [r4, #20]
 8005296:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005298:	2301      	movs	r3, #1
 800529a:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800529c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800529e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80052a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80052a4:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80052ac:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80052ba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052bc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052be:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <HAL_TIM_Base_Init+0x10c>)
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d0e6      	beq.n	8005294 <HAL_TIM_Base_Init+0x98>
 80052c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d0e2      	beq.n	8005294 <HAL_TIM_Base_Init+0x98>
 80052ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d1e0      	bne.n	8005298 <HAL_TIM_Base_Init+0x9c>
 80052d6:	e7dd      	b.n	8005294 <HAL_TIM_Base_Init+0x98>
    return HAL_ERROR;
 80052d8:	2001      	movs	r0, #1
}
 80052da:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80052dc:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052de:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80052e4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ea:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80052f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052f6:	6291      	str	r1, [r2, #40]	; 0x28
 80052f8:	e7cc      	b.n	8005294 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fa:	6926      	ldr	r6, [r4, #16]
 80052fc:	e7f3      	b.n	80052e6 <HAL_TIM_Base_Init+0xea>
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40013400 	.word	0x40013400
 8005308:	40014000 	.word	0x40014000

0800530c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800530c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <HAL_TIM_Base_Start_IT+0x28>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005310:	68d9      	ldr	r1, [r3, #12]
 8005312:	f041 0101 	orr.w	r1, r1, #1
 8005316:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005318:	6899      	ldr	r1, [r3, #8]
 800531a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	2a06      	cmp	r2, #6
 800531e:	d006      	beq.n	800532e <HAL_TIM_Base_Start_IT+0x22>
 8005320:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005324:	d003      	beq.n	800532e <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	2000      	movs	r0, #0
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	00010007 	.word	0x00010007

08005338 <HAL_TIM_PWM_MspInit>:
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop

0800533c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800533c:	2800      	cmp	r0, #0
 800533e:	d06b      	beq.n	8005418 <HAL_TIM_PWM_Init+0xdc>
{
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005342:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005346:	4604      	mov	r4, r0
 8005348:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800534c:	b363      	cbz	r3, 80053a8 <HAL_TIM_PWM_Init+0x6c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	4e3b      	ldr	r6, [pc, #236]	; (8005440 <HAL_TIM_PWM_Init+0x104>)
 8005352:	69a5      	ldr	r5, [r4, #24]
 8005354:	68e0      	ldr	r0, [r4, #12]
 8005356:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	2302      	movs	r3, #2
 800535a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535e:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005360:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005362:	d05b      	beq.n	800541c <HAL_TIM_PWM_Init+0xe0>
 8005364:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005368:	d03c      	beq.n	80053e4 <HAL_TIM_PWM_Init+0xa8>
 800536a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800536e:	42b2      	cmp	r2, r6
 8005370:	d01f      	beq.n	80053b2 <HAL_TIM_PWM_Init+0x76>
 8005372:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005376:	42b2      	cmp	r2, r6
 8005378:	d01b      	beq.n	80053b2 <HAL_TIM_PWM_Init+0x76>
 800537a:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 800537e:	42b2      	cmp	r2, r6
 8005380:	d017      	beq.n	80053b2 <HAL_TIM_PWM_Init+0x76>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005382:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005386:	42b2      	cmp	r2, r6
 8005388:	d057      	beq.n	800543a <HAL_TIM_PWM_Init+0xfe>
 800538a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800538e:	42b2      	cmp	r2, r6
 8005390:	d053      	beq.n	800543a <HAL_TIM_PWM_Init+0xfe>
 8005392:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005396:	42b2      	cmp	r2, r6
 8005398:	d04f      	beq.n	800543a <HAL_TIM_PWM_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800539a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80053a0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053a4:	6291      	str	r1, [r2, #40]	; 0x28
 80053a6:	e017      	b.n	80053d8 <HAL_TIM_PWM_Init+0x9c>
    htim->Lock = HAL_UNLOCKED;
 80053a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80053ac:	f7ff ffc4 	bl	8005338 <HAL_TIM_PWM_MspInit>
 80053b0:	e7cd      	b.n	800534e <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80053b2:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b4:	4f23      	ldr	r7, [pc, #140]	; (8005444 <HAL_TIM_PWM_Init+0x108>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80053ba:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053bc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c8:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053ca:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80053cc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ce:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053d0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d2:	d115      	bne.n	8005400 <HAL_TIM_PWM_Init+0xc4>
    TIMx->RCR = Structure->RepetitionCounter;
 80053d4:	6963      	ldr	r3, [r4, #20]
 80053d6:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80053d8:	2301      	movs	r3, #1
 80053da:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80053dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80053de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80053e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80053e4:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80053ec:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80053fa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053fc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053fe:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <HAL_TIM_PWM_Init+0x10c>)
 8005402:	429a      	cmp	r2, r3
 8005404:	d0e6      	beq.n	80053d4 <HAL_TIM_PWM_Init+0x98>
 8005406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540a:	429a      	cmp	r2, r3
 800540c:	d0e2      	beq.n	80053d4 <HAL_TIM_PWM_Init+0x98>
 800540e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005412:	429a      	cmp	r2, r3
 8005414:	d1e0      	bne.n	80053d8 <HAL_TIM_PWM_Init+0x9c>
 8005416:	e7dd      	b.n	80053d4 <HAL_TIM_PWM_Init+0x98>
    return HAL_ERROR;
 8005418:	2001      	movs	r0, #1
}
 800541a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800541c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005424:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800542c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005430:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005432:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005434:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005436:	6291      	str	r1, [r2, #40]	; 0x28
 8005438:	e7cc      	b.n	80053d4 <HAL_TIM_PWM_Init+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543a:	6926      	ldr	r6, [r4, #16]
 800543c:	e7f3      	b.n	8005426 <HAL_TIM_PWM_Init+0xea>
 800543e:	bf00      	nop
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000

0800544c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800544c:	2800      	cmp	r0, #0
 800544e:	f000 80aa 	beq.w	80055a6 <HAL_TIM_Encoder_Init+0x15a>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8005456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800545e:	4604      	mov	r4, r0
 8005460:	460d      	mov	r5, r1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d038      	beq.n	80054d8 <HAL_TIM_Encoder_Init+0x8c>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005466:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005468:	4e59      	ldr	r6, [pc, #356]	; (80055d0 <HAL_TIM_Encoder_Init+0x184>)
 800546a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800546e:	68e0      	ldr	r0, [r4, #12]
 8005470:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005472:	2202      	movs	r2, #2
 8005474:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 800547e:	f022 0207 	bic.w	r2, r2, #7
 8005482:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8005486:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	f000 808f 	beq.w	80055aa <HAL_TIM_Encoder_Init+0x15e>
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d06e      	beq.n	8005570 <HAL_TIM_Encoder_Init+0x124>
 8005492:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005496:	42b3      	cmp	r3, r6
 8005498:	d023      	beq.n	80054e2 <HAL_TIM_Encoder_Init+0x96>
 800549a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800549e:	42b3      	cmp	r3, r6
 80054a0:	d01f      	beq.n	80054e2 <HAL_TIM_Encoder_Init+0x96>
 80054a2:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 80054a6:	42b3      	cmp	r3, r6
 80054a8:	d01b      	beq.n	80054e2 <HAL_TIM_Encoder_Init+0x96>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054aa:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80054ae:	42b3      	cmp	r3, r6
 80054b0:	f000 808b 	beq.w	80055ca <HAL_TIM_Encoder_Init+0x17e>
 80054b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054b8:	42b3      	cmp	r3, r6
 80054ba:	f000 8086 	beq.w	80055ca <HAL_TIM_Encoder_Init+0x17e>
 80054be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054c2:	42b3      	cmp	r3, r6
 80054c4:	f000 8081 	beq.w	80055ca <HAL_TIM_Encoder_Init+0x17e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054cc:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 80054d0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d2:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054d4:	6299      	str	r1, [r3, #40]	; 0x28
 80054d6:	e018      	b.n	800550a <HAL_TIM_Encoder_Init+0xbe>
    htim->Lock = HAL_UNLOCKED;
 80054d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80054dc:	f7fc fede 	bl	800229c <HAL_TIM_Encoder_MspInit>
 80054e0:	e7c1      	b.n	8005466 <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 |= Structure->CounterMode;
 80054e2:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e4:	4f3b      	ldr	r7, [pc, #236]	; (80055d4 <HAL_TIM_Encoder_Init+0x188>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80054ea:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ec:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054f8:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 80054fe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005502:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005504:	d143      	bne.n	800558e <HAL_TIM_Encoder_Init+0x142>
    TIMx->RCR = Structure->RepetitionCounter;
 8005506:	6962      	ldr	r2, [r4, #20]
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800550a:	f04f 0c01 	mov.w	ip, #1
 800550e:	f8c3 c014 	str.w	ip, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8005512:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005514:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005516:	69af      	ldr	r7, [r5, #24]
 8005518:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800551a:	692a      	ldr	r2, [r5, #16]
  tmpsmcr |= sConfig->EncoderMode;
 800551c:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005520:	f426 7840 	bic.w	r8, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005524:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005526:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800552a:	0112      	lsls	r2, r2, #4
 800552c:	68ef      	ldr	r7, [r5, #12]
 800552e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8005532:	433a      	orrs	r2, r7
 8005534:	6a2f      	ldr	r7, [r5, #32]
  tmpccer = htim->Instance->CCER;
 8005536:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005538:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800553c:	ea41 0108 	orr.w	r1, r1, r8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005540:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005544:	696f      	ldr	r7, [r5, #20]
 8005546:	686d      	ldr	r5, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005548:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 800554c:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005550:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005554:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8005558:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800555c:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800555e:	4335      	orrs	r5, r6
  htim->Instance->SMCR = tmpsmcr;
 8005560:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8005562:	619a      	str	r2, [r3, #24]
  return HAL_OK;
 8005564:	2000      	movs	r0, #0
  htim->Instance->CCER = tmpccer;
 8005566:	621d      	str	r5, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 8005568:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
}
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8005570:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005572:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005574:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005578:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005584:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8005588:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800558a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800558c:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800558e:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <HAL_TIM_Encoder_Init+0x18c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d0b8      	beq.n	8005506 <HAL_TIM_Encoder_Init+0xba>
 8005594:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005598:	4293      	cmp	r3, r2
 800559a:	d0b4      	beq.n	8005506 <HAL_TIM_Encoder_Init+0xba>
 800559c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d1b2      	bne.n	800550a <HAL_TIM_Encoder_Init+0xbe>
 80055a4:	e7af      	b.n	8005506 <HAL_TIM_Encoder_Init+0xba>
    return HAL_ERROR;
 80055a6:	2001      	movs	r0, #1
}
 80055a8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80055aa:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ac:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055b2:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b8:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055be:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 80055c2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c4:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055c6:	6299      	str	r1, [r3, #40]	; 0x28
 80055c8:	e79d      	b.n	8005506 <HAL_TIM_Encoder_Init+0xba>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	6926      	ldr	r6, [r4, #16]
 80055cc:	e7f2      	b.n	80055b4 <HAL_TIM_Encoder_Init+0x168>
 80055ce:	bf00      	nop
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40013400 	.word	0x40013400
 80055d8:	40014000 	.word	0x40014000

080055dc <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80055dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f000 81b2 	beq.w	800594a <HAL_TIM_PWM_ConfigChannel+0x36e>
{
 80055e6:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80055ea:	2401      	movs	r4, #1
 80055ec:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80055f4:	2a14      	cmp	r2, #20
 80055f6:	d854      	bhi.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0xc6>
 80055f8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80055fc:	00530015 	.word	0x00530015
 8005600:	00530053 	.word	0x00530053
 8005604:	0053009c 	.word	0x0053009c
 8005608:	00530053 	.word	0x00530053
 800560c:	00530166 	.word	0x00530166
 8005610:	00530053 	.word	0x00530053
 8005614:	005300e0 	.word	0x005300e0
 8005618:	00530053 	.word	0x00530053
 800561c:	00530124 	.word	0x00530124
 8005620:	00530053 	.word	0x00530053
 8005624:	005c      	.short	0x005c
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005626:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005628:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800562e:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005630:	4ea4      	ldr	r6, [pc, #656]	; (80058c4 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005632:	f025 0501 	bic.w	r5, r5, #1
 8005636:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005638:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800563a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800563c:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800563e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8005642:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005646:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800564a:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 800564c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8005650:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005654:	d008      	beq.n	8005668 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005656:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800565a:	42b3      	cmp	r3, r6
 800565c:	d004      	beq.n	8005668 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800565e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005662:	42b3      	cmp	r3, r6
 8005664:	f040 818b 	bne.w	800597e <HAL_TIM_PWM_ConfigChannel+0x3a2>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005668:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800566a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800566e:	4332      	orrs	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005670:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005674:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005678:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800567a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800567e:	4335      	orrs	r5, r6

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005680:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005682:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005684:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005686:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800568a:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800568c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800568e:	f044 0408 	orr.w	r4, r4, #8
 8005692:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005694:	6999      	ldr	r1, [r3, #24]
 8005696:	f021 0104 	bic.w	r1, r1, #4
 800569a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	432a      	orrs	r2, r5
 80056a0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80056a2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	2201      	movs	r2, #1
 80056a6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80056aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80056ae:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80056b0:	4618      	mov	r0, r3
}
 80056b2:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056b4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056b6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056ba:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056bc:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056be:	4e81      	ldr	r6, [pc, #516]	; (80058c4 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056c0:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 80056c4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80056c6:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80056c8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80056ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056d0:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056da:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056de:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e2:	d00f      	beq.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x128>
 80056e4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80056e8:	42b3      	cmp	r3, r6
 80056ea:	d00b      	beq.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x128>
 80056ec:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80056f0:	42b3      	cmp	r3, r6
 80056f2:	d007      	beq.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x128>
 80056f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80056f8:	42b3      	cmp	r3, r6
 80056fa:	d003      	beq.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x128>
 80056fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005700:	42b3      	cmp	r3, r6
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_ConfigChannel+0x132>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005704:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005706:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800570a:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800570e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005710:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005712:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005714:	64de      	str	r6, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005716:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005718:	6d1c      	ldr	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800571a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800571c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005720:	651c      	str	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005722:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005724:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005728:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800572a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800572c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005732:	e7b6      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005734:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005736:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800573e:	4e61      	ldr	r6, [pc, #388]	; (80058c4 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005740:	f025 0510 	bic.w	r5, r5, #16
 8005744:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005746:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005748:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800574a:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800574c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8005750:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005754:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005758:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800575a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800575e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005762:	f000 80f4 	beq.w	800594e <HAL_TIM_PWM_ConfigChannel+0x372>
 8005766:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800576a:	42b3      	cmp	r3, r6
 800576c:	f000 80ef 	beq.w	800594e <HAL_TIM_PWM_ConfigChannel+0x372>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005770:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005774:	42b3      	cmp	r3, r6
 8005776:	d007      	beq.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005778:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800577c:	42b3      	cmp	r3, r6
 800577e:	d003      	beq.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8005780:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005784:	42b3      	cmp	r3, r6
 8005786:	d106      	bne.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x1ba>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005788:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800578c:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005790:	433e      	orrs	r6, r7
 8005792:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005796:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005798:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800579a:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800579c:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800579e:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057a0:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057a2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80057a8:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057aa:	6999      	ldr	r1, [r3, #24]
 80057ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80057b0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80057b8:	619a      	str	r2, [r3, #24]
      break;
 80057ba:	e772      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057bc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057be:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057c6:	4e3f      	ldr	r6, [pc, #252]	; (80058c4 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c8:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80057cc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80057ce:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80057d0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80057d2:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057d4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 80057d8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057dc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057e0:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057e2:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057ea:	f000 80c0 	beq.w	800596e <HAL_TIM_PWM_ConfigChannel+0x392>
 80057ee:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80057f2:	42b3      	cmp	r3, r6
 80057f4:	f000 80bb 	beq.w	800596e <HAL_TIM_PWM_ConfigChannel+0x392>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80057fc:	42b3      	cmp	r3, r6
 80057fe:	d007      	beq.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005800:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005804:	42b3      	cmp	r3, r6
 8005806:	d003      	beq.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x234>
 8005808:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800580c:	42b3      	cmp	r3, r6
 800580e:	d106      	bne.n	800581e <HAL_TIM_PWM_ConfigChannel+0x242>
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005810:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005814:	f425 4540 	bic.w	r5, r5, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005818:	433e      	orrs	r6, r7
 800581a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800581e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005820:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005822:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005824:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005826:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005828:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800582a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800582c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005830:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005832:	69d9      	ldr	r1, [r3, #28]
 8005834:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005838:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005840:	61da      	str	r2, [r3, #28]
      break;
 8005842:	e72e      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005844:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005846:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800584a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800584c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584e:	4e1d      	ldr	r6, [pc, #116]	; (80058c4 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005850:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 8005854:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005856:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005858:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800585a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800585c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8005860:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005864:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800586a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800586e:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	d00f      	beq.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8005874:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005878:	42b3      	cmp	r3, r6
 800587a:	d00b      	beq.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 800587c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005880:	42b3      	cmp	r3, r6
 8005882:	d007      	beq.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8005884:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005888:	42b3      	cmp	r3, r6
 800588a:	d003      	beq.n	8005894 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 800588c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005890:	42b3      	cmp	r3, r6
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_ConfigChannel+0x2c2>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005894:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005896:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800589a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800589e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80058a0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80058a2:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80058a4:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80058a6:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058a8:	6d1c      	ldr	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058aa:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058ac:	f044 0408 	orr.w	r4, r4, #8
 80058b0:	651c      	str	r4, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80058b4:	f021 0104 	bic.w	r1, r1, #4
 80058b8:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058bc:	432a      	orrs	r2, r5
 80058be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80058c0:	e6ef      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0xc6>
 80058c2:	bf00      	nop
 80058c4:	40012c00 	.word	0x40012c00
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058c8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ca:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ce:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058d2:	4e30      	ldr	r6, [pc, #192]	; (8005994 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d4:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80058d8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80058da:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80058dc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80058de:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80058e4:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ec:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ee:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80058f2:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f6:	d032      	beq.n	800595e <HAL_TIM_PWM_ConfigChannel+0x382>
 80058f8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80058fc:	42b3      	cmp	r3, r6
 80058fe:	d02e      	beq.n	800595e <HAL_TIM_PWM_ConfigChannel+0x382>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005904:	42b3      	cmp	r3, r6
 8005906:	d007      	beq.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005908:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800590c:	42b3      	cmp	r3, r6
 800590e:	d003      	beq.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005910:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005914:	42b3      	cmp	r3, r6
 8005916:	d106      	bne.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x34a>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005918:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591c:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005920:	433e      	orrs	r6, r7
 8005922:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 8005926:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005928:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800592a:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800592c:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800592e:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005930:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005932:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005934:	f044 0408 	orr.w	r4, r4, #8
 8005938:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800593a:	69d9      	ldr	r1, [r3, #28]
 800593c:	f021 0104 	bic.w	r1, r1, #4
 8005940:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	432a      	orrs	r2, r5
 8005946:	61da      	str	r2, [r3, #28]
      break;
 8005948:	e6ab      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 800594a:	2002      	movs	r0, #2
}
 800594c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800594e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005950:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005954:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005958:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800595c:	e714      	b.n	8005788 <HAL_TIM_PWM_ConfigChannel+0x1ac>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800595e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005960:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005964:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005968:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800596c:	e7d4      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x33c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800596e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005970:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005974:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005978:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800597c:	e748      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x234>
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800597e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005982:	42b3      	cmp	r3, r6
 8005984:	f43f ae70 	beq.w	8005668 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005988:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800598c:	42b3      	cmp	r3, r6
 800598e:	f47f ae77 	bne.w	8005680 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8005992:	e669      	b.n	8005668 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005994:	40012c00 	.word	0x40012c00

08005998 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005998:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d04e      	beq.n	8005a3e <HAL_TIM_SlaveConfigSynchro+0xa6>
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80059a2:	2302      	movs	r3, #2
{
 80059a4:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80059a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80059aa:	6893      	ldr	r3, [r2, #8]
 80059ac:	4604      	mov	r4, r0
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059ae:	e9d1 5000 	ldrd	r5, r0, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059ba:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c0:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059c4:	432b      	orrs	r3, r5
  __HAL_LOCK(htim);
 80059c6:	2601      	movs	r6, #1

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80059c8:	2850      	cmp	r0, #80	; 0x50
  __HAL_LOCK(htim);
 80059ca:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80059ce:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 80059d0:	d052      	beq.n	8005a78 <HAL_TIM_SlaveConfigSynchro+0xe0>
 80059d2:	d91f      	bls.n	8005a14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80059d4:	2860      	cmp	r0, #96	; 0x60
 80059d6:	d03c      	beq.n	8005a52 <HAL_TIM_SlaveConfigSynchro+0xba>
 80059d8:	2870      	cmp	r0, #112	; 0x70
 80059da:	d10a      	bne.n	80059f2 <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059dc:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80059e0:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 80059e2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e4:	432b      	orrs	r3, r5
 80059e6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ea:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059ee:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f0:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059f2:	68d3      	ldr	r3, [r2, #12]
 80059f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059fa:	68d3      	ldr	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 80059fe:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a04:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005a06:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 8005a08:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005a0c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 8005a10:	bcf0      	pop	{r4, r5, r6, r7}
 8005a12:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005a14:	2840      	cmp	r0, #64	; 0x40
 8005a16:	d1ec      	bne.n	80059f2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005a18:	2d05      	cmp	r5, #5
 8005a1a:	d012      	beq.n	8005a42 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005a1c:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8005a20:	d00f      	beq.n	8005a42 <HAL_TIM_SlaveConfigSynchro+0xaa>
      tmpccer = htim->Instance->CCER;
 8005a22:	6a15      	ldr	r5, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a24:	6a10      	ldr	r0, [r2, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a26:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a28:	f020 0001 	bic.w	r0, r0, #1
 8005a2c:	6210      	str	r0, [r2, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005a2e:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a34:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005a38:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8005a3a:	6215      	str	r5, [r2, #32]
 8005a3c:	e7d9      	b.n	80059f2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_LOCK(htim);
 8005a3e:	2002      	movs	r0, #2
}
 8005a40:	4770      	bx	lr
    htim->State = HAL_TIM_STATE_READY;
 8005a42:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005a44:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005a46:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8005a50:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a52:	6a10      	ldr	r0, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a54:	688d      	ldr	r5, [r1, #8]
 8005a56:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a58:	f020 0010 	bic.w	r0, r0, #16
 8005a5c:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8005a60:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a62:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a6a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a6e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005a72:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8005a74:	6213      	str	r3, [r2, #32]
 8005a76:	e7bc      	b.n	80059f2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpccer = TIMx->CCER;
 8005a78:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7a:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7c:	6888      	ldr	r0, [r1, #8]
 8005a7e:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a80:	f026 0601 	bic.w	r6, r6, #1
 8005a84:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a88:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005a90:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a92:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005a96:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8005a98:	6211      	str	r1, [r2, #32]
 8005a9a:	e7aa      	b.n	80059f2 <HAL_TIM_SlaveConfigSynchro+0x5a>

08005a9c <HAL_TIM_OC_DelayElapsedCallback>:
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop

08005aa0 <HAL_TIM_IC_CaptureCallback>:
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop

08005aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop

08005aa8 <HAL_TIM_TriggerCallback>:
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop

08005aac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aac:	6803      	ldr	r3, [r0, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	0791      	lsls	r1, r2, #30
{
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ab6:	d503      	bpl.n	8005ac0 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	0792      	lsls	r2, r2, #30
 8005abc:	f100 808a 	bmi.w	8005bd4 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	0752      	lsls	r2, r2, #29
 8005ac4:	d502      	bpl.n	8005acc <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	0750      	lsls	r0, r2, #29
 8005aca:	d470      	bmi.n	8005bae <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	0711      	lsls	r1, r2, #28
 8005ad0:	d502      	bpl.n	8005ad8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	0712      	lsls	r2, r2, #28
 8005ad6:	d458      	bmi.n	8005b8a <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	06d1      	lsls	r1, r2, #27
 8005adc:	d502      	bpl.n	8005ae4 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	06d2      	lsls	r2, r2, #27
 8005ae2:	d43e      	bmi.n	8005b62 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	07d0      	lsls	r0, r2, #31
 8005ae8:	d503      	bpl.n	8005af2 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	07d1      	lsls	r1, r2, #31
 8005aee:	f100 808a 	bmi.w	8005c06 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	0612      	lsls	r2, r2, #24
 8005af6:	d503      	bpl.n	8005b00 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	0610      	lsls	r0, r2, #24
 8005afc:	f100 808b 	bmi.w	8005c16 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	05d1      	lsls	r1, r2, #23
 8005b04:	d503      	bpl.n	8005b0e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	0612      	lsls	r2, r2, #24
 8005b0a:	f100 808c 	bmi.w	8005c26 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	0650      	lsls	r0, r2, #25
 8005b12:	d503      	bpl.n	8005b1c <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	0651      	lsls	r1, r2, #25
 8005b18:	f100 808d 	bmi.w	8005c36 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	0692      	lsls	r2, r2, #26
 8005b20:	d503      	bpl.n	8005b2a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	0690      	lsls	r0, r2, #26
 8005b26:	f100 808e 	bmi.w	8005c46 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	02d1      	lsls	r1, r2, #11
 8005b2e:	d503      	bpl.n	8005b38 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	02d2      	lsls	r2, r2, #11
 8005b34:	f100 808f 	bmi.w	8005c56 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	0290      	lsls	r0, r2, #10
 8005b3c:	d503      	bpl.n	8005b46 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	0291      	lsls	r1, r2, #10
 8005b42:	f100 8090 	bmi.w	8005c66 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	0252      	lsls	r2, r2, #9
 8005b4a:	d503      	bpl.n	8005b54 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	0250      	lsls	r0, r2, #9
 8005b50:	f100 8091 	bmi.w	8005c76 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	0211      	lsls	r1, r2, #8
 8005b58:	d502      	bpl.n	8005b60 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	0212      	lsls	r2, r2, #8
 8005b5e:	d44a      	bmi.n	8005bf6 <HAL_TIM_IRQHandler+0x14a>
}
 8005b60:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b62:	f06f 0210 	mvn.w	r2, #16
 8005b66:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b68:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b6c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b70:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b74:	f040 8090 	bne.w	8005c98 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b78:	f7ff ff90 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff ff91 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	2200      	movs	r2, #0
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	7722      	strb	r2, [r4, #28]
 8005b88:	e7ac      	b.n	8005ae4 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b8a:	f06f 0208 	mvn.w	r2, #8
 8005b8e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b90:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b92:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b94:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b96:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005b98:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b9a:	d17a      	bne.n	8005c92 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9c:	f7ff ff7e 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f7ff ff7f 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	7722      	strb	r2, [r4, #28]
 8005bac:	e794      	b.n	8005ad8 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bae:	f06f 0204 	mvn.w	r2, #4
 8005bb2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bb6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bbc:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc0:	d164      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	f7ff ff6b 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f7ff ff6c 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bcc:	2200      	movs	r2, #0
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	7722      	strb	r2, [r4, #28]
 8005bd2:	e77b      	b.n	8005acc <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bd4:	f06f 0202 	mvn.w	r2, #2
 8005bd8:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bda:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bdc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bde:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be2:	d150      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be4:	f7ff ff5a 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7ff ff5b 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	2200      	movs	r2, #0
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	7722      	strb	r2, [r4, #28]
 8005bf4:	e764      	b.n	8005ac0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005bf6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005bfa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005bfc:	611a      	str	r2, [r3, #16]
}
 8005bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c02:	f000 b92b 	b.w	8005e5c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c06:	f06f 0201 	mvn.w	r2, #1
 8005c0a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f7fa ffdf 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	e76d      	b.n	8005af2 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 f913 	bl	8005e48 <HAL_TIMEx_BreakCallback>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	e76c      	b.n	8005b00 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f000 f90d 	bl	8005e4c <HAL_TIMEx_Break2Callback>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	e76b      	b.n	8005b0e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff ff33 	bl	8005aa8 <HAL_TIM_TriggerCallback>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	e76a      	b.n	8005b1c <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c46:	f06f 0220 	mvn.w	r2, #32
 8005c4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f8f9 	bl	8005e44 <HAL_TIMEx_CommutCallback>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	e769      	b.n	8005b2a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005c56:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005c5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f000 f8f7 	bl	8005e50 <HAL_TIMEx_EncoderIndexCallback>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	e768      	b.n	8005b38 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005c66:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005c6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 f8f1 	bl	8005e54 <HAL_TIMEx_DirectionChangeCallback>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	e767      	b.n	8005b46 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005c76:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005c7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f000 f8eb 	bl	8005e58 <HAL_TIMEx_IndexErrorCallback>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	e766      	b.n	8005b54 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8005c86:	f7ff ff0b 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8005c8a:	e7b0      	b.n	8005bee <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8c:	f7ff ff08 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8005c90:	e79c      	b.n	8005bcc <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	f7ff ff05 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8005c96:	e786      	b.n	8005ba6 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c98:	f7ff ff02 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e771      	b.n	8005b82 <HAL_TIM_IRQHandler+0xd6>
 8005c9e:	bf00      	nop

08005ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ca0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d027      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
{
 8005ca8:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005caa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cac:	4d14      	ldr	r5, [pc, #80]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cb4:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005cb6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005cb8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cba:	d018      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005cbc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005cc0:	42aa      	cmp	r2, r5
 8005cc2:	d014      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc4:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cc6:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005ccc:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005cd4:	2400      	movs	r4, #0
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cd6:	4333      	orrs	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cd8:	4329      	orrs	r1, r5
  htim->State = HAL_TIM_STATE_READY;
 8005cda:	2501      	movs	r5, #1
  htim->Instance->CR2 = tmpcr2;
 8005cdc:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8005cde:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005ce4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005ce8:	4620      	mov	r0, r4
 8005cea:	bc70      	pop	{r4, r5, r6}
 8005cec:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cee:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf4:	432b      	orrs	r3, r5
 8005cf6:	e7e5      	b.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8005cf8:	2302      	movs	r3, #2
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40012c00 	.word	0x40012c00

08005d04 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d044      	beq.n	8005d96 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8005d0c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d0e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8005d12:	4602      	mov	r2, r0
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d18:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d1c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d22:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d28:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d2c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d32:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d38:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d3a:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d3c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d42:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d44:	4c15      	ldr	r4, [pc, #84]	; (8005d9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005d46:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d48:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d4c:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d4e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d52:	d00a      	beq.n	8005d6a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8005d54:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d006      	beq.n	8005d6a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005d5c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005d5e:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8005d60:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005d62:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8005d64:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8005d68:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d6a:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d6c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d72:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d78:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d7c:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d84:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d86:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d8a:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d8c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005d8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d92:	430b      	orrs	r3, r1
 8005d94:	e7e2      	b.n	8005d5c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005d96:	2002      	movs	r0, #2
}
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00

08005da0 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d048      	beq.n	8005e3a <HAL_TIMEx_ConfigBreakInput+0x9a>
 8005da8:	6813      	ldr	r3, [r2, #0]
 8005daa:	3b01      	subs	r3, #1
{
 8005dac:	b4f0      	push	{r4, r5, r6, r7}
 8005dae:	2b0f      	cmp	r3, #15
  __HAL_LOCK(htim);
 8005db0:	f04f 0401 	mov.w	r4, #1
 8005db4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
 8005db8:	d91d      	bls.n	8005df6 <HAL_TIMEx_ConfigBreakInput+0x56>

  switch (sBreakInputConfig->Source)
 8005dba:	2500      	movs	r5, #0
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8005dbc:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8005dbe:	462f      	mov	r7, r5
 8005dc0:	462c      	mov	r4, r5
 8005dc2:	462e      	mov	r6, r5
  switch (BreakInput)
 8005dc4:	d023      	beq.n	8005e0e <HAL_TIMEx_ConfigBreakInput+0x6e>
 8005dc6:	2902      	cmp	r1, #2
 8005dc8:	d10f      	bne.n	8005dea <HAL_TIMEx_ConfigBreakInput+0x4a>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8005dca:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005dcc:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8005dce:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005dd2:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005dd4:	40bb      	lsls	r3, r7
 8005dd6:	ea83 030c 	eor.w	r3, r3, ip
 8005dda:	4033      	ands	r3, r6
 8005ddc:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005de0:	40aa      	lsls	r2, r5
 8005de2:	405a      	eors	r2, r3
 8005de4:	4022      	ands	r2, r4
 8005de6:	4053      	eors	r3, r2

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8005de8:	664b      	str	r3, [r1, #100]	; 0x64
    }
    default:
      break;
  }

  __HAL_UNLOCK(htim);
 8005dea:	2300      	movs	r3, #0
 8005dec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005df0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005df2:	4618      	mov	r0, r3
}
 8005df4:	4770      	bx	lr
 8005df6:	4c12      	ldr	r4, [pc, #72]	; (8005e40 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8005df8:	eb04 0583 	add.w	r5, r4, r3, lsl #2
  switch (BreakInput)
 8005dfc:	2901      	cmp	r1, #1
 8005dfe:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 8005e02:	f8d5 7080 	ldr.w	r7, [r5, #128]	; 0x80
 8005e06:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8005e08:	f8d5 50c0 	ldr.w	r5, [r5, #192]	; 0xc0
 8005e0c:	d1db      	bne.n	8005dc6 <HAL_TIMEx_ConfigBreakInput+0x26>
      tmporx = htim->Instance->AF1;
 8005e0e:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005e10:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8005e12:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005e16:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005e18:	40bb      	lsls	r3, r7
 8005e1a:	ea83 030c 	eor.w	r3, r3, ip
 8005e1e:	4033      	ands	r3, r6
 8005e20:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005e24:	40aa      	lsls	r2, r5
 8005e26:	405a      	eors	r2, r3
 8005e28:	4022      	ands	r2, r4
 8005e2a:	4053      	eors	r3, r2
      htim->Instance->AF1 = tmporx;
 8005e2c:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8005e34:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005e36:	4618      	mov	r0, r3
}
 8005e38:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e3a:	2002      	movs	r0, #2
}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	08009ef4 	.word	0x08009ef4

08005e44 <HAL_TIMEx_CommutCallback>:
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop

08005e48 <HAL_TIMEx_BreakCallback>:
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop

08005e4c <HAL_TIMEx_Break2Callback>:
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop

08005e50 <HAL_TIMEx_EncoderIndexCallback>:
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <HAL_TIMEx_DirectionChangeCallback>:
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <HAL_TIMEx_IndexErrorCallback>:
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <HAL_TIMEx_TransitionErrorCallback>:
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop

08005e60 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e62:	07da      	lsls	r2, r3, #31
{
 8005e64:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e66:	d506      	bpl.n	8005e76 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e68:	6801      	ldr	r1, [r0, #0]
 8005e6a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005e6c:	684a      	ldr	r2, [r1, #4]
 8005e6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e72:	4322      	orrs	r2, r4
 8005e74:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e76:	079c      	lsls	r4, r3, #30
 8005e78:	d506      	bpl.n	8005e88 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e7a:	6801      	ldr	r1, [r0, #0]
 8005e7c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005e7e:	684a      	ldr	r2, [r1, #4]
 8005e80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e84:	4322      	orrs	r2, r4
 8005e86:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e88:	0759      	lsls	r1, r3, #29
 8005e8a:	d506      	bpl.n	8005e9a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e8c:	6801      	ldr	r1, [r0, #0]
 8005e8e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005e90:	684a      	ldr	r2, [r1, #4]
 8005e92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e96:	4322      	orrs	r2, r4
 8005e98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9a:	071a      	lsls	r2, r3, #28
 8005e9c:	d506      	bpl.n	8005eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e9e:	6801      	ldr	r1, [r0, #0]
 8005ea0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005ea2:	684a      	ldr	r2, [r1, #4]
 8005ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ea8:	4322      	orrs	r2, r4
 8005eaa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eac:	06dc      	lsls	r4, r3, #27
 8005eae:	d506      	bpl.n	8005ebe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb0:	6801      	ldr	r1, [r0, #0]
 8005eb2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005eb4:	688a      	ldr	r2, [r1, #8]
 8005eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005eba:	4322      	orrs	r2, r4
 8005ebc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ebe:	0699      	lsls	r1, r3, #26
 8005ec0:	d506      	bpl.n	8005ed0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ec2:	6801      	ldr	r1, [r0, #0]
 8005ec4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005ec6:	688a      	ldr	r2, [r1, #8]
 8005ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ecc:	4322      	orrs	r2, r4
 8005ece:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed0:	065a      	lsls	r2, r3, #25
 8005ed2:	d509      	bpl.n	8005ee8 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed4:	6801      	ldr	r1, [r0, #0]
 8005ed6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005ed8:	684a      	ldr	r2, [r1, #4]
 8005eda:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005ede:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ee0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ee6:	d00b      	beq.n	8005f00 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee8:	061b      	lsls	r3, r3, #24
 8005eea:	d506      	bpl.n	8005efa <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eec:	6802      	ldr	r2, [r0, #0]
 8005eee:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005ef0:	6853      	ldr	r3, [r2, #4]
 8005ef2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6053      	str	r3, [r2, #4]
  }
}
 8005efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efe:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f00:	684a      	ldr	r2, [r1, #4]
 8005f02:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005f04:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005f08:	4322      	orrs	r2, r4
 8005f0a:	604a      	str	r2, [r1, #4]
 8005f0c:	e7ec      	b.n	8005ee8 <UART_AdvFeatureConfig+0x88>
 8005f0e:	bf00      	nop

08005f10 <HAL_UART_Init>:
  if (huart == NULL)
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f000 8267 	beq.w	80063e4 <HAL_UART_Init+0x4d4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f16:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8005f1a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005f1e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d046      	beq.n	8005fb2 <HAL_UART_Init+0xa2>
  __HAL_UART_DISABLE(huart);
 8005f24:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f26:	48b9      	ldr	r0, [pc, #740]	; (800620c <HAL_UART_Init+0x2fc>)
  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	2224      	movs	r2, #36	; 0x24
 8005f2a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f2e:	e9d4 6504 	ldrd	r6, r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8005f32:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f34:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8005f36:	f021 0101 	bic.w	r1, r1, #1
 8005f3a:	6019      	str	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f3c:	4332      	orrs	r2, r6
 8005f3e:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f40:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f42:	432a      	orrs	r2, r5
  tmpreg |= (uint32_t)huart->FifoMode;
 8005f44:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f46:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f48:	4030      	ands	r0, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 8005f4a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f4c:	4302      	orrs	r2, r0
 8005f4e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f54:	48ae      	ldr	r0, [pc, #696]	; (8006210 <HAL_UART_Init+0x300>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f56:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f5c:	432a      	orrs	r2, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f5e:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f64:	d02a      	beq.n	8005fbc <HAL_UART_Init+0xac>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f66:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005f68:	6a22      	ldr	r2, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6a:	4faa      	ldr	r7, [pc, #680]	; (8006214 <HAL_UART_Init+0x304>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f6c:	f020 406e 	bic.w	r0, r0, #3992977408	; 0xee000000
 8005f70:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8005f74:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f76:	4302      	orrs	r2, r0
 8005f78:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7c:	f022 020f 	bic.w	r2, r2, #15
 8005f80:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f82:	42bb      	cmp	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f86:	d07d      	beq.n	8006084 <HAL_UART_Init+0x174>
 8005f88:	4aa3      	ldr	r2, [pc, #652]	; (8006218 <HAL_UART_Init+0x308>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f000 8094 	beq.w	80060b8 <HAL_UART_Init+0x1a8>
 8005f90:	4aa2      	ldr	r2, [pc, #648]	; (800621c <HAL_UART_Init+0x30c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	f000 814a 	beq.w	800622c <HAL_UART_Init+0x31c>
 8005f98:	4aa1      	ldr	r2, [pc, #644]	; (8006220 <HAL_UART_Init+0x310>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f000 8184 	beq.w	80062a8 <HAL_UART_Init+0x398>
  huart->RxISR = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005fa6:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005faa:	6723      	str	r3, [r4, #112]	; 0x70
    return HAL_ERROR;
 8005fac:	2001      	movs	r0, #1
}
 8005fae:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    huart->Lock = HAL_UNLOCKED;
 8005fb2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8005fb6:	f7fc f9ff 	bl	80023b8 <HAL_UART_MspInit>
 8005fba:	e7b3      	b.n	8005f24 <HAL_UART_Init+0x14>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fbc:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fbe:	4899      	ldr	r0, [pc, #612]	; (8006224 <HAL_UART_Init+0x314>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc0:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8005fc4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005fc8:	4331      	orrs	r1, r6
 8005fca:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	f022 020f 	bic.w	r2, r2, #15
 8005fd2:	432a      	orrs	r2, r5
 8005fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005fda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	f000 8233 	beq.w	800644c <HAL_UART_Init+0x53c>
 8005fe6:	f240 81ff 	bls.w	80063e8 <HAL_UART_Init+0x4d8>
 8005fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fee:	f000 8370 	beq.w	80066d2 <HAL_UART_Init+0x7c2>
 8005ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff6:	d1d3      	bne.n	8005fa0 <HAL_UART_Init+0x90>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	f000 8394 	beq.w	8006726 <HAL_UART_Init+0x816>
 8005ffe:	2d01      	cmp	r5, #1
 8006000:	f000 83b5 	beq.w	800676e <HAL_UART_Init+0x85e>
 8006004:	2d02      	cmp	r5, #2
 8006006:	f000 83c4 	beq.w	8006792 <HAL_UART_Init+0x882>
 800600a:	2d03      	cmp	r5, #3
 800600c:	f000 83e6 	beq.w	80067dc <HAL_UART_Init+0x8cc>
 8006010:	2d04      	cmp	r5, #4
 8006012:	f000 83fa 	beq.w	800680a <HAL_UART_Init+0x8fa>
 8006016:	2d05      	cmp	r5, #5
 8006018:	f000 8412 	beq.w	8006840 <HAL_UART_Init+0x930>
 800601c:	2d06      	cmp	r5, #6
 800601e:	f000 843b 	beq.w	8006898 <HAL_UART_Init+0x988>
 8006022:	2d07      	cmp	r5, #7
 8006024:	f000 8484 	beq.w	8006930 <HAL_UART_Init+0xa20>
 8006028:	2d08      	cmp	r5, #8
 800602a:	f000 84a8 	beq.w	800697e <HAL_UART_Init+0xa6e>
 800602e:	2d09      	cmp	r5, #9
 8006030:	f000 84ae 	beq.w	8006990 <HAL_UART_Init+0xa80>
 8006034:	2d0a      	cmp	r5, #10
 8006036:	f000 84ef 	beq.w	8006a18 <HAL_UART_Init+0xb08>
 800603a:	2d0b      	cmp	r5, #11
 800603c:	bf0c      	ite	eq
 800603e:	2080      	moveq	r0, #128	; 0x80
 8006040:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8006044:	2308      	movs	r3, #8
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800604c:	4281      	cmp	r1, r0
 800604e:	d8a7      	bhi.n	8005fa0 <HAL_UART_Init+0x90>
 8006050:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006054:	d8a4      	bhi.n	8005fa0 <HAL_UART_Init+0x90>
        switch (clocksource)
 8006056:	2b08      	cmp	r3, #8
 8006058:	d8a2      	bhi.n	8005fa0 <HAL_UART_Init+0x90>
 800605a:	a101      	add	r1, pc, #4	; (adr r1, 8006060 <HAL_UART_Init+0x150>)
 800605c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006060:	08006655 	.word	0x08006655
 8006064:	08005fa1 	.word	0x08005fa1
 8006068:	08006609 	.word	0x08006609
 800606c:	08005fa1 	.word	0x08005fa1
 8006070:	080066c7 	.word	0x080066c7
 8006074:	08005fa1 	.word	0x08005fa1
 8006078:	08005fa1 	.word	0x08005fa1
 800607c:	08005fa1 	.word	0x08005fa1
 8006080:	08006591 	.word	0x08006591
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006084:	4a67      	ldr	r2, [pc, #412]	; (8006224 <HAL_UART_Init+0x314>)
 8006086:	4b68      	ldr	r3, [pc, #416]	; (8006228 <HAL_UART_Init+0x318>)
 8006088:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800608c:	f002 0203 	and.w	r2, r2, #3
 8006090:	4413      	add	r3, r2
 8006092:	7c1b      	ldrb	r3, [r3, #16]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006094:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006098:	f000 818b 	beq.w	80063b2 <HAL_UART_Init+0x4a2>
    switch (clocksource)
 800609c:	2b08      	cmp	r3, #8
 800609e:	f200 8315 	bhi.w	80066cc <HAL_UART_Init+0x7bc>
 80060a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80060a6:	00ab      	.short	0x00ab
 80060a8:	00d20011 	.word	0x00d20011
 80060ac:	00840313 	.word	0x00840313
 80060b0:	03130313 	.word	0x03130313
 80060b4:	01130313 	.word	0x01130313
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060b8:	4b5a      	ldr	r3, [pc, #360]	; (8006224 <HAL_UART_Init+0x314>)
 80060ba:	4a5b      	ldr	r2, [pc, #364]	; (8006228 <HAL_UART_Init+0x318>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f003 030c 	and.w	r3, r3, #12
 80060c4:	5cd3      	ldrb	r3, [r2, r3]
 80060c6:	e7e5      	b.n	8006094 <HAL_UART_Init+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c8:	f7fe ff10 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d172      	bne.n	80061b8 <HAL_UART_Init+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d2:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 80060d4:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d6:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 80060da:	fbb3 f3f1 	udiv	r3, r3, r1
 80060de:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e0:	f1a3 0010 	sub.w	r0, r3, #16
 80060e4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80060e8:	4288      	cmp	r0, r1
 80060ea:	f63f af59 	bhi.w	8005fa0 <HAL_UART_Init+0x90>
      huart->Instance->BRR = usartdiv;
 80060ee:	6825      	ldr	r5, [r4, #0]
  huart->RxISR = NULL;
 80060f0:	2100      	movs	r1, #0
  huart->NbRxDataToProcess = 1;
 80060f2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      huart->Instance->BRR = usartdiv;
 80060f6:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 80060f8:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80060fc:	6721      	str	r1, [r4, #112]	; 0x70
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060fe:	2a00      	cmp	r2, #0
 8006100:	f47f af54 	bne.w	8005fac <HAL_UART_Init+0x9c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006104:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 814f 	bne.w	80063aa <HAL_UART_Init+0x49a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006114:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800611c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800611e:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800612c:	f7fc feec 	bl	8002f08 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8006136:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006138:	d40c      	bmi.n	8006154 <HAL_UART_Init+0x244>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	0752      	lsls	r2, r2, #29
 800613e:	d426      	bmi.n	800618e <HAL_UART_Init+0x27e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006140:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8006142:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006144:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8006148:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800614c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8006150:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006154:	69dd      	ldr	r5, [r3, #28]
 8006156:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800615a:	d1ee      	bne.n	800613a <HAL_UART_Init+0x22a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615c:	f7fc fed4 	bl	8002f08 <HAL_GetTick>
 8006160:	1b80      	subs	r0, r0, r6
 8006162:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006166:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006168:	d3f4      	bcc.n	8006154 <HAL_UART_Init+0x244>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006170:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	689a      	ldr	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006174:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 800617c:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800617e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;

        __HAL_UNLOCK(huart);
 8006182:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006186:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 800618a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618e:	69dd      	ldr	r5, [r3, #28]
 8006190:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8006194:	d1d4      	bne.n	8006140 <HAL_UART_Init+0x230>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fc feb7 	bl	8002f08 <HAL_GetTick>
 800619a:	1b80      	subs	r0, r0, r6
 800619c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061a0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a2:	d3f4      	bcc.n	800618e <HAL_UART_Init+0x27e>
 80061a4:	e7e1      	b.n	800616a <HAL_UART_Init+0x25a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80061aa:	f000 818b 	beq.w	80064c4 <HAL_UART_Init+0x5b4>
        pclk = HAL_RCC_GetSysClockFreq();
 80061ae:	f7fe fe4d 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d08c      	beq.n	80060d2 <HAL_UART_Init+0x1c2>
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	f000 82af 	beq.w	800671c <HAL_UART_Init+0x80c>
 80061be:	2b02      	cmp	r3, #2
 80061c0:	f000 817e 	beq.w	80064c0 <HAL_UART_Init+0x5b0>
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	f000 8178 	beq.w	80064ba <HAL_UART_Init+0x5aa>
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	f000 82b9 	beq.w	8006742 <HAL_UART_Init+0x832>
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	f000 82b3 	beq.w	800673c <HAL_UART_Init+0x82c>
 80061d6:	2b06      	cmp	r3, #6
 80061d8:	f000 82ee 	beq.w	80067b8 <HAL_UART_Init+0x8a8>
 80061dc:	2b07      	cmp	r3, #7
 80061de:	f000 830f 	beq.w	8006800 <HAL_UART_Init+0x8f0>
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	f000 8327 	beq.w	8006836 <HAL_UART_Init+0x926>
 80061e8:	2b09      	cmp	r3, #9
 80061ea:	f000 835f 	beq.w	80068ac <HAL_UART_Init+0x99c>
 80061ee:	2b0a      	cmp	r3, #10
 80061f0:	f000 835a 	beq.w	80068a8 <HAL_UART_Init+0x998>
 80061f4:	2b0b      	cmp	r3, #11
 80061f6:	bf08      	it	eq
 80061f8:	0a00      	lsreq	r0, r0, #8
 80061fa:	e76a      	b.n	80060d2 <HAL_UART_Init+0x1c2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80061fc:	f7fe fe64 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	f43f af65 	beq.w	80060d2 <HAL_UART_Init+0x1c2>
 8006208:	e7d6      	b.n	80061b8 <HAL_UART_Init+0x2a8>
 800620a:	bf00      	nop
 800620c:	cfff69f3 	.word	0xcfff69f3
 8006210:	40008000 	.word	0x40008000
 8006214:	40013800 	.word	0x40013800
 8006218:	40004400 	.word	0x40004400
 800621c:	40004800 	.word	0x40004800
 8006220:	40004c00 	.word	0x40004c00
 8006224:	40021000 	.word	0x40021000
 8006228:	08009ff4 	.word	0x08009ff4
  UART_GETCLOCKSOURCE(huart, clocksource);
 800622c:	4bd3      	ldr	r3, [pc, #844]	; (800657c <HAL_UART_Init+0x66c>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006236:	2b10      	cmp	r3, #16
 8006238:	d0b5      	beq.n	80061a6 <HAL_UART_Init+0x296>
 800623a:	d96e      	bls.n	800631a <HAL_UART_Init+0x40a>
 800623c:	2b20      	cmp	r3, #32
 800623e:	f040 812c 	bne.w	800649a <HAL_UART_Init+0x58a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006242:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006246:	f000 8144 	beq.w	80064d2 <HAL_UART_Init+0x5c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800624a:	2d00      	cmp	r5, #0
 800624c:	f000 812c 	beq.w	80064a8 <HAL_UART_Init+0x598>
 8006250:	2d01      	cmp	r5, #1
 8006252:	f000 827a 	beq.w	800674a <HAL_UART_Init+0x83a>
 8006256:	2d02      	cmp	r5, #2
 8006258:	f000 8296 	beq.w	8006788 <HAL_UART_Init+0x878>
 800625c:	2d03      	cmp	r5, #3
 800625e:	f000 82a6 	beq.w	80067ae <HAL_UART_Init+0x89e>
 8006262:	2d04      	cmp	r5, #4
 8006264:	f000 82ca 	beq.w	80067fc <HAL_UART_Init+0x8ec>
 8006268:	2d05      	cmp	r5, #5
 800626a:	f000 82db 	beq.w	8006824 <HAL_UART_Init+0x914>
 800626e:	2d06      	cmp	r5, #6
 8006270:	f000 82f0 	beq.w	8006854 <HAL_UART_Init+0x944>
 8006274:	2d07      	cmp	r5, #7
 8006276:	f000 831b 	beq.w	80068b0 <HAL_UART_Init+0x9a0>
 800627a:	2d08      	cmp	r5, #8
 800627c:	f000 832b 	beq.w	80068d6 <HAL_UART_Init+0x9c6>
 8006280:	2d09      	cmp	r5, #9
 8006282:	f000 83a9 	beq.w	80069d8 <HAL_UART_Init+0xac8>
 8006286:	2d0a      	cmp	r5, #10
 8006288:	f000 83a4 	beq.w	80069d4 <HAL_UART_Init+0xac4>
 800628c:	4bbc      	ldr	r3, [pc, #752]	; (8006580 <HAL_UART_Init+0x670>)
 800628e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8006292:	2d0b      	cmp	r5, #11
 8006294:	bf08      	it	eq
 8006296:	4613      	moveq	r3, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006298:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800629a:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800629c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80062a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	e71b      	b.n	80060e0 <HAL_UART_Init+0x1d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a8:	4bb4      	ldr	r3, [pc, #720]	; (800657c <HAL_UART_Init+0x66c>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	f43f af77 	beq.w	80061a6 <HAL_UART_Init+0x296>
 80062b8:	d92f      	bls.n	800631a <HAL_UART_Init+0x40a>
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d0c1      	beq.n	8006242 <HAL_UART_Init+0x332>
 80062be:	2bc0      	cmp	r3, #192	; 0xc0
 80062c0:	f47f ae6e 	bne.w	8005fa0 <HAL_UART_Init+0x90>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80062c8:	f000 8130 	beq.w	800652c <HAL_UART_Init+0x61c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	f000 80e8 	beq.w	80064a2 <HAL_UART_Init+0x592>
 80062d2:	2d01      	cmp	r5, #1
 80062d4:	f000 823b 	beq.w	800674e <HAL_UART_Init+0x83e>
 80062d8:	2d02      	cmp	r5, #2
 80062da:	f000 8257 	beq.w	800678c <HAL_UART_Init+0x87c>
 80062de:	2d03      	cmp	r5, #3
 80062e0:	f000 8267 	beq.w	80067b2 <HAL_UART_Init+0x8a2>
 80062e4:	2d04      	cmp	r5, #4
 80062e6:	f000 8286 	beq.w	80067f6 <HAL_UART_Init+0x8e6>
 80062ea:	2d05      	cmp	r5, #5
 80062ec:	f000 829c 	beq.w	8006828 <HAL_UART_Init+0x918>
 80062f0:	2d06      	cmp	r5, #6
 80062f2:	f000 82b1 	beq.w	8006858 <HAL_UART_Init+0x948>
 80062f6:	2d07      	cmp	r5, #7
 80062f8:	f000 82d3 	beq.w	80068a2 <HAL_UART_Init+0x992>
 80062fc:	2d08      	cmp	r5, #8
 80062fe:	f000 831c 	beq.w	800693a <HAL_UART_Init+0xa2a>
 8006302:	2d09      	cmp	r5, #9
 8006304:	f000 836d 	beq.w	80069e2 <HAL_UART_Init+0xad2>
 8006308:	2d0a      	cmp	r5, #10
 800630a:	f000 8367 	beq.w	80069dc <HAL_UART_Init+0xacc>
 800630e:	2d0b      	cmp	r5, #11
 8006310:	bf14      	ite	ne
 8006312:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8006316:	2380      	moveq	r3, #128	; 0x80
 8006318:	e7be      	b.n	8006298 <HAL_UART_Init+0x388>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800631a:	2b00      	cmp	r3, #0
 800631c:	f47f ae40 	bne.w	8005fa0 <HAL_UART_Init+0x90>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006320:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006324:	f47f af6a 	bne.w	80061fc <HAL_UART_Init+0x2ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006328:	f7fe fdce 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800632c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800632e:	b302      	cbz	r2, 8006372 <HAL_UART_Init+0x462>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006330:	2a01      	cmp	r2, #1
 8006332:	f000 81fc 	beq.w	800672e <HAL_UART_Init+0x81e>
 8006336:	2a02      	cmp	r2, #2
 8006338:	f000 8205 	beq.w	8006746 <HAL_UART_Init+0x836>
 800633c:	2a03      	cmp	r2, #3
 800633e:	f000 821e 	beq.w	800677e <HAL_UART_Init+0x86e>
 8006342:	2a04      	cmp	r2, #4
 8006344:	f000 8231 	beq.w	80067aa <HAL_UART_Init+0x89a>
 8006348:	2a05      	cmp	r2, #5
 800634a:	f000 8250 	beq.w	80067ee <HAL_UART_Init+0x8de>
 800634e:	2a06      	cmp	r2, #6
 8006350:	f000 826d 	beq.w	800682e <HAL_UART_Init+0x91e>
 8006354:	2a07      	cmp	r2, #7
 8006356:	f000 8282 	beq.w	800685e <HAL_UART_Init+0x94e>
 800635a:	2a08      	cmp	r2, #8
 800635c:	f000 82aa 	beq.w	80068b4 <HAL_UART_Init+0x9a4>
 8006360:	2a09      	cmp	r2, #9
 8006362:	f000 82fe 	beq.w	8006962 <HAL_UART_Init+0xa52>
 8006366:	2a0a      	cmp	r2, #10
 8006368:	f000 82f9 	beq.w	800695e <HAL_UART_Init+0xa4e>
 800636c:	2a0b      	cmp	r2, #11
 800636e:	bf08      	it	eq
 8006370:	0a00      	lsreq	r0, r0, #8
 8006372:	6862      	ldr	r2, [r4, #4]
 8006374:	0853      	lsrs	r3, r2, #1
 8006376:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800637a:	fbb3 f3f2 	udiv	r3, r3, r2
 800637e:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006380:	f1a3 0110 	sub.w	r1, r3, #16
 8006384:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006388:	4291      	cmp	r1, r2
 800638a:	f63f ae09 	bhi.w	8005fa0 <HAL_UART_Init+0x90>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800638e:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8006392:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006394:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8006398:	4313      	orrs	r3, r2
  huart->NbRxDataToProcess = 1;
 800639a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 800639e:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 80063a0:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 80063a2:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80063a6:	6722      	str	r2, [r4, #112]	; 0x70
 80063a8:	e6ac      	b.n	8006104 <HAL_UART_Init+0x1f4>
    UART_AdvFeatureConfig(huart);
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff fd58 	bl	8005e60 <UART_AdvFeatureConfig>
 80063b0:	e6ac      	b.n	800610c <HAL_UART_Init+0x1fc>
    switch (clocksource)
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	f63f adf4 	bhi.w	8005fa0 <HAL_UART_Init+0x90>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <HAL_UART_Init+0x4b0>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	08006329 	.word	0x08006329
 80063c4:	080064ad 	.word	0x080064ad
 80063c8:	080064d3 	.word	0x080064d3
 80063cc:	08005fa1 	.word	0x08005fa1
 80063d0:	080064c5 	.word	0x080064c5
 80063d4:	08005fa1 	.word	0x08005fa1
 80063d8:	08005fa1 	.word	0x08005fa1
 80063dc:	08005fa1 	.word	0x08005fa1
 80063e0:	0800652d 	.word	0x0800652d
    return HAL_ERROR;
 80063e4:	2001      	movs	r0, #1
}
 80063e6:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f47f add9 	bne.w	8005fa0 <HAL_UART_Init+0x90>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80063ee:	f7fe fd6b 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 80063f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f4:	b303      	cbz	r3, 8006438 <HAL_UART_Init+0x528>
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	f000 81bd 	beq.w	8006776 <HAL_UART_Init+0x866>
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	f000 81ac 	beq.w	800675a <HAL_UART_Init+0x84a>
 8006402:	2b03      	cmp	r3, #3
 8006404:	f000 81a6 	beq.w	8006754 <HAL_UART_Init+0x844>
 8006408:	2b04      	cmp	r3, #4
 800640a:	f000 81dd 	beq.w	80067c8 <HAL_UART_Init+0x8b8>
 800640e:	2b05      	cmp	r3, #5
 8006410:	f000 81d7 	beq.w	80067c2 <HAL_UART_Init+0x8b2>
 8006414:	2b06      	cmp	r3, #6
 8006416:	f000 8238 	beq.w	800688a <HAL_UART_Init+0x97a>
 800641a:	2b07      	cmp	r3, #7
 800641c:	f000 8286 	beq.w	800692c <HAL_UART_Init+0xa1c>
 8006420:	2b08      	cmp	r3, #8
 8006422:	f000 8294 	beq.w	800694e <HAL_UART_Init+0xa3e>
 8006426:	2b09      	cmp	r3, #9
 8006428:	f000 82c3 	beq.w	80069b2 <HAL_UART_Init+0xaa2>
 800642c:	2b0a      	cmp	r3, #10
 800642e:	f000 82ef 	beq.w	8006a10 <HAL_UART_Init+0xb00>
 8006432:	2b0b      	cmp	r3, #11
 8006434:	bf08      	it	eq
 8006436:	0a00      	lsreq	r0, r0, #8
{
 8006438:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800643a:	2800      	cmp	r0, #0
 800643c:	f47f ae03 	bne.w	8006046 <HAL_UART_Init+0x136>
  huart->NbRxDataToProcess = 1;
 8006440:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  huart->TxISR = NULL;
 8006444:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
  huart->NbRxDataToProcess = 1;
 8006448:	66a3      	str	r3, [r4, #104]	; 0x68
 800644a:	e65b      	b.n	8006104 <HAL_UART_Init+0x1f4>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800644c:	f7fe fcfe 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8006450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006452:	b303      	cbz	r3, 8006496 <HAL_UART_Init+0x586>
 8006454:	2b01      	cmp	r3, #1
 8006456:	f000 8190 	beq.w	800677a <HAL_UART_Init+0x86a>
 800645a:	2b02      	cmp	r3, #2
 800645c:	f000 8182 	beq.w	8006764 <HAL_UART_Init+0x854>
 8006460:	2b03      	cmp	r3, #3
 8006462:	f000 817c 	beq.w	800675e <HAL_UART_Init+0x84e>
 8006466:	2b04      	cmp	r3, #4
 8006468:	f000 81b3 	beq.w	80067d2 <HAL_UART_Init+0x8c2>
 800646c:	2b05      	cmp	r3, #5
 800646e:	f000 81ad 	beq.w	80067cc <HAL_UART_Init+0x8bc>
 8006472:	2b06      	cmp	r3, #6
 8006474:	f000 81fe 	beq.w	8006874 <HAL_UART_Init+0x964>
 8006478:	2b07      	cmp	r3, #7
 800647a:	f000 8263 	beq.w	8006944 <HAL_UART_Init+0xa34>
 800647e:	2b08      	cmp	r3, #8
 8006480:	f000 8271 	beq.w	8006966 <HAL_UART_Init+0xa56>
 8006484:	2b09      	cmp	r3, #9
 8006486:	f000 8296 	beq.w	80069b6 <HAL_UART_Init+0xaa6>
 800648a:	2b0a      	cmp	r3, #10
 800648c:	f000 82c2 	beq.w	8006a14 <HAL_UART_Init+0xb04>
 8006490:	2b0b      	cmp	r3, #11
 8006492:	bf08      	it	eq
 8006494:	0a00      	lsreq	r0, r0, #8
{
 8006496:	2304      	movs	r3, #4
 8006498:	e7cf      	b.n	800643a <HAL_UART_Init+0x52a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800649a:	2b30      	cmp	r3, #48	; 0x30
 800649c:	f43f af12 	beq.w	80062c4 <HAL_UART_Init+0x3b4>
 80064a0:	e57e      	b.n	8005fa0 <HAL_UART_Init+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	e6f7      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a8:	4b35      	ldr	r3, [pc, #212]	; (8006580 <HAL_UART_Init+0x670>)
 80064aa:	e6f5      	b.n	8006298 <HAL_UART_Init+0x388>
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ac:	f7fe fd1e 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064b2:	2a00      	cmp	r2, #0
 80064b4:	f43f af5d 	beq.w	8006372 <HAL_UART_Init+0x462>
 80064b8:	e73a      	b.n	8006330 <HAL_UART_Init+0x420>
 80064ba:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_UART_Init+0x674>)
 80064bc:	fba3 3000 	umull	r3, r0, r3, r0
 80064c0:	0880      	lsrs	r0, r0, #2
 80064c2:	e606      	b.n	80060d2 <HAL_UART_Init+0x1c2>
        pclk = HAL_RCC_GetSysClockFreq();
 80064c4:	f7fe fcc2 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	f43f af51 	beq.w	8006372 <HAL_UART_Init+0x462>
 80064d0:	e72e      	b.n	8006330 <HAL_UART_Init+0x420>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064d2:	2d00      	cmp	r5, #0
 80064d4:	f000 8130 	beq.w	8006738 <HAL_UART_Init+0x828>
 80064d8:	2d01      	cmp	r5, #1
 80064da:	f000 815e 	beq.w	800679a <HAL_UART_Init+0x88a>
 80064de:	2d02      	cmp	r5, #2
 80064e0:	f000 8183 	beq.w	80067ea <HAL_UART_Init+0x8da>
 80064e4:	2d03      	cmp	r5, #3
 80064e6:	f000 8197 	beq.w	8006818 <HAL_UART_Init+0x908>
 80064ea:	2d04      	cmp	r5, #4
 80064ec:	f000 81b0 	beq.w	8006850 <HAL_UART_Init+0x940>
 80064f0:	2d05      	cmp	r5, #5
 80064f2:	f000 81b9 	beq.w	8006868 <HAL_UART_Init+0x958>
 80064f6:	2d06      	cmp	r5, #6
 80064f8:	f000 8222 	beq.w	8006940 <HAL_UART_Init+0xa30>
 80064fc:	2d07      	cmp	r5, #7
 80064fe:	f000 8228 	beq.w	8006952 <HAL_UART_Init+0xa42>
 8006502:	2d08      	cmp	r5, #8
 8006504:	f000 824c 	beq.w	80069a0 <HAL_UART_Init+0xa90>
 8006508:	2d09      	cmp	r5, #9
 800650a:	f000 8291 	beq.w	8006a30 <HAL_UART_Init+0xb20>
 800650e:	2d0a      	cmp	r5, #10
 8006510:	f000 8290 	beq.w	8006a34 <HAL_UART_Init+0xb24>
 8006514:	4b1c      	ldr	r3, [pc, #112]	; (8006588 <HAL_UART_Init+0x678>)
 8006516:	4a1d      	ldr	r2, [pc, #116]	; (800658c <HAL_UART_Init+0x67c>)
 8006518:	2d0b      	cmp	r5, #11
 800651a:	bf08      	it	eq
 800651c:	4613      	moveq	r3, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651e:	6862      	ldr	r2, [r4, #4]
 8006520:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006524:	fbb3 f3f2 	udiv	r3, r3, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	e729      	b.n	8006380 <HAL_UART_Init+0x470>
 800652c:	2d00      	cmp	r5, #0
 800652e:	f000 8100 	beq.w	8006732 <HAL_UART_Init+0x822>
 8006532:	2d01      	cmp	r5, #1
 8006534:	f000 8133 	beq.w	800679e <HAL_UART_Init+0x88e>
 8006538:	2d02      	cmp	r5, #2
 800653a:	f000 814c 	beq.w	80067d6 <HAL_UART_Init+0x8c6>
 800653e:	2d03      	cmp	r5, #3
 8006540:	f000 8167 	beq.w	8006812 <HAL_UART_Init+0x902>
 8006544:	2d04      	cmp	r5, #4
 8006546:	f000 8180 	beq.w	800684a <HAL_UART_Init+0x93a>
 800654a:	2d05      	cmp	r5, #5
 800654c:	f000 81a1 	beq.w	8006892 <HAL_UART_Init+0x982>
 8006550:	2d06      	cmp	r5, #6
 8006552:	f000 81f9 	beq.w	8006948 <HAL_UART_Init+0xa38>
 8006556:	2d07      	cmp	r5, #7
 8006558:	f000 8207 	beq.w	800696a <HAL_UART_Init+0xa5a>
 800655c:	2d08      	cmp	r5, #8
 800655e:	f000 821c 	beq.w	800699a <HAL_UART_Init+0xa8a>
 8006562:	2d09      	cmp	r5, #9
 8006564:	f000 8261 	beq.w	8006a2a <HAL_UART_Init+0xb1a>
 8006568:	2d0a      	cmp	r5, #10
 800656a:	f000 8265 	beq.w	8006a38 <HAL_UART_Init+0xb28>
 800656e:	2d0b      	cmp	r5, #11
 8006570:	bf14      	ite	ne
 8006572:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8006576:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800657a:	e7d0      	b.n	800651e <HAL_UART_Init+0x60e>
 800657c:	40021000 	.word	0x40021000
 8006580:	00f42400 	.word	0x00f42400
 8006584:	aaaaaaab 	.word	0xaaaaaaab
 8006588:	01e84800 	.word	0x01e84800
 800658c:	0001e848 	.word	0x0001e848
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006592:	b303      	cbz	r3, 80065d6 <HAL_UART_Init+0x6c6>
 8006594:	2b01      	cmp	r3, #1
 8006596:	f000 8171 	beq.w	800687c <HAL_UART_Init+0x96c>
 800659a:	2b02      	cmp	r3, #2
 800659c:	f000 8194 	beq.w	80068c8 <HAL_UART_Init+0x9b8>
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	f000 81e5 	beq.w	8006970 <HAL_UART_Init+0xa60>
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	f000 81ff 	beq.w	80069aa <HAL_UART_Init+0xa9a>
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	f000 8222 	beq.w	80069f6 <HAL_UART_Init+0xae6>
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	f000 821c 	beq.w	80069f0 <HAL_UART_Init+0xae0>
 80065b8:	2b07      	cmp	r3, #7
 80065ba:	f000 8215 	beq.w	80069e8 <HAL_UART_Init+0xad8>
 80065be:	2b08      	cmp	r3, #8
 80065c0:	f000 8243 	beq.w	8006a4a <HAL_UART_Init+0xb3a>
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	f000 824f 	beq.w	8006a68 <HAL_UART_Init+0xb58>
 80065ca:	2b0a      	cmp	r3, #10
 80065cc:	f000 8248 	beq.w	8006a60 <HAL_UART_Init+0xb50>
 80065d0:	2b0b      	cmp	r3, #11
 80065d2:	f000 8241 	beq.w	8006a58 <HAL_UART_Init+0xb48>
 80065d6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
 80065da:	2600      	movs	r6, #0
 80065dc:	0853      	lsrs	r3, r2, #1
 80065de:	18e8      	adds	r0, r5, r3
 80065e0:	f146 0100 	adc.w	r1, r6, #0
 80065e4:	2300      	movs	r3, #0
 80065e6:	f7f9 fe1b 	bl	8000220 <__aeabi_uldivmod>
 80065ea:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065ee:	4bbb      	ldr	r3, [pc, #748]	; (80068dc <HAL_UART_Init+0x9cc>)
 80065f0:	429a      	cmp	r2, r3
 80065f2:	f63f acd5 	bhi.w	8005fa0 <HAL_UART_Init+0x90>
          huart->Instance->BRR = usartdiv;
 80065f6:	6821      	ldr	r1, [r4, #0]
  huart->RxISR = NULL;
 80065f8:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80065fa:	f04f 1201 	mov.w	r2, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80065fe:	60c8      	str	r0, [r1, #12]
  huart->RxISR = NULL;
 8006600:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006604:	6723      	str	r3, [r4, #112]	; 0x70
 8006606:	e57d      	b.n	8006104 <HAL_UART_Init+0x1f4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660a:	b303      	cbz	r3, 800664e <HAL_UART_Init+0x73e>
 800660c:	2b01      	cmp	r3, #1
 800660e:	f000 8139 	beq.w	8006884 <HAL_UART_Init+0x974>
 8006612:	2b02      	cmp	r3, #2
 8006614:	f000 815c 	beq.w	80068d0 <HAL_UART_Init+0x9c0>
 8006618:	2b03      	cmp	r3, #3
 800661a:	f000 819c 	beq.w	8006956 <HAL_UART_Init+0xa46>
 800661e:	2b04      	cmp	r3, #4
 8006620:	f000 81c0 	beq.w	80069a4 <HAL_UART_Init+0xa94>
 8006624:	2b05      	cmp	r3, #5
 8006626:	f000 81f0 	beq.w	8006a0a <HAL_UART_Init+0xafa>
 800662a:	2b06      	cmp	r3, #6
 800662c:	f000 81e9 	beq.w	8006a02 <HAL_UART_Init+0xaf2>
 8006630:	2b07      	cmp	r3, #7
 8006632:	f000 81e3 	beq.w	80069fc <HAL_UART_Init+0xaec>
 8006636:	2b08      	cmp	r3, #8
 8006638:	f000 8201 	beq.w	8006a3e <HAL_UART_Init+0xb2e>
 800663c:	2b09      	cmp	r3, #9
 800663e:	f000 821a 	beq.w	8006a76 <HAL_UART_Init+0xb66>
 8006642:	2b0a      	cmp	r3, #10
 8006644:	f000 8214 	beq.w	8006a70 <HAL_UART_Init+0xb60>
 8006648:	2b0b      	cmp	r3, #11
 800664a:	f000 8202 	beq.w	8006a52 <HAL_UART_Init+0xb42>
 800664e:	4da4      	ldr	r5, [pc, #656]	; (80068e0 <HAL_UART_Init+0x9d0>)
 8006650:	2600      	movs	r6, #0
 8006652:	e7c3      	b.n	80065dc <HAL_UART_Init+0x6cc>
            pclk = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fe fc38 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800665a:	2100      	movs	r1, #0
 800665c:	b30b      	cbz	r3, 80066a2 <HAL_UART_Init+0x792>
 800665e:	2b01      	cmp	r3, #1
 8006660:	f000 80dc 	beq.w	800681c <HAL_UART_Init+0x90c>
 8006664:	2b02      	cmp	r3, #2
 8006666:	f000 80fc 	beq.w	8006862 <HAL_UART_Init+0x952>
 800666a:	2b03      	cmp	r3, #3
 800666c:	f000 8124 	beq.w	80068b8 <HAL_UART_Init+0x9a8>
 8006670:	2b04      	cmp	r3, #4
 8006672:	f000 8126 	beq.w	80068c2 <HAL_UART_Init+0x9b2>
 8006676:	2b05      	cmp	r3, #5
 8006678:	f000 81a7 	beq.w	80069ca <HAL_UART_Init+0xaba>
 800667c:	2b06      	cmp	r3, #6
 800667e:	f000 819f 	beq.w	80069c0 <HAL_UART_Init+0xab0>
 8006682:	2b07      	cmp	r3, #7
 8006684:	f000 8199 	beq.w	80069ba <HAL_UART_Init+0xaaa>
 8006688:	2b08      	cmp	r3, #8
 800668a:	f000 81db 	beq.w	8006a44 <HAL_UART_Init+0xb34>
 800668e:	2b09      	cmp	r3, #9
 8006690:	f000 81f7 	beq.w	8006a82 <HAL_UART_Init+0xb72>
 8006694:	2b0a      	cmp	r3, #10
 8006696:	f000 81f1 	beq.w	8006a7c <HAL_UART_Init+0xb6c>
 800669a:	2b0b      	cmp	r3, #11
 800669c:	bf04      	itt	eq
 800669e:	0a00      	lsreq	r0, r0, #8
 80066a0:	2100      	moveq	r1, #0
 80066a2:	6862      	ldr	r2, [r4, #4]
 80066a4:	020f      	lsls	r7, r1, #8
 80066a6:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80066aa:	0206      	lsls	r6, r0, #8
 80066ac:	0850      	lsrs	r0, r2, #1
 80066ae:	eb16 0b00 	adds.w	fp, r6, r0
 80066b2:	f147 0c00 	adc.w	ip, r7, #0
 80066b6:	4658      	mov	r0, fp
 80066b8:	4661      	mov	r1, ip
 80066ba:	2300      	movs	r3, #0
 80066bc:	f7f9 fdb0 	bl	8000220 <__aeabi_uldivmod>
 80066c0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80066c4:	e793      	b.n	80065ee <HAL_UART_Init+0x6de>
            pclk = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fe fbc1 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 80066ca:	e7c5      	b.n	8006658 <HAL_UART_Init+0x748>
        ret = HAL_ERROR;
 80066cc:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e506      	b.n	80060e0 <HAL_UART_Init+0x1d0>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80066d2:	b32d      	cbz	r5, 8006720 <HAL_UART_Init+0x810>
 80066d4:	2d01      	cmp	r5, #1
 80066d6:	d047      	beq.n	8006768 <HAL_UART_Init+0x858>
 80066d8:	2d02      	cmp	r5, #2
 80066da:	d063      	beq.n	80067a4 <HAL_UART_Init+0x894>
 80066dc:	2d03      	cmp	r5, #3
 80066de:	f000 8081 	beq.w	80067e4 <HAL_UART_Init+0x8d4>
 80066e2:	2d04      	cmp	r5, #4
 80066e4:	f000 808e 	beq.w	8006804 <HAL_UART_Init+0x8f4>
 80066e8:	2d05      	cmp	r5, #5
 80066ea:	f000 80a6 	beq.w	800683a <HAL_UART_Init+0x92a>
 80066ee:	2d06      	cmp	r5, #6
 80066f0:	f000 80bc 	beq.w	800686c <HAL_UART_Init+0x95c>
 80066f4:	2d07      	cmp	r5, #7
 80066f6:	f000 8115 	beq.w	8006924 <HAL_UART_Init+0xa14>
 80066fa:	2d08      	cmp	r5, #8
 80066fc:	f000 813b 	beq.w	8006976 <HAL_UART_Init+0xa66>
 8006700:	2d09      	cmp	r5, #9
 8006702:	f000 8141 	beq.w	8006988 <HAL_UART_Init+0xa78>
 8006706:	2d0a      	cmp	r5, #10
 8006708:	f000 818b 	beq.w	8006a22 <HAL_UART_Init+0xb12>
 800670c:	4b75      	ldr	r3, [pc, #468]	; (80068e4 <HAL_UART_Init+0x9d4>)
 800670e:	f24f 4024 	movw	r0, #62500	; 0xf424
 8006712:	2d0b      	cmp	r5, #11
 8006714:	bf18      	it	ne
 8006716:	4618      	movne	r0, r3
 8006718:	2302      	movs	r3, #2
 800671a:	e494      	b.n	8006046 <HAL_UART_Init+0x136>
 800671c:	0840      	lsrs	r0, r0, #1
 800671e:	e4d8      	b.n	80060d2 <HAL_UART_Init+0x1c2>
 8006720:	2302      	movs	r3, #2
 8006722:	4870      	ldr	r0, [pc, #448]	; (80068e4 <HAL_UART_Init+0x9d4>)
 8006724:	e48f      	b.n	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006726:	2308      	movs	r3, #8
 8006728:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800672c:	e48b      	b.n	8006046 <HAL_UART_Init+0x136>
 800672e:	0840      	lsrs	r0, r0, #1
 8006730:	e61f      	b.n	8006372 <HAL_UART_Init+0x462>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006736:	e6f2      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006738:	4b6b      	ldr	r3, [pc, #428]	; (80068e8 <HAL_UART_Init+0x9d8>)
 800673a:	e6f0      	b.n	800651e <HAL_UART_Init+0x60e>
 800673c:	4b6b      	ldr	r3, [pc, #428]	; (80068ec <HAL_UART_Init+0x9dc>)
 800673e:	fba3 3000 	umull	r3, r0, r3, r0
 8006742:	08c0      	lsrs	r0, r0, #3
 8006744:	e4c5      	b.n	80060d2 <HAL_UART_Init+0x1c2>
 8006746:	0880      	lsrs	r0, r0, #2
 8006748:	e613      	b.n	8006372 <HAL_UART_Init+0x462>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800674a:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <HAL_UART_Init+0x9e0>)
 800674c:	e5a4      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800674e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006752:	e5a1      	b.n	8006298 <HAL_UART_Init+0x388>
 8006754:	4b67      	ldr	r3, [pc, #412]	; (80068f4 <HAL_UART_Init+0x9e4>)
 8006756:	fba3 3000 	umull	r3, r0, r3, r0
 800675a:	0880      	lsrs	r0, r0, #2
 800675c:	e66c      	b.n	8006438 <HAL_UART_Init+0x528>
 800675e:	4b65      	ldr	r3, [pc, #404]	; (80068f4 <HAL_UART_Init+0x9e4>)
 8006760:	fba3 3000 	umull	r3, r0, r3, r0
 8006764:	0880      	lsrs	r0, r0, #2
 8006766:	e696      	b.n	8006496 <HAL_UART_Init+0x586>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006768:	2302      	movs	r3, #2
 800676a:	4861      	ldr	r0, [pc, #388]	; (80068f0 <HAL_UART_Init+0x9e0>)
 800676c:	e46b      	b.n	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800676e:	2308      	movs	r3, #8
 8006770:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006774:	e467      	b.n	8006046 <HAL_UART_Init+0x136>
 8006776:	0840      	lsrs	r0, r0, #1
 8006778:	e65e      	b.n	8006438 <HAL_UART_Init+0x528>
 800677a:	0840      	lsrs	r0, r0, #1
 800677c:	e68b      	b.n	8006496 <HAL_UART_Init+0x586>
 800677e:	4b5d      	ldr	r3, [pc, #372]	; (80068f4 <HAL_UART_Init+0x9e4>)
 8006780:	fba3 2300 	umull	r2, r3, r3, r0
 8006784:	0898      	lsrs	r0, r3, #2
 8006786:	e5f4      	b.n	8006372 <HAL_UART_Init+0x462>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006788:	4b5b      	ldr	r3, [pc, #364]	; (80068f8 <HAL_UART_Init+0x9e8>)
 800678a:	e585      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800678c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006790:	e582      	b.n	8006298 <HAL_UART_Init+0x388>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006792:	2308      	movs	r3, #8
 8006794:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006798:	e455      	b.n	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679a:	4b52      	ldr	r3, [pc, #328]	; (80068e4 <HAL_UART_Init+0x9d4>)
 800679c:	e6bf      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	e6bc      	b.n	800651e <HAL_UART_Init+0x60e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80067a4:	462b      	mov	r3, r5
 80067a6:	4854      	ldr	r0, [pc, #336]	; (80068f8 <HAL_UART_Init+0x9e8>)
 80067a8:	e44d      	b.n	8006046 <HAL_UART_Init+0x136>
 80067aa:	08c0      	lsrs	r0, r0, #3
 80067ac:	e5e1      	b.n	8006372 <HAL_UART_Init+0x462>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ae:	4b53      	ldr	r3, [pc, #332]	; (80068fc <HAL_UART_Init+0x9ec>)
 80067b0:	e572      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b2:	f241 5355 	movw	r3, #5461	; 0x1555
 80067b6:	e56f      	b.n	8006298 <HAL_UART_Init+0x388>
 80067b8:	4b4e      	ldr	r3, [pc, #312]	; (80068f4 <HAL_UART_Init+0x9e4>)
 80067ba:	fba3 3000 	umull	r3, r0, r3, r0
 80067be:	08c0      	lsrs	r0, r0, #3
 80067c0:	e487      	b.n	80060d2 <HAL_UART_Init+0x1c2>
 80067c2:	4b4a      	ldr	r3, [pc, #296]	; (80068ec <HAL_UART_Init+0x9dc>)
 80067c4:	fba3 3000 	umull	r3, r0, r3, r0
 80067c8:	08c0      	lsrs	r0, r0, #3
 80067ca:	e635      	b.n	8006438 <HAL_UART_Init+0x528>
 80067cc:	4b47      	ldr	r3, [pc, #284]	; (80068ec <HAL_UART_Init+0x9dc>)
 80067ce:	fba3 3000 	umull	r3, r0, r3, r0
 80067d2:	08c0      	lsrs	r0, r0, #3
 80067d4:	e65f      	b.n	8006496 <HAL_UART_Init+0x586>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067da:	e6a0      	b.n	800651e <HAL_UART_Init+0x60e>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80067dc:	2308      	movs	r3, #8
 80067de:	f241 5055 	movw	r0, #5461	; 0x1555
 80067e2:	e430      	b.n	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80067e4:	2302      	movs	r3, #2
 80067e6:	4845      	ldr	r0, [pc, #276]	; (80068fc <HAL_UART_Init+0x9ec>)
 80067e8:	e42d      	b.n	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ea:	4b41      	ldr	r3, [pc, #260]	; (80068f0 <HAL_UART_Init+0x9e0>)
 80067ec:	e697      	b.n	800651e <HAL_UART_Init+0x60e>
 80067ee:	230a      	movs	r3, #10
 80067f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80067f4:	e5bd      	b.n	8006372 <HAL_UART_Init+0x462>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067fa:	e54d      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fc:	4b40      	ldr	r3, [pc, #256]	; (8006900 <HAL_UART_Init+0x9f0>)
 80067fe:	e54b      	b.n	8006298 <HAL_UART_Init+0x388>
 8006800:	0900      	lsrs	r0, r0, #4
 8006802:	e466      	b.n	80060d2 <HAL_UART_Init+0x1c2>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006804:	2302      	movs	r3, #2
 8006806:	483e      	ldr	r0, [pc, #248]	; (8006900 <HAL_UART_Init+0x9f0>)
 8006808:	e41d      	b.n	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800680a:	2308      	movs	r3, #8
 800680c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006810:	e419      	b.n	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006812:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006816:	e682      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006818:	4b3a      	ldr	r3, [pc, #232]	; (8006904 <HAL_UART_Init+0x9f4>)
 800681a:	e680      	b.n	800651e <HAL_UART_Init+0x60e>
 800681c:	0849      	lsrs	r1, r1, #1
 800681e:	ea4f 0030 	mov.w	r0, r0, rrx
 8006822:	e73e      	b.n	80066a2 <HAL_UART_Init+0x792>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006824:	4b38      	ldr	r3, [pc, #224]	; (8006908 <HAL_UART_Init+0x9f8>)
 8006826:	e537      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006828:	f640 43cc 	movw	r3, #3276	; 0xccc
 800682c:	e534      	b.n	8006298 <HAL_UART_Init+0x388>
 800682e:	230c      	movs	r3, #12
 8006830:	fbb0 f0f3 	udiv	r0, r0, r3
 8006834:	e59d      	b.n	8006372 <HAL_UART_Init+0x462>
 8006836:	0940      	lsrs	r0, r0, #5
 8006838:	e44b      	b.n	80060d2 <HAL_UART_Init+0x1c2>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800683a:	2302      	movs	r3, #2
 800683c:	4832      	ldr	r0, [pc, #200]	; (8006908 <HAL_UART_Init+0x9f8>)
 800683e:	e402      	b.n	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006840:	2308      	movs	r3, #8
 8006842:	f640 40cc 	movw	r0, #3276	; 0xccc
 8006846:	f7ff bbfe 	b.w	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800684a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800684e:	e666      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006850:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <HAL_UART_Init+0x9e8>)
 8006852:	e664      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006854:	4b2d      	ldr	r3, [pc, #180]	; (800690c <HAL_UART_Init+0x9fc>)
 8006856:	e51f      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006858:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800685c:	e51c      	b.n	8006298 <HAL_UART_Init+0x388>
 800685e:	0900      	lsrs	r0, r0, #4
 8006860:	e587      	b.n	8006372 <HAL_UART_Init+0x462>
 8006862:	0880      	lsrs	r0, r0, #2
 8006864:	2100      	movs	r1, #0
 8006866:	e71c      	b.n	80066a2 <HAL_UART_Init+0x792>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006868:	4b29      	ldr	r3, [pc, #164]	; (8006910 <HAL_UART_Init+0xa00>)
 800686a:	e658      	b.n	800651e <HAL_UART_Init+0x60e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800686c:	2302      	movs	r3, #2
 800686e:	4827      	ldr	r0, [pc, #156]	; (800690c <HAL_UART_Init+0x9fc>)
 8006870:	f7ff bbe9 	b.w	8006046 <HAL_UART_Init+0x136>
 8006874:	230c      	movs	r3, #12
 8006876:	fbb0 f0f3 	udiv	r0, r0, r3
 800687a:	e60c      	b.n	8006496 <HAL_UART_Init+0x586>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800687c:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 8006880:	2600      	movs	r6, #0
 8006882:	e6ab      	b.n	80065dc <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006884:	4d23      	ldr	r5, [pc, #140]	; (8006914 <HAL_UART_Init+0xa04>)
 8006886:	2600      	movs	r6, #0
 8006888:	e6a8      	b.n	80065dc <HAL_UART_Init+0x6cc>
 800688a:	230c      	movs	r3, #12
 800688c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006890:	e5d2      	b.n	8006438 <HAL_UART_Init+0x528>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006892:	f641 1398 	movw	r3, #6552	; 0x1998
 8006896:	e642      	b.n	800651e <HAL_UART_Init+0x60e>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006898:	2308      	movs	r3, #8
 800689a:	f640 20aa 	movw	r0, #2730	; 0xaaa
 800689e:	f7ff bbd2 	b.w	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068a6:	e4f7      	b.n	8006298 <HAL_UART_Init+0x388>
 80068a8:	09c0      	lsrs	r0, r0, #7
 80068aa:	e412      	b.n	80060d2 <HAL_UART_Init+0x1c2>
 80068ac:	0980      	lsrs	r0, r0, #6
 80068ae:	e410      	b.n	80060d2 <HAL_UART_Init+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b0:	4b19      	ldr	r3, [pc, #100]	; (8006918 <HAL_UART_Init+0xa08>)
 80068b2:	e4f1      	b.n	8006298 <HAL_UART_Init+0x388>
 80068b4:	0940      	lsrs	r0, r0, #5
 80068b6:	e55c      	b.n	8006372 <HAL_UART_Init+0x462>
 80068b8:	2206      	movs	r2, #6
 80068ba:	2300      	movs	r3, #0
 80068bc:	f7f9 fcb0 	bl	8000220 <__aeabi_uldivmod>
 80068c0:	e6ef      	b.n	80066a2 <HAL_UART_Init+0x792>
 80068c2:	08c0      	lsrs	r0, r0, #3
 80068c4:	2100      	movs	r1, #0
 80068c6:	e6ec      	b.n	80066a2 <HAL_UART_Init+0x792>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c8:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 80068cc:	2600      	movs	r6, #0
 80068ce:	e685      	b.n	80065dc <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d0:	4d12      	ldr	r5, [pc, #72]	; (800691c <HAL_UART_Init+0xa0c>)
 80068d2:	2600      	movs	r6, #0
 80068d4:	e682      	b.n	80065dc <HAL_UART_Init+0x6cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d6:	4b12      	ldr	r3, [pc, #72]	; (8006920 <HAL_UART_Init+0xa10>)
 80068d8:	e4de      	b.n	8006298 <HAL_UART_Init+0x388>
 80068da:	bf00      	nop
 80068dc:	000ffcff 	.word	0x000ffcff
 80068e0:	f4240000 	.word	0xf4240000
 80068e4:	00f42400 	.word	0x00f42400
 80068e8:	01e84800 	.word	0x01e84800
 80068ec:	cccccccd 	.word	0xcccccccd
 80068f0:	007a1200 	.word	0x007a1200
 80068f4:	aaaaaaab 	.word	0xaaaaaaab
 80068f8:	003d0900 	.word	0x003d0900
 80068fc:	0028b0aa 	.word	0x0028b0aa
 8006900:	001e8480 	.word	0x001e8480
 8006904:	00516154 	.word	0x00516154
 8006908:	00186a00 	.word	0x00186a00
 800690c:	00145855 	.word	0x00145855
 8006910:	0030d400 	.word	0x0030d400
 8006914:	7a120000 	.word	0x7a120000
 8006918:	000f4240 	.word	0x000f4240
 800691c:	3d090000 	.word	0x3d090000
 8006920:	0007a120 	.word	0x0007a120
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006924:	2302      	movs	r3, #2
 8006926:	485c      	ldr	r0, [pc, #368]	; (8006a98 <HAL_UART_Init+0xb88>)
 8006928:	f7ff bb8d 	b.w	8006046 <HAL_UART_Init+0x136>
 800692c:	0900      	lsrs	r0, r0, #4
 800692e:	e583      	b.n	8006438 <HAL_UART_Init+0x528>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006930:	2308      	movs	r3, #8
 8006932:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006936:	f7ff bb86 	b.w	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800693a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800693e:	e4ab      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006940:	4b56      	ldr	r3, [pc, #344]	; (8006a9c <HAL_UART_Init+0xb8c>)
 8006942:	e5ec      	b.n	800651e <HAL_UART_Init+0x60e>
 8006944:	0900      	lsrs	r0, r0, #4
 8006946:	e5a6      	b.n	8006496 <HAL_UART_Init+0x586>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006948:	f241 5354 	movw	r3, #5460	; 0x1554
 800694c:	e5e7      	b.n	800651e <HAL_UART_Init+0x60e>
 800694e:	0940      	lsrs	r0, r0, #5
 8006950:	e572      	b.n	8006438 <HAL_UART_Init+0x528>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006952:	4b53      	ldr	r3, [pc, #332]	; (8006aa0 <HAL_UART_Init+0xb90>)
 8006954:	e5e3      	b.n	800651e <HAL_UART_Init+0x60e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006956:	a64c      	add	r6, pc, #304	; (adr r6, 8006a88 <HAL_UART_Init+0xb78>)
 8006958:	e9d6 5600 	ldrd	r5, r6, [r6]
 800695c:	e63e      	b.n	80065dc <HAL_UART_Init+0x6cc>
 800695e:	09c0      	lsrs	r0, r0, #7
 8006960:	e507      	b.n	8006372 <HAL_UART_Init+0x462>
 8006962:	0980      	lsrs	r0, r0, #6
 8006964:	e505      	b.n	8006372 <HAL_UART_Init+0x462>
 8006966:	0940      	lsrs	r0, r0, #5
 8006968:	e595      	b.n	8006496 <HAL_UART_Init+0x586>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800696a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800696e:	e5d6      	b.n	800651e <HAL_UART_Init+0x60e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006970:	4d4c      	ldr	r5, [pc, #304]	; (8006aa4 <HAL_UART_Init+0xb94>)
 8006972:	2600      	movs	r6, #0
 8006974:	e632      	b.n	80065dc <HAL_UART_Init+0x6cc>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006976:	2302      	movs	r3, #2
 8006978:	484b      	ldr	r0, [pc, #300]	; (8006aa8 <HAL_UART_Init+0xb98>)
 800697a:	f7ff bb64 	b.w	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800697e:	462b      	mov	r3, r5
 8006980:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006984:	f7ff bb5f 	b.w	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006988:	2302      	movs	r3, #2
 800698a:	4848      	ldr	r0, [pc, #288]	; (8006aac <HAL_UART_Init+0xb9c>)
 800698c:	f7ff bb5b 	b.w	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006990:	2308      	movs	r3, #8
 8006992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006996:	f7ff bb56 	b.w	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800699a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800699e:	e5be      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a0:	4b3d      	ldr	r3, [pc, #244]	; (8006a98 <HAL_UART_Init+0xb88>)
 80069a2:	e5bc      	b.n	800651e <HAL_UART_Init+0x60e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a4:	4d42      	ldr	r5, [pc, #264]	; (8006ab0 <HAL_UART_Init+0xba0>)
 80069a6:	2600      	movs	r6, #0
 80069a8:	e618      	b.n	80065dc <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069aa:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 80069ae:	2600      	movs	r6, #0
 80069b0:	e614      	b.n	80065dc <HAL_UART_Init+0x6cc>
 80069b2:	0980      	lsrs	r0, r0, #6
 80069b4:	e540      	b.n	8006438 <HAL_UART_Init+0x528>
 80069b6:	0980      	lsrs	r0, r0, #6
 80069b8:	e56d      	b.n	8006496 <HAL_UART_Init+0x586>
 80069ba:	0900      	lsrs	r0, r0, #4
 80069bc:	2100      	movs	r1, #0
 80069be:	e670      	b.n	80066a2 <HAL_UART_Init+0x792>
 80069c0:	220c      	movs	r2, #12
 80069c2:	2300      	movs	r3, #0
 80069c4:	f7f9 fc2c 	bl	8000220 <__aeabi_uldivmod>
 80069c8:	e66b      	b.n	80066a2 <HAL_UART_Init+0x792>
 80069ca:	220a      	movs	r2, #10
 80069cc:	2300      	movs	r3, #0
 80069ce:	f7f9 fc27 	bl	8000220 <__aeabi_uldivmod>
 80069d2:	e666      	b.n	80066a2 <HAL_UART_Init+0x792>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069d4:	4b37      	ldr	r3, [pc, #220]	; (8006ab4 <HAL_UART_Init+0xba4>)
 80069d6:	e45f      	b.n	8006298 <HAL_UART_Init+0x388>
 80069d8:	4b34      	ldr	r3, [pc, #208]	; (8006aac <HAL_UART_Init+0xb9c>)
 80069da:	e45d      	b.n	8006298 <HAL_UART_Init+0x388>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e0:	e45a      	b.n	8006298 <HAL_UART_Init+0x388>
 80069e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e6:	e457      	b.n	8006298 <HAL_UART_Init+0x388>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 80069ec:	2600      	movs	r6, #0
 80069ee:	e5f5      	b.n	80065dc <HAL_UART_Init+0x6cc>
 80069f0:	4d31      	ldr	r5, [pc, #196]	; (8006ab8 <HAL_UART_Init+0xba8>)
 80069f2:	2600      	movs	r6, #0
 80069f4:	e5f2      	b.n	80065dc <HAL_UART_Init+0x6cc>
 80069f6:	4d31      	ldr	r5, [pc, #196]	; (8006abc <HAL_UART_Init+0xbac>)
 80069f8:	2600      	movs	r6, #0
 80069fa:	e5ef      	b.n	80065dc <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069fc:	4d30      	ldr	r5, [pc, #192]	; (8006ac0 <HAL_UART_Init+0xbb0>)
 80069fe:	2600      	movs	r6, #0
 8006a00:	e5ec      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a02:	a623      	add	r6, pc, #140	; (adr r6, 8006a90 <HAL_UART_Init+0xb80>)
 8006a04:	e9d6 5600 	ldrd	r5, r6, [r6]
 8006a08:	e5e8      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a0a:	4d2e      	ldr	r5, [pc, #184]	; (8006ac4 <HAL_UART_Init+0xbb4>)
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	e5e5      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a10:	09c0      	lsrs	r0, r0, #7
 8006a12:	e511      	b.n	8006438 <HAL_UART_Init+0x528>
 8006a14:	09c0      	lsrs	r0, r0, #7
 8006a16:	e53e      	b.n	8006496 <HAL_UART_Init+0x586>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006a18:	2308      	movs	r3, #8
 8006a1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a1e:	f7ff bb12 	b.w	8006046 <HAL_UART_Init+0x136>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006a22:	2302      	movs	r3, #2
 8006a24:	4823      	ldr	r0, [pc, #140]	; (8006ab4 <HAL_UART_Init+0xba4>)
 8006a26:	f7ff bb0e 	b.w	8006046 <HAL_UART_Init+0x136>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a2e:	e576      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a30:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <HAL_UART_Init+0xb98>)
 8006a32:	e574      	b.n	800651e <HAL_UART_Init+0x60e>
 8006a34:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <HAL_UART_Init+0xb9c>)
 8006a36:	e572      	b.n	800651e <HAL_UART_Init+0x60e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a3c:	e56f      	b.n	800651e <HAL_UART_Init+0x60e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a3e:	4d22      	ldr	r5, [pc, #136]	; (8006ac8 <HAL_UART_Init+0xbb8>)
 8006a40:	2600      	movs	r6, #0
 8006a42:	e5cb      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a44:	0940      	lsrs	r0, r0, #5
 8006a46:	2100      	movs	r1, #0
 8006a48:	e62b      	b.n	80066a2 <HAL_UART_Init+0x792>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a4a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8006a4e:	2600      	movs	r6, #0
 8006a50:	e5c4      	b.n	80065dc <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a52:	4d1e      	ldr	r5, [pc, #120]	; (8006acc <HAL_UART_Init+0xbbc>)
 8006a54:	2600      	movs	r6, #0
 8006a56:	e5c1      	b.n	80065dc <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a58:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	e5bd      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a60:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8006a64:	2600      	movs	r6, #0
 8006a66:	e5b9      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a68:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	e5b5      	b.n	80065dc <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a70:	4d17      	ldr	r5, [pc, #92]	; (8006ad0 <HAL_UART_Init+0xbc0>)
 8006a72:	2600      	movs	r6, #0
 8006a74:	e5b2      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a76:	4d17      	ldr	r5, [pc, #92]	; (8006ad4 <HAL_UART_Init+0xbc4>)
 8006a78:	2600      	movs	r6, #0
 8006a7a:	e5af      	b.n	80065dc <HAL_UART_Init+0x6cc>
 8006a7c:	09c0      	lsrs	r0, r0, #7
 8006a7e:	2100      	movs	r1, #0
 8006a80:	e60f      	b.n	80066a2 <HAL_UART_Init+0x792>
 8006a82:	0980      	lsrs	r0, r0, #6
 8006a84:	2100      	movs	r1, #0
 8006a86:	e60c      	b.n	80066a2 <HAL_UART_Init+0x792>
 8006a88:	28b0aa00 	.word	0x28b0aa00
 8006a8c:	00000000 	.word	0x00000000
 8006a90:	14585500 	.word	0x14585500
 8006a94:	00000000 	.word	0x00000000
 8006a98:	000f4240 	.word	0x000f4240
 8006a9c:	0028b0aa 	.word	0x0028b0aa
 8006aa0:	001e8480 	.word	0x001e8480
 8006aa4:	00155500 	.word	0x00155500
 8006aa8:	0007a120 	.word	0x0007a120
 8006aac:	0003d090 	.word	0x0003d090
 8006ab0:	1e848000 	.word	0x1e848000
 8006ab4:	0001e848 	.word	0x0001e848
 8006ab8:	000aaa00 	.word	0x000aaa00
 8006abc:	000ccc00 	.word	0x000ccc00
 8006ac0:	0f424000 	.word	0x0f424000
 8006ac4:	186a0000 	.word	0x186a0000
 8006ac8:	07a12000 	.word	0x07a12000
 8006acc:	00f42400 	.word	0x00f42400
 8006ad0:	01e84800 	.word	0x01e84800
 8006ad4:	03d09000 	.word	0x03d09000

08006ad8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8006adc:	2a01      	cmp	r2, #1
 8006ade:	d017      	beq.n	8006b10 <HAL_UARTEx_DisableFifoMode+0x38>
{
 8006ae0:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ae4:	2124      	movs	r1, #36	; 0x24
 8006ae6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8006aea:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aec:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aee:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006af0:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006af2:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006af6:	f024 0401 	bic.w	r4, r4, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8006afa:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8006afc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006afe:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b00:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8006b02:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006b04:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8006b08:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8006b0c:	bc30      	pop	{r4, r5}
 8006b0e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006b10:	2002      	movs	r0, #2
}
 8006b12:	4770      	bx	lr

08006b14 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b14:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8006b18:	2a01      	cmp	r2, #1
 8006b1a:	d049      	beq.n	8006bb0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8006b1c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b20:	681a      	ldr	r2, [r3, #0]
{
 8006b22:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b28:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b2a:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b2c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006b2e:	f020 0001 	bic.w	r0, r0, #1
 8006b32:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b34:	6890      	ldr	r0, [r2, #8]
 8006b36:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
{
 8006b3a:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b3c:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006b3e:	481d      	ldr	r0, [pc, #116]	; (8006bb4 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b40:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006b42:	f240 1107 	movw	r1, #263	; 0x107
 8006b46:	9000      	str	r0, [sp, #0]
 8006b48:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006b4a:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 8006b4e:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 8006b52:	f200 2006 	addw	r0, r0, #518	; 0x206
 8006b56:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8006b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b5e:	b325      	cbz	r5, 8006baa <HAL_UARTEx_SetTxFifoThreshold+0x96>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b60:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b62:	6896      	ldr	r6, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006b64:	a904      	add	r1, sp, #16
 8006b66:	f3c5 6542 	ubfx	r5, r5, #25, #3
 8006b6a:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006b6c:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006b70:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006b74:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006b78:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006b7c:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006b80:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006b82:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006b84:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006b88:	fb90 f0f5 	sdiv	r0, r0, r5
 8006b8c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006b90:	2100      	movs	r1, #0
 8006b92:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006b96:	2520      	movs	r5, #32
  return HAL_OK;
 8006b98:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b9a:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b9c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8006ba0:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8006ba4:	b004      	add	sp, #16
 8006ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8006ba8:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8006baa:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006bac:	4608      	mov	r0, r1
 8006bae:	e7ed      	b.n	8006b8c <HAL_UARTEx_SetTxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 8006bb0:	2002      	movs	r0, #2
}
 8006bb2:	4770      	bx	lr
 8006bb4:	03010101 	.word	0x03010101

08006bb8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006bb8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8006bbc:	2a01      	cmp	r2, #1
 8006bbe:	d049      	beq.n	8006c54 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8006bc0:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006bc2:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bc4:	681a      	ldr	r2, [r3, #0]
{
 8006bc6:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006bc8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bcc:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006bce:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bd0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006bd2:	f020 0001 	bic.w	r0, r0, #1
 8006bd6:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bd8:	6890      	ldr	r0, [r2, #8]
 8006bda:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
{
 8006bde:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006be0:	4301      	orrs	r1, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006be2:	481d      	ldr	r0, [pc, #116]	; (8006c58 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006be4:	6091      	str	r1, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006be6:	f240 1107 	movw	r1, #263	; 0x107
 8006bea:	9000      	str	r0, [sp, #0]
 8006bec:	9101      	str	r1, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006bee:	f100 3001 	add.w	r0, r0, #16843009	; 0x1010101
 8006bf2:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
 8006bf6:	f200 2006 	addw	r0, r0, #518	; 0x206
 8006bfa:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8006bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c02:	b325      	cbz	r5, 8006c4e <HAL_UARTEx_SetRxFifoThreshold+0x96>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c04:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c06:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	f3c5 6542 	ubfx	r5, r5, #25, #3
 8006c0e:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006c10:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006c14:	f815 1c10 	ldrb.w	r1, [r5, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006c18:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006c1c:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006c20:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006c24:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006c26:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006c28:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006c2c:	fb90 f0f5 	sdiv	r0, r0, r5
 8006c30:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006c34:	2100      	movs	r1, #0
 8006c36:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006c3a:	2520      	movs	r5, #32
  return HAL_OK;
 8006c3c:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3e:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006c40:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8006c44:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8006c48:	b004      	add	sp, #16
 8006c4a:	bcf0      	pop	{r4, r5, r6, r7}
 8006c4c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8006c4e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006c50:	4608      	mov	r0, r1
 8006c52:	e7ed      	b.n	8006c30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  __HAL_LOCK(huart);
 8006c54:	2002      	movs	r0, #2
}
 8006c56:	4770      	bx	lr
 8006c58:	03010101 	.word	0x03010101

08006c5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c5c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006c5e:	f000 fc45 	bl	80074ec <vTaskStartScheduler>
  
  return osOK;
}
 8006c62:	2000      	movs	r0, #0
 8006c64:	bd08      	pop	{r3, pc}
 8006c66:	bf00      	nop

08006c68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c68:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c6a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8006c6e:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8006c70:	2c84      	cmp	r4, #132	; 0x84
{
 8006c72:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 8006c74:	bf14      	ite	ne
 8006c76:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c78:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c7a:	ad03      	add	r5, sp, #12
{
 8006c7c:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c7e:	6840      	ldr	r0, [r0, #4]
 8006c80:	6811      	ldr	r1, [r2, #0]
 8006c82:	8a12      	ldrh	r2, [r2, #16]
 8006c84:	e9cd 4500 	strd	r4, r5, [sp]
 8006c88:	f000 fb16 	bl	80072b8 <xTaskCreate>
 8006c8c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c8e:	bf0c      	ite	eq
 8006c90:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8006c92:	2000      	movne	r0, #0
}
 8006c94:	b005      	add	sp, #20
 8006c96:	bd30      	pop	{r4, r5, pc}

08006c98 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c98:	4b11      	ldr	r3, [pc, #68]	; (8006ce0 <prvInsertBlockIntoFreeList+0x48>)
{
 8006c9a:	b430      	push	{r4, r5}
 8006c9c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4282      	cmp	r2, r0
 8006ca2:	d201      	bcs.n	8006ca8 <prvInsertBlockIntoFreeList+0x10>
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	e7fa      	b.n	8006c9e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ca8:	685c      	ldr	r4, [r3, #4]
 8006caa:	1919      	adds	r1, r3, r4
 8006cac:	4288      	cmp	r0, r1
 8006cae:	d103      	bne.n	8006cb8 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cb0:	6841      	ldr	r1, [r0, #4]
 8006cb2:	4421      	add	r1, r4
 8006cb4:	6059      	str	r1, [r3, #4]
 8006cb6:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cb8:	6844      	ldr	r4, [r0, #4]
 8006cba:	1901      	adds	r1, r0, r4
 8006cbc:	428a      	cmp	r2, r1
 8006cbe:	d108      	bne.n	8006cd2 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cc0:	68a9      	ldr	r1, [r5, #8]
 8006cc2:	428a      	cmp	r2, r1
 8006cc4:	d005      	beq.n	8006cd2 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cc6:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cca:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ccc:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cce:	6041      	str	r1, [r0, #4]
 8006cd0:	e000      	b.n	8006cd4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cd2:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cd4:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cd6:	bf18      	it	ne
 8006cd8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cda:	bc30      	pop	{r4, r5}
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000628 	.word	0x20000628

08006ce4 <pvPortMalloc>:
{
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 8006ce6:	4d41      	ldr	r5, [pc, #260]	; (8006dec <pvPortMalloc+0x108>)
{
 8006ce8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006cea:	f000 fcd1 	bl	8007690 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006cee:	68aa      	ldr	r2, [r5, #8]
 8006cf0:	2a00      	cmp	r2, #0
 8006cf2:	d058      	beq.n	8006da6 <pvPortMalloc+0xc2>
 8006cf4:	f8d5 7c0c 	ldr.w	r7, [r5, #3084]	; 0xc0c
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cf8:	423c      	tst	r4, r7
 8006cfa:	d14f      	bne.n	8006d9c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d04d      	beq.n	8006d9c <pvPortMalloc+0xb8>
				xWantedSize += xHeapStructSize;
 8006d00:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d04:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d06:	bf1c      	itt	ne
 8006d08:	f023 0307 	bicne.w	r3, r3, #7
 8006d0c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d044      	beq.n	8006d9c <pvPortMalloc+0xb8>
 8006d12:	f8d5 6c14 	ldr.w	r6, [r5, #3092]	; 0xc14
 8006d16:	429e      	cmp	r6, r3
 8006d18:	d340      	bcc.n	8006d9c <pvPortMalloc+0xb8>
				pxBlock = xStart.pxNextFreeBlock;
 8006d1a:	682c      	ldr	r4, [r5, #0]
				pxPreviousBlock = &xStart;
 8006d1c:	4833      	ldr	r0, [pc, #204]	; (8006dec <pvPortMalloc+0x108>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d1e:	e006      	b.n	8006d2e <pvPortMalloc+0x4a>
 8006d20:	f8d4 c000 	ldr.w	ip, [r4]
 8006d24:	f1bc 0f00 	cmp.w	ip, #0
 8006d28:	d004      	beq.n	8006d34 <pvPortMalloc+0x50>
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4664      	mov	r4, ip
 8006d2e:	6861      	ldr	r1, [r4, #4]
 8006d30:	4299      	cmp	r1, r3
 8006d32:	d3f5      	bcc.n	8006d20 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 8006d34:	4294      	cmp	r4, r2
 8006d36:	d031      	beq.n	8006d9c <pvPortMalloc+0xb8>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d3c:	1aca      	subs	r2, r1, r3
 8006d3e:	2a10      	cmp	r2, #16
 8006d40:	d910      	bls.n	8006d64 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d42:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d44:	0741      	lsls	r1, r0, #29
 8006d46:	d008      	beq.n	8006d5a <pvPortMalloc+0x76>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	e7fe      	b.n	8006d58 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d5a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d5c:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d5e:	f7ff ff9b 	bl	8006c98 <prvInsertBlockIntoFreeList>
 8006d62:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d64:	f8d5 2c10 	ldr.w	r2, [r5, #3088]	; 0xc10
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d68:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 8006d6a:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d6c:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d6e:	4296      	cmp	r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8006d70:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d74:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d78:	bf38      	it	cc
 8006d7a:	f8c5 6c10 	strcc.w	r6, [r5, #3088]	; 0xc10
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d7e:	f8c5 6c14 	str.w	r6, [r5, #3092]	; 0xc14
	( void ) xTaskResumeAll();
 8006d82:	f000 fd25 	bl	80077d0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d86:	0763      	lsls	r3, r4, #29
 8006d88:	d00b      	beq.n	8006da2 <pvPortMalloc+0xbe>
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	e7fe      	b.n	8006d9a <pvPortMalloc+0xb6>
	( void ) xTaskResumeAll();
 8006d9c:	f000 fd18 	bl	80077d0 <xTaskResumeAll>
 8006da0:	2400      	movs	r4, #0
}
 8006da2:	4620      	mov	r0, r4
 8006da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 8006da6:	f105 020c 	add.w	r2, r5, #12
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006daa:	0756      	lsls	r6, r2, #29
 8006dac:	d005      	beq.n	8006dba <pvPortMalloc+0xd6>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dae:	f105 0313 	add.w	r3, r5, #19
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db2:	f023 0307 	bic.w	r3, r3, #7
 8006db6:	4618      	mov	r0, r3
 8006db8:	e001      	b.n	8006dbe <pvPortMalloc+0xda>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006dba:	4613      	mov	r3, r2
 8006dbc:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8006dbe:	f602 32f8 	addw	r2, r2, #3064	; 0xbf8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc2:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dc6:	1ad3      	subs	r3, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8006dc8:	2600      	movs	r6, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dca:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8006dce:	e9c5 0600 	strd	r0, r6, [r5]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd2:	f8c5 3c10 	str.w	r3, [r5, #3088]	; 0xc10
	pxEnd->pxNextFreeBlock = NULL;
 8006dd6:	e9c2 6600 	strd	r6, r6, [r2]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dda:	f8c5 3c14 	str.w	r3, [r5, #3092]	; 0xc14
	pxEnd = ( void * ) uxAddress;
 8006dde:	60aa      	str	r2, [r5, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006de0:	f8c5 7c0c 	str.w	r7, [r5, #3084]	; 0xc0c
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006de4:	e9c0 2300 	strd	r2, r3, [r0]
 8006de8:	e786      	b.n	8006cf8 <pvPortMalloc+0x14>
 8006dea:	bf00      	nop
 8006dec:	20000628 	.word	0x20000628

08006df0 <vPortFree>:
	if( pv != NULL )
 8006df0:	b1e0      	cbz	r0, 8006e2c <vPortFree+0x3c>
{
 8006df2:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006df4:	4d19      	ldr	r5, [pc, #100]	; (8006e5c <vPortFree+0x6c>)
 8006df6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006dfa:	f8d5 2c0c 	ldr.w	r2, [r5, #3084]	; 0xc0c
 8006dfe:	4213      	tst	r3, r2
 8006e00:	d108      	bne.n	8006e14 <vPortFree+0x24>
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	e7fe      	b.n	8006e12 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e14:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006e18:	b149      	cbz	r1, 8006e2e <vPortFree+0x3e>
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	e7fe      	b.n	8006e2a <vPortFree+0x3a>
 8006e2c:	4770      	bx	lr
 8006e2e:	4604      	mov	r4, r0
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e30:	ea23 0302 	bic.w	r3, r3, r2
 8006e34:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006e38:	f000 fc2a 	bl	8007690 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e3c:	f8d5 2c14 	ldr.w	r2, [r5, #3092]	; 0xc14
 8006e40:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e44:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e48:	4413      	add	r3, r2
 8006e4a:	f8c5 3c14 	str.w	r3, [r5, #3092]	; 0xc14
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e4e:	f7ff ff23 	bl	8006c98 <prvInsertBlockIntoFreeList>
}
 8006e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8006e56:	f000 bcbb 	b.w	80077d0 <xTaskResumeAll>
 8006e5a:	bf00      	nop
 8006e5c:	20000628 	.word	0x20000628

08006e60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e60:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e64:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e68:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e6a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e6c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e6e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e70:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop

08006e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop

08006e80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e80:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006e82:	6802      	ldr	r2, [r0, #0]
{
 8006e84:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e86:	689c      	ldr	r4, [r3, #8]
 8006e88:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e8a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006e8c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006e8e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e90:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e92:	6099      	str	r1, [r3, #8]
}
 8006e94:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e98:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006e9a:	6002      	str	r2, [r0, #0]
}
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop

08006ea0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ea0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ea2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ea4:	1c6b      	adds	r3, r5, #1
 8006ea6:	d011      	beq.n	8006ecc <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ea8:	f100 0208 	add.w	r2, r0, #8
 8006eac:	e000      	b.n	8006eb0 <vListInsert+0x10>
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6853      	ldr	r3, [r2, #4]
 8006eb2:	681c      	ldr	r4, [r3, #0]
 8006eb4:	42ac      	cmp	r4, r5
 8006eb6:	d9fa      	bls.n	8006eae <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006eb8:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006eba:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006ebc:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ebe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ec0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ec2:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ec4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006ec6:	6004      	str	r4, [r0, #0]
}
 8006ec8:	bc30      	pop	{r4, r5}
 8006eca:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ecc:	6902      	ldr	r2, [r0, #16]
 8006ece:	6853      	ldr	r3, [r2, #4]
 8006ed0:	e7f2      	b.n	8006eb8 <vListInsert+0x18>
 8006ed2:	bf00      	nop

08006ed4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ed4:	6842      	ldr	r2, [r0, #4]
 8006ed6:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ed8:	6903      	ldr	r3, [r0, #16]
{
 8006eda:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006edc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ede:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ee0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ee2:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8006ee4:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8006ee6:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ee8:	bf08      	it	eq
 8006eea:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8006eec:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ef4:	6818      	ldr	r0, [r3, #0]
}
 8006ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006efc:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <prvTaskExitError+0x3c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
{
 8006f00:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006f02:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006f04:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8006f06:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006f08:	d008      	beq.n	8006f1c <prvTaskExitError+0x20>
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	e7fe      	b.n	8006f1a <prvTaskExitError+0x1e>
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0fc      	beq.n	8006f2c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f32:	b002      	add	sp, #8
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	200005e8 	.word	0x200005e8

08006f3c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f3c:	4808      	ldr	r0, [pc, #32]	; (8006f60 <prvPortStartFirstTask+0x24>)
 8006f3e:	6800      	ldr	r0, [r0, #0]
 8006f40:	6800      	ldr	r0, [r0, #0]
 8006f42:	f380 8808 	msr	MSP, r0
 8006f46:	f04f 0000 	mov.w	r0, #0
 8006f4a:	f380 8814 	msr	CONTROL, r0
 8006f4e:	b662      	cpsie	i
 8006f50:	b661      	cpsie	f
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	df00      	svc	0
 8006f5c:	bf00      	nop
 8006f5e:	0000      	.short	0x0000
 8006f60:	e000ed08 	.word	0xe000ed08

08006f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f74 <vPortEnableVFP+0x10>
 8006f68:	6801      	ldr	r1, [r0, #0]
 8006f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f6e:	6001      	str	r1, [r0, #0]
 8006f70:	4770      	bx	lr
 8006f72:	0000      	.short	0x0000
 8006f74:	e000ed88 	.word	0xe000ed88

08006f78 <pxPortInitialiseStack>:
{
 8006f78:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f7a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f7e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f82:	4c07      	ldr	r4, [pc, #28]	; (8006fa0 <pxPortInitialiseStack+0x28>)
 8006f84:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f88:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f8c:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f90:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f94:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006f98:	bc30      	pop	{r4, r5}
 8006f9a:	3844      	subs	r0, #68	; 0x44
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	08006efd 	.word	0x08006efd
	...

08006fb0 <SVC_Handler>:
	__asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	4770      	bx	lr
 8006fcc:	f3af 8000 	nop.w

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	200012f4 	.word	0x200012f4

08006fd4 <vPortEnterCritical>:
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006fe4:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <vPortEnterCritical+0x3c>)
 8006fe6:	6813      	ldr	r3, [r2, #0]
 8006fe8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006fea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006fec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006fee:	d000      	beq.n	8006ff2 <vPortEnterCritical+0x1e>
}
 8006ff0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <vPortEnterCritical+0x40>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ffa:	d0f9      	beq.n	8006ff0 <vPortEnterCritical+0x1c>
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	e7fe      	b.n	800700c <vPortEnterCritical+0x38>
 800700e:	bf00      	nop
 8007010:	200005e8 	.word	0x200005e8
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007018:	4a08      	ldr	r2, [pc, #32]	; (800703c <vPortExitCritical+0x24>)
 800701a:	6813      	ldr	r3, [r2, #0]
 800701c:	b943      	cbnz	r3, 8007030 <vPortExitCritical+0x18>
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	e7fe      	b.n	800702e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007030:	3b01      	subs	r3, #1
 8007032:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007034:	b90b      	cbnz	r3, 800703a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007036:	f383 8811 	msr	BASEPRI, r3
}
 800703a:	4770      	bx	lr
 800703c:	200005e8 	.word	0x200005e8

08007040 <PendSV_Handler>:
	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	f01e 0f10 	tst.w	lr, #16
 8007050:	bf08      	it	eq
 8007052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007064:	f380 8811 	msr	BASEPRI, r0
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f000 fc50 	bl	8007914 <vTaskSwitchContext>
 8007074:	f04f 0000 	mov.w	r0, #0
 8007078:	f380 8811 	msr	BASEPRI, r0
 800707c:	bc09      	pop	{r0, r3}
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	6808      	ldr	r0, [r1, #0]
 8007082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007086:	f01e 0f10 	tst.w	lr, #16
 800708a:	bf08      	it	eq
 800708c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007090:	f380 8809 	msr	PSP, r0
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst>:
 80070a0:	200012f4 	.word	0x200012f4

080070a4 <SysTick_Handler>:
{
 80070a4:	b508      	push	{r3, lr}
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80070b6:	f000 faf5 	bl	80076a4 <xTaskIncrementTick>
 80070ba:	b118      	cbz	r0, 80070c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070bc:	4b03      	ldr	r3, [pc, #12]	; (80070cc <SysTick_Handler+0x28>)
 80070be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80070c4:	2300      	movs	r3, #0
 80070c6:	f383 8811 	msr	BASEPRI, r3
}
 80070ca:	bd08      	pop	{r3, pc}
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070d0:	4b39      	ldr	r3, [pc, #228]	; (80071b8 <xPortStartScheduler+0xe8>)
 80070d2:	4a3a      	ldr	r2, [pc, #232]	; (80071bc <xPortStartScheduler+0xec>)
 80070d4:	6819      	ldr	r1, [r3, #0]
 80070d6:	4291      	cmp	r1, r2
 80070d8:	d03f      	beq.n	800715a <xPortStartScheduler+0x8a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4b38      	ldr	r3, [pc, #224]	; (80071c0 <xPortStartScheduler+0xf0>)
 80070de:	429a      	cmp	r2, r3
 80070e0:	d032      	beq.n	8007148 <xPortStartScheduler+0x78>
{
 80070e2:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070e4:	4b37      	ldr	r3, [pc, #220]	; (80071c4 <xPortStartScheduler+0xf4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070e6:	4938      	ldr	r1, [pc, #224]	; (80071c8 <xPortStartScheduler+0xf8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070e8:	781a      	ldrb	r2, [r3, #0]
{
 80070ea:	b082      	sub	sp, #8
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070ec:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070f2:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007100:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007104:	2007      	movs	r0, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007106:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800710a:	6048      	str	r0, [r1, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800710c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800710e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007110:	d511      	bpl.n	8007136 <xPortStartScheduler+0x66>
 8007112:	2306      	movs	r3, #6
 8007114:	e000      	b.n	8007118 <xPortStartScheduler+0x48>
 8007116:	4603      	mov	r3, r0
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007118:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800711c:	0052      	lsls	r2, r2, #1
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007124:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007128:	0612      	lsls	r2, r2, #24
 800712a:	f103 30ff 	add.w	r0, r3, #4294967295
 800712e:	d4f2      	bmi.n	8007116 <xPortStartScheduler+0x46>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007130:	2b03      	cmp	r3, #3
 8007132:	604b      	str	r3, [r1, #4]
 8007134:	d01a      	beq.n	800716c <xPortStartScheduler+0x9c>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	e7fe      	b.n	8007146 <xPortStartScheduler+0x76>
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	e7fe      	b.n	8007158 <xPortStartScheduler+0x88>
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	e7fe      	b.n	800716a <xPortStartScheduler+0x9a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800716c:	9801      	ldr	r0, [sp, #4]
 800716e:	4c15      	ldr	r4, [pc, #84]	; (80071c4 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007170:	4a16      	ldr	r2, [pc, #88]	; (80071cc <xPortStartScheduler+0xfc>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007172:	b2c0      	uxtb	r0, r0
 8007174:	7020      	strb	r0, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007176:	6810      	ldr	r0, [r2, #0]
 8007178:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
 800717c:	6010      	str	r0, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800717e:	6810      	ldr	r0, [r2, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007180:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007182:	f040 4070 	orr.w	r0, r0, #4026531840	; 0xf0000000
 8007186:	6010      	str	r0, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800718c:	604b      	str	r3, [r1, #4]
	vPortSetupTimerInterrupt();
 800718e:	f7fa fd1b 	bl	8001bc8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <xPortStartScheduler+0x100>)
 8007194:	2400      	movs	r4, #0
 8007196:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007198:	f7ff fee4 	bl	8006f64 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800719c:	4a0d      	ldr	r2, [pc, #52]	; (80071d4 <xPortStartScheduler+0x104>)
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071a4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80071a6:	f7ff fec9 	bl	8006f3c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80071aa:	f000 fbb3 	bl	8007914 <vTaskSwitchContext>
	prvTaskExitError();
 80071ae:	f7ff fea5 	bl	8006efc <prvTaskExitError>
}
 80071b2:	4620      	mov	r0, r4
 80071b4:	b002      	add	sp, #8
 80071b6:	bd10      	pop	{r4, pc}
 80071b8:	e000ed00 	.word	0xe000ed00
 80071bc:	410fc271 	.word	0x410fc271
 80071c0:	410fc270 	.word	0x410fc270
 80071c4:	e000e400 	.word	0xe000e400
 80071c8:	20001240 	.word	0x20001240
 80071cc:	e000ed20 	.word	0xe000ed20
 80071d0:	200005e8 	.word	0x200005e8
 80071d4:	e000ef34 	.word	0xe000ef34

080071d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	4c13      	ldr	r4, [pc, #76]	; (8007228 <prvIdleTask+0x50>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 80071dc:	4f13      	ldr	r7, [pc, #76]	; (800722c <prvIdleTask+0x54>)
 80071de:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80071e2:	e014      	b.n	800720e <prvIdleTask+0x36>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 80071e4:	f7ff fef6 	bl	8006fd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ec:	1d28      	adds	r0, r5, #4
 80071ee:	f7ff fe71 	bl	8006ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071f2:	69a3      	ldr	r3, [r4, #24]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	61a3      	str	r3, [r4, #24]
				--uxDeletedTasksWaitingCleanUp;
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 80071fe:	f7ff ff0b 	bl	8007018 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007202:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007204:	f7ff fdf4 	bl	8006df0 <vPortFree>
			vPortFree( pxTCB );
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff fdf1 	bl	8006df0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e7      	bne.n	80071e4 <prvIdleTask+0xc>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007214:	69e3      	ldr	r3, [r4, #28]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d9f9      	bls.n	800720e <prvIdleTask+0x36>
				taskYIELD();
 800721a:	603e      	str	r6, [r7, #0]
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	e7f3      	b.n	800720e <prvIdleTask+0x36>
 8007226:	bf00      	nop
 8007228:	20001248 	.word	0x20001248
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007232:	4c1f      	ldr	r4, [pc, #124]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x80>)
 8007234:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007238:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
{
 800723c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800723e:	1d18      	adds	r0, r3, #4
{
 8007240:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007242:	f7ff fe47 	bl	8006ed4 <uxListRemove>
 8007246:	b950      	cbnz	r0, 800725e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007248:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800724c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007250:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007252:	2201      	movs	r2, #1
 8007254:	408a      	lsls	r2, r1
 8007256:	ea23 0302 	bic.w	r3, r3, r2
 800725a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800725e:	1c73      	adds	r3, r6, #1
 8007260:	d01b      	beq.n	800729a <prvAddCurrentTaskToDelayedList+0x6a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007262:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007266:	19ad      	adds	r5, r5, r6
 8007268:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800726a:	d20d      	bcs.n	8007288 <prvAddCurrentTaskToDelayedList+0x58>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8007270:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007274:	3104      	adds	r1, #4
 8007276:	f7ff fe13 	bl	8006ea0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800727a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800727e:	42ab      	cmp	r3, r5
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007280:	bf88      	it	hi
 8007282:	f8c4 50d0 	strhi.w	r5, [r4, #208]	; 0xd0

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007288:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 800728c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
}
 8007290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007294:	3104      	adds	r1, #4
 8007296:	f7ff be03 	b.w	8006ea0 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800729a:	2f00      	cmp	r7, #0
 800729c:	d0e1      	beq.n	8007262 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800729e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80072a2:	4804      	ldr	r0, [pc, #16]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x84>)
 80072a4:	3104      	adds	r1, #4
}
 80072a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072aa:	f7ff bde9 	b.w	8006e80 <vListInsertEnd>
 80072ae:	bf00      	nop
 80072b0:	20001248 	.word	0x20001248
 80072b4:	200012fc 	.word	0x200012fc

080072b8 <xTaskCreate>:
	{
 80072b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072bc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80072c0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072c2:	4650      	mov	r0, sl
	{
 80072c4:	460d      	mov	r5, r1
 80072c6:	4699      	mov	r9, r3
 80072c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ca:	f7ff fd0b 	bl	8006ce4 <pvPortMalloc>
			if( pxStack != NULL )
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f000 8103 	beq.w	80074da <xTaskCreate+0x222>
 80072d4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80072d6:	2054      	movs	r0, #84	; 0x54
 80072d8:	f7ff fd04 	bl	8006ce4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80072dc:	4604      	mov	r4, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	f000 80ce 	beq.w	8007480 <xTaskCreate+0x1c8>
					pxNewTCB->pxStack = pxStack;
 80072e4:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072e6:	782b      	ldrb	r3, [r5, #0]
 80072e8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072ec:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 80072f0:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072f2:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072f4:	f026 0a07 	bic.w	sl, r6, #7
		if( pcName[ x ] == 0x00 )
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d04d      	beq.n	8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072fc:	786b      	ldrb	r3, [r5, #1]
 80072fe:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8007302:	786b      	ldrb	r3, [r5, #1]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d047      	beq.n	8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007308:	78ab      	ldrb	r3, [r5, #2]
 800730a:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800730e:	78ab      	ldrb	r3, [r5, #2]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d041      	beq.n	8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007314:	78eb      	ldrb	r3, [r5, #3]
 8007316:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800731a:	78eb      	ldrb	r3, [r5, #3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d03b      	beq.n	8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007320:	792b      	ldrb	r3, [r5, #4]
 8007322:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8007326:	792b      	ldrb	r3, [r5, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d035      	beq.n	8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800732c:	796b      	ldrb	r3, [r5, #5]
 800732e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8007332:	796b      	ldrb	r3, [r5, #5]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d02f      	beq.n	8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007338:	79ab      	ldrb	r3, [r5, #6]
 800733a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800733e:	79ab      	ldrb	r3, [r5, #6]
 8007340:	b353      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007342:	79eb      	ldrb	r3, [r5, #7]
 8007344:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8007348:	79eb      	ldrb	r3, [r5, #7]
 800734a:	b32b      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800734c:	7a2b      	ldrb	r3, [r5, #8]
 800734e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 8007352:	7a2b      	ldrb	r3, [r5, #8]
 8007354:	b303      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007356:	7a6b      	ldrb	r3, [r5, #9]
 8007358:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800735c:	7a6b      	ldrb	r3, [r5, #9]
 800735e:	b1db      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007360:	7aab      	ldrb	r3, [r5, #10]
 8007362:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8007366:	7aab      	ldrb	r3, [r5, #10]
 8007368:	b1b3      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800736a:	7aeb      	ldrb	r3, [r5, #11]
 800736c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 8007370:	7aeb      	ldrb	r3, [r5, #11]
 8007372:	b18b      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007374:	7b2b      	ldrb	r3, [r5, #12]
 8007376:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800737a:	7b2b      	ldrb	r3, [r5, #12]
 800737c:	b163      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800737e:	7b6b      	ldrb	r3, [r5, #13]
 8007380:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8007384:	7b6b      	ldrb	r3, [r5, #13]
 8007386:	b13b      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007388:	7bab      	ldrb	r3, [r5, #14]
 800738a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800738e:	7bab      	ldrb	r3, [r5, #14]
 8007390:	b113      	cbz	r3, 8007398 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007392:	7beb      	ldrb	r3, [r5, #15]
 8007394:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007398:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800739a:	2d06      	cmp	r5, #6
 800739c:	bf28      	it	cs
 800739e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073a0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073a4:	1d26      	adds	r6, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80073a6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80073a8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073aa:	4630      	mov	r0, r6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073ac:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80073b0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073b4:	f7ff fd60 	bl	8006e78 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073bc:	f104 0018 	add.w	r0, r4, #24
 80073c0:	f7ff fd5a 	bl	8006e78 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80073c4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073ca:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073cc:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073d0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073d2:	464a      	mov	r2, r9
 80073d4:	4641      	mov	r1, r8
 80073d6:	4650      	mov	r0, sl
 80073d8:	f7ff fdce 	bl	8006f78 <pxPortInitialiseStack>
 80073dc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80073de:	b107      	cbz	r7, 80073e2 <xTaskCreate+0x12a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073e0:	603c      	str	r4, [r7, #0]
		uxCurrentNumberOfTasks++;
 80073e2:	4d3f      	ldr	r5, [pc, #252]	; (80074e0 <xTaskCreate+0x228>)
	taskENTER_CRITICAL();
 80073e4:	f7ff fdf6 	bl	8006fd4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80073e8:	69ab      	ldr	r3, [r5, #24]
 80073ea:	3301      	adds	r3, #1
 80073ec:	61ab      	str	r3, [r5, #24]
		if( pxCurrentTCB == NULL )
 80073ee:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d03b      	beq.n	800746e <xTaskCreate+0x1b6>
			if( xSchedulerRunning == pdFALSE )
 80073f6:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
 80073fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80073fc:	b37a      	cbz	r2, 800745e <xTaskCreate+0x1a6>
 80073fe:	f105 081c 	add.w	r8, r5, #28
		prvAddTaskToReadyList( pxNewTCB );
 8007402:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 8007406:	2701      	movs	r7, #1
 8007408:	fa07 fc03 	lsl.w	ip, r7, r3
 800740c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007410:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8007414:	ea4c 0302 	orr.w	r3, ip, r2
		uxTaskNumber++;
 8007418:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 800741c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		uxTaskNumber++;
 8007420:	443a      	add	r2, r7
		prvAddTaskToReadyList( pxNewTCB );
 8007422:	4631      	mov	r1, r6
		uxTaskNumber++;
 8007424:	f8c5 2114 	str.w	r2, [r5, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8007428:	f7ff fd2a 	bl	8006e80 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800742c:	f7ff fdf4 	bl	8007018 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007430:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8007434:	b183      	cbz	r3, 8007458 <xTaskCreate+0x1a0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007436:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 800743a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800743c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800743e:	429a      	cmp	r2, r3
 8007440:	d20a      	bcs.n	8007458 <xTaskCreate+0x1a0>
			taskYIELD_IF_USING_PREEMPTION();
 8007442:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <xTaskCreate+0x22c>)
 8007444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8007452:	4638      	mov	r0, r7
	}
 8007454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
 8007458:	4638      	mov	r0, r7
	}
 800745a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800745e:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8007462:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007464:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007466:	bf98      	it	ls
 8007468:	f8c5 40ac 	strls.w	r4, [r5, #172]	; 0xac
 800746c:	e7c7      	b.n	80073fe <xTaskCreate+0x146>
			pxCurrentTCB = pxNewTCB;
 800746e:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007472:	69ab      	ldr	r3, [r5, #24]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d00a      	beq.n	800748e <xTaskCreate+0x1d6>
 8007478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800747a:	f105 081c 	add.w	r8, r5, #28
 800747e:	e7c0      	b.n	8007402 <xTaskCreate+0x14a>
					vPortFree( pxStack );
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff fcb5 	bl	8006df0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007486:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800748a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748e:	f105 081c 	add.w	r8, r5, #28
 8007492:	4647      	mov	r7, r8
 8007494:	f105 09a8 	add.w	r9, r5, #168	; 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007498:	4638      	mov	r0, r7
 800749a:	3714      	adds	r7, #20
 800749c:	f7ff fce0 	bl	8006e60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074a0:	454f      	cmp	r7, r9
 80074a2:	d1f9      	bne.n	8007498 <xTaskCreate+0x1e0>
	vListInitialise( &xDelayedTaskList1 );
 80074a4:	4f10      	ldr	r7, [pc, #64]	; (80074e8 <xTaskCreate+0x230>)
 80074a6:	4638      	mov	r0, r7
	vListInitialise( &xDelayedTaskList2 );
 80074a8:	f107 0914 	add.w	r9, r7, #20
	vListInitialise( &xDelayedTaskList1 );
 80074ac:	f7ff fcd8 	bl	8006e60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074b0:	4648      	mov	r0, r9
 80074b2:	f7ff fcd5 	bl	8006e60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074b6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80074ba:	f7ff fcd1 	bl	8006e60 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80074be:	f1a7 00d0 	sub.w	r0, r7, #208	; 0xd0
 80074c2:	f7ff fccd 	bl	8006e60 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80074c6:	f1a7 0020 	sub.w	r0, r7, #32
 80074ca:	f7ff fcc9 	bl	8006e60 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80074ce:	f8c5 70cc 	str.w	r7, [r5, #204]	; 0xcc
 80074d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074d4:	f8c5 90c8 	str.w	r9, [r5, #200]	; 0xc8
 80074d8:	e793      	b.n	8007402 <xTaskCreate+0x14a>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	e7bc      	b.n	800745a <xTaskCreate+0x1a2>
 80074e0:	20001248 	.word	0x20001248
 80074e4:	e000ed04 	.word	0xe000ed04
 80074e8:	2000131c 	.word	0x2000131c

080074ec <vTaskStartScheduler>:
{
 80074ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80074f4:	f7ff fbf6 	bl	8006ce4 <pvPortMalloc>
			if( pxStack != NULL )
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f000 808e 	beq.w	800761a <vTaskStartScheduler+0x12e>
 80074fe:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007500:	2054      	movs	r0, #84	; 0x54
 8007502:	f7ff fbef 	bl	8006ce4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007506:	4605      	mov	r5, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	f000 8083 	beq.w	8007614 <vTaskStartScheduler+0x128>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800750e:	2400      	movs	r4, #0
 8007510:	4b5a      	ldr	r3, [pc, #360]	; (800767c <vTaskStartScheduler+0x190>)
 8007512:	6343      	str	r3, [r0, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007514:	1d07      	adds	r7, r0, #4
					pxNewTCB->pxStack = pxStack;
 8007516:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007518:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800751c:	f880 4043 	strb.w	r4, [r0, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8007520:	62c4      	str	r4, [r0, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8007522:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff fca6 	bl	8006e78 <vListInitialiseItem>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800752c:	f506 76fe 	add.w	r6, r6, #508	; 0x1fc
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007530:	f105 0018 	add.w	r0, r5, #24
 8007534:	f7ff fca0 	bl	8006e78 <vListInitialiseItem>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007538:	f026 0607 	bic.w	r6, r6, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800753c:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 800753e:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007540:	4622      	mov	r2, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007542:	61ab      	str	r3, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007544:	f885 4050 	strb.w	r4, [r5, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007548:	494d      	ldr	r1, [pc, #308]	; (8007680 <vTaskStartScheduler+0x194>)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800754a:	612d      	str	r5, [r5, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800754c:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800754e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007550:	f7ff fd12 	bl	8006f78 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007554:	4c4b      	ldr	r4, [pc, #300]	; (8007684 <vTaskStartScheduler+0x198>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007556:	6028      	str	r0, [r5, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007558:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
	taskENTER_CRITICAL();
 800755c:	f7ff fd3a 	bl	8006fd4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007560:	69a3      	ldr	r3, [r4, #24]
 8007562:	3301      	adds	r3, #1
 8007564:	61a3      	str	r3, [r4, #24]
		if( pxCurrentTCB == NULL )
 8007566:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800756a:	2b00      	cmp	r3, #0
 800756c:	d049      	beq.n	8007602 <vTaskStartScheduler+0x116>
			if( xSchedulerRunning == pdFALSE )
 800756e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8007572:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007574:	b933      	cbnz	r3, 8007584 <vTaskStartScheduler+0x98>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007576:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800757e:	bf98      	it	ls
 8007580:	f8c4 50ac 	strls.w	r5, [r4, #172]	; 0xac
 8007584:	f104 061c 	add.w	r6, r4, #28
		prvAddTaskToReadyList( pxNewTCB );
 8007588:	f8d4 c0b0 	ldr.w	ip, [r4, #176]	; 0xb0
		uxTaskNumber++;
 800758c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8007590:	2201      	movs	r2, #1
 8007592:	4082      	lsls	r2, r0
 8007594:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 8007598:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800759a:	ea42 020c 	orr.w	r2, r2, ip
 800759e:	4639      	mov	r1, r7
 80075a0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
		uxTaskNumber++;
 80075a4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		prvAddTaskToReadyList( pxNewTCB );
 80075a8:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80075ac:	f7ff fc68 	bl	8006e80 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80075b0:	f7ff fd32 	bl	8007018 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80075b4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80075b8:	b16b      	cbz	r3, 80075d6 <vTaskStartScheduler+0xea>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075ba:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80075be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80075c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d207      	bcs.n	80075d6 <vTaskStartScheduler+0xea>
			taskYIELD_IF_USING_PREEMPTION();
 80075c6:	4b30      	ldr	r3, [pc, #192]	; (8007688 <vTaskStartScheduler+0x19c>)
 80075c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
		xTickCount = ( TickType_t ) 0U;
 80075e6:	2300      	movs	r3, #0
		xNextTaskUnblockTime = portMAX_DELAY;
 80075e8:	f04f 31ff 	mov.w	r1, #4294967295
		xSchedulerRunning = pdTRUE;
 80075ec:	2201      	movs	r2, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 80075ee:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
		xSchedulerRunning = pdTRUE;
 80075f2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
		xTickCount = ( TickType_t ) 0U;
 80075f6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 80075fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 80075fe:	f7ff bd67 	b.w	80070d0 <xPortStartScheduler>
			pxCurrentTCB = pxNewTCB;
 8007602:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007606:	69a3      	ldr	r3, [r4, #24]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d00f      	beq.n	800762c <vTaskStartScheduler+0x140>
 800760c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800760e:	f104 061c 	add.w	r6, r4, #28
 8007612:	e7b9      	b.n	8007588 <vTaskStartScheduler+0x9c>
					vPortFree( pxStack );
 8007614:	4630      	mov	r0, r6
 8007616:	f7ff fbeb 	bl	8006df0 <vPortFree>
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	e7fe      	b.n	800762a <vTaskStartScheduler+0x13e>
 800762c:	f104 061c 	add.w	r6, r4, #28
 8007630:	46b0      	mov	r8, r6
 8007632:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007636:	4640      	mov	r0, r8
 8007638:	f108 0814 	add.w	r8, r8, #20
 800763c:	f7ff fc10 	bl	8006e60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007640:	45c1      	cmp	r9, r8
 8007642:	d1f8      	bne.n	8007636 <vTaskStartScheduler+0x14a>
	vListInitialise( &xDelayedTaskList1 );
 8007644:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800768c <vTaskStartScheduler+0x1a0>
 8007648:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 800764a:	f108 0914 	add.w	r9, r8, #20
	vListInitialise( &xDelayedTaskList1 );
 800764e:	f7ff fc07 	bl	8006e60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007652:	4648      	mov	r0, r9
 8007654:	f7ff fc04 	bl	8006e60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007658:	f108 0028 	add.w	r0, r8, #40	; 0x28
 800765c:	f7ff fc00 	bl	8006e60 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007660:	f1a8 00d0 	sub.w	r0, r8, #208	; 0xd0
 8007664:	f7ff fbfc 	bl	8006e60 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007668:	f1a8 0020 	sub.w	r0, r8, #32
 800766c:	f7ff fbf8 	bl	8006e60 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007670:	f8c4 80cc 	str.w	r8, [r4, #204]	; 0xcc
 8007674:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007676:	f8c4 90c8 	str.w	r9, [r4, #200]	; 0xc8
 800767a:	e785      	b.n	8007588 <vTaskStartScheduler+0x9c>
 800767c:	454c4449 	.word	0x454c4449
 8007680:	080071d9 	.word	0x080071d9
 8007684:	20001248 	.word	0x20001248
 8007688:	e000ed04 	.word	0xe000ed04
 800768c:	2000131c 	.word	0x2000131c

08007690 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007690:	4a03      	ldr	r2, [pc, #12]	; (80076a0 <vTaskSuspendAll+0x10>)
 8007692:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8007696:	3301      	adds	r3, #1
 8007698:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	20001248 	.word	0x20001248

080076a4 <xTaskIncrementTick>:
{
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a8:	4c47      	ldr	r4, [pc, #284]	; (80077c8 <xTaskIncrementTick+0x124>)
 80076aa:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80076ae:	b9b3      	cbnz	r3, 80076de <xTaskIncrementTick+0x3a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076b0:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80076b4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80076b6:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076ba:	b1f6      	cbz	r6, 80076fa <xTaskIncrementTick+0x56>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076bc:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 80076c0:	42b3      	cmp	r3, r6
 80076c2:	d928      	bls.n	8007716 <xTaskIncrementTick+0x72>
BaseType_t xSwitchRequired = pdFALSE;
 80076c4:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076c6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80076d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076d4:	69db      	ldr	r3, [r3, #28]
				xSwitchRequired = pdTRUE;
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	bf28      	it	cs
 80076da:	2501      	movcs	r5, #1
 80076dc:	e005      	b.n	80076ea <xTaskIncrementTick+0x46>
		++uxPendedTicks;
 80076de:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80076e2:	3301      	adds	r3, #1
 80076e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
BaseType_t xSwitchRequired = pdFALSE;
 80076e8:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 80076ea:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
			xSwitchRequired = pdTRUE;
 80076ee:	2b00      	cmp	r3, #0
}
 80076f0:	bf0c      	ite	eq
 80076f2:	4628      	moveq	r0, r5
 80076f4:	2001      	movne	r0, #1
 80076f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			taskSWITCH_DELAYED_LISTS();
 80076fa:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d043      	beq.n	800778c <xTaskIncrementTick+0xe8>
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	e7fe      	b.n	8007714 <xTaskIncrementTick+0x70>
					prvAddTaskToReadyList( pxTCB );
 8007716:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80077cc <xTaskIncrementTick+0x128>
BaseType_t xSwitchRequired = pdFALSE;
 800771a:	2500      	movs	r5, #0
					prvAddTaskToReadyList( pxTCB );
 800771c:	f04f 0901 	mov.w	r9, #1
 8007720:	e027      	b.n	8007772 <xTaskIncrementTick+0xce>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007722:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800772a:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800772c:	f107 0804 	add.w	r8, r7, #4
					if( xConstTickCount < xItemValue )
 8007730:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007732:	4640      	mov	r0, r8
					if( xConstTickCount < xItemValue )
 8007734:	d327      	bcc.n	8007786 <xTaskIncrementTick+0xe2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007736:	f7ff fbcd 	bl	8006ed4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800773c:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007740:	b10b      	cbz	r3, 8007746 <xTaskIncrementTick+0xa2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007742:	f7ff fbc7 	bl	8006ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007748:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800774c:	fa09 f300 	lsl.w	r3, r9, r0
 8007750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007754:	4313      	orrs	r3, r2
 8007756:	4641      	mov	r1, r8
 8007758:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800775c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8007760:	f7ff fb8e 	bl	8006e80 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007764:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800776c:	429a      	cmp	r2, r3
 800776e:	bf28      	it	cs
 8007770:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007772:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1d2      	bne.n	8007722 <xTaskIncrementTick+0x7e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777c:	f04f 33ff 	mov.w	r3, #4294967295
 8007780:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					break;
 8007784:	e79f      	b.n	80076c6 <xTaskIncrementTick+0x22>
						xNextTaskUnblockTime = xItemValue;
 8007786:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
						break;
 800778a:	e79c      	b.n	80076c6 <xTaskIncrementTick+0x22>
			taskSWITCH_DELAYED_LISTS();
 800778c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8007790:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8007794:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
 8007798:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 800779c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80077a0:	3301      	adds	r3, #1
 80077a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077a6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	b923      	cbnz	r3, 80077b8 <xTaskIncrementTick+0x114>
		xNextTaskUnblockTime = portMAX_DELAY;
 80077ae:	f04f 33ff 	mov.w	r3, #4294967295
 80077b2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80077b6:	e781      	b.n	80076bc <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077b8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80077bc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80077c6:	e779      	b.n	80076bc <xTaskIncrementTick+0x18>
 80077c8:	20001248 	.word	0x20001248
 80077cc:	20001264 	.word	0x20001264

080077d0 <xTaskResumeAll>:
{
 80077d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80077d4:	4c3a      	ldr	r4, [pc, #232]	; (80078c0 <xTaskResumeAll+0xf0>)
 80077d6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80077da:	b943      	cbnz	r3, 80077ee <xTaskResumeAll+0x1e>
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	e7fe      	b.n	80077ec <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 80077ee:	f7ff fbf1 	bl	8006fd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80077f2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80077f6:	3b01      	subs	r3, #1
 80077f8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077fc:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 8007800:	bb5d      	cbnz	r5, 800785a <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007802:	69a3      	ldr	r3, [r4, #24]
 8007804:	b34b      	cbz	r3, 800785a <xTaskResumeAll+0x8a>
					prvAddTaskToReadyList( pxTCB );
 8007806:	2601      	movs	r6, #1
 8007808:	f104 071c 	add.w	r7, r4, #28
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800780c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8007810:	b34b      	cbz	r3, 8007866 <xTaskResumeAll+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007812:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007816:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007818:	f105 0804 	add.w	r8, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800781c:	f105 0018 	add.w	r0, r5, #24
 8007820:	f7ff fb58 	bl	8006ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007824:	4640      	mov	r0, r8
 8007826:	f7ff fb55 	bl	8006ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800782a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800782c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8007830:	fa06 f300 	lsl.w	r3, r6, r0
 8007834:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007838:	4313      	orrs	r3, r2
 800783a:	4641      	mov	r1, r8
 800783c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007840:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8007844:	f7ff fb1c 	bl	8006e80 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007848:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800784c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	429a      	cmp	r2, r3
 8007852:	d3db      	bcc.n	800780c <xTaskResumeAll+0x3c>
						xYieldPending = pdTRUE;
 8007854:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
 8007858:	e7d8      	b.n	800780c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800785a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800785c:	f7ff fbdc 	bl	8007018 <vPortExitCritical>
}
 8007860:	4620      	mov	r0, r4
 8007862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxTCB != NULL )
 8007866:	b13d      	cbz	r5, 8007878 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007868:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	b9f3      	cbnz	r3, 80078ae <xTaskResumeAll+0xde>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007870:	f04f 33ff 	mov.w	r3, #4294967295
 8007874:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007878:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800787c:	b14d      	cbz	r5, 8007892 <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
 800787e:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007880:	f7ff ff10 	bl	80076a4 <xTaskIncrementTick>
 8007884:	b108      	cbz	r0, 800788a <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8007886:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800788a:	3d01      	subs	r5, #1
 800788c:	d1f8      	bne.n	8007880 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800788e:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
				if( xYieldPending != pdFALSE )
 8007892:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0df      	beq.n	800785a <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <xTaskResumeAll+0xf4>)
 800789c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80078aa:	2401      	movs	r4, #1
 80078ac:	e7d6      	b.n	800785c <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078ae:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80078b2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80078bc:	e7dc      	b.n	8007878 <xTaskResumeAll+0xa8>
 80078be:	bf00      	nop
 80078c0:	20001248 	.word	0x20001248
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <vTaskDelay>:
	{
 80078c8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078ca:	b1b0      	cbz	r0, 80078fa <vTaskDelay+0x32>
			configASSERT( uxSchedulerSuspended == 0 );
 80078cc:	4b0f      	ldr	r3, [pc, #60]	; (800790c <vTaskDelay+0x44>)
 80078ce:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 80078d2:	b141      	cbz	r1, 80078e6 <vTaskDelay+0x1e>
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	e7fe      	b.n	80078e4 <vTaskDelay+0x1c>
	++uxSchedulerSuspended;
 80078e6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80078ea:	3201      	adds	r2, #1
 80078ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078f0:	f7ff fc9e 	bl	8007230 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80078f4:	f7ff ff6c 	bl	80077d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80078f8:	b938      	cbnz	r0, 800790a <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <vTaskDelay+0x48>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
	}
 800790a:	bd08      	pop	{r3, pc}
 800790c:	20001248 	.word	0x20001248
 8007910:	e000ed04 	.word	0xe000ed04

08007914 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007914:	4a19      	ldr	r2, [pc, #100]	; (800797c <vTaskSwitchContext+0x68>)
 8007916:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 800791a:	b9e3      	cbnz	r3, 8007956 <vTaskSwitchContext+0x42>
{
 800791c:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800791e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007922:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007926:	fab3 f383 	clz	r3, r3
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f1c3 031f 	rsb	r3, r3, #31
 8007930:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007934:	0089      	lsls	r1, r1, #2
 8007936:	1854      	adds	r4, r2, r1
 8007938:	69e0      	ldr	r0, [r4, #28]
 800793a:	b180      	cbz	r0, 800795e <vTaskSwitchContext+0x4a>
 800793c:	6a20      	ldr	r0, [r4, #32]
 800793e:	4411      	add	r1, r2
 8007940:	6840      	ldr	r0, [r0, #4]
 8007942:	6220      	str	r0, [r4, #32]
 8007944:	3124      	adds	r1, #36	; 0x24
 8007946:	4288      	cmp	r0, r1
 8007948:	d012      	beq.n	8007970 <vTaskSwitchContext+0x5c>
 800794a:	68c3      	ldr	r3, [r0, #12]
 800794c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
}
 8007950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007954:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8007956:	2301      	movs	r3, #1
 8007958:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
 800795c:	4770      	bx	lr
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	e7fe      	b.n	800796e <vTaskSwitchContext+0x5a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007970:	2114      	movs	r1, #20
 8007972:	fb01 2303 	mla	r3, r1, r3, r2
 8007976:	6840      	ldr	r0, [r0, #4]
 8007978:	6218      	str	r0, [r3, #32]
 800797a:	e7e6      	b.n	800794a <vTaskSwitchContext+0x36>
 800797c:	20001248 	.word	0x20001248

08007980 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8007980:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8007982:	8840      	ldrh	r0, [r0, #2]
 8007984:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8007988:	0c00      	lsrs	r0, r0, #16
 800798a:	4770      	bx	lr

0800798c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800798c:	b410      	push	{r4}
 800798e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007990:	8802      	ldrh	r2, [r0, #0]
 8007992:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8007994:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007998:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800799c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80079a0:	42a2      	cmp	r2, r4
{
 80079a2:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80079a4:	d219      	bcs.n	80079da <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80079a6:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80079aa:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80079ae:	b2e4      	uxtb	r4, r4
 80079b0:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80079b4:	8882      	ldrh	r2, [r0, #4]
 80079b6:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80079ba:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80079c0:	bfbc      	itt	lt
 80079c2:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80079c6:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfbc      	itt	lt
 80079cc:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80079d0:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80079d2:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80079d6:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80079da:	b289      	uxth	r1, r1
 80079dc:	2000      	movs	r0, #0
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f361 000f 	bfi	r0, r1, #0, #16
 80079e4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80079e8:	b005      	add	sp, #20
 80079ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 80079f0:	4401      	add	r1, r0
 80079f2:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 80079f6:	4770      	bx	lr

080079f8 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 80079f8:	4401      	add	r1, r0
}
 80079fa:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 80079fe:	4770      	bx	lr

08007a00 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8007a00:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007a04:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8007a06:	4770      	bx	lr

08007a08 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8007a08:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8007a0c:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop

08007a14 <DAC_Init>:
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{  
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;

  if(pDacHandle->hDAC_CH1_ENABLED == ENABLE)
 8007a14:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d104      	bne.n	8007a24 <DAC_Init+0x10>
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8007a1a:	4a07      	ldr	r2, [pc, #28]	; (8007a38 <DAC_Init+0x24>)
 8007a1c:	6813      	ldr	r3, [r2, #0]
 8007a1e:	f043 0301 	orr.w	r3, r3, #1
 8007a22:	6013      	str	r3, [r2, #0]
    /* Enable DAC Channel1 */
    LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);

  }
#if defined(DAC_CHANNEL2_SUPPORT)
  if(pDacHandle->hDAC_CH2_ENABLED == ENABLE)
 8007a24:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d104      	bne.n	8007a34 <DAC_Init+0x20>
 8007a2a:	4a03      	ldr	r2, [pc, #12]	; (8007a38 <DAC_Init+0x24>)
 8007a2c:	6813      	ldr	r3, [r2, #0]
 8007a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
    /* Enable DAC Channel2 */
    LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);

  }
#endif
}
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	50000800 	.word	0x50000800

08007a3c <DAC_Exec>:
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;
  
  if(pDacHandle->hDAC_CH1_ENABLED == ENABLE)
 8007a3c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8007a3e:	2b01      	cmp	r3, #1
{
 8007a40:	b510      	push	{r4, lr}
 8007a42:	4604      	mov	r4, r0
  if(pDacHandle->hDAC_CH1_ENABLED == ENABLE)
 8007a44:	d01a      	beq.n	8007a7c <DAC_Exec+0x40>
    LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                    DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
    LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  if(pDacHandle->hDAC_CH2_ENABLED == ENABLE)
 8007a46:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d000      	beq.n	8007a4e <DAC_Exec+0x12>
                     DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
    LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);

  }
#endif
}
 8007a4c:	bd10      	pop	{r4, pc}
                     DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8007a54:	4620      	mov	r0, r4
 8007a56:	f7fb f80f 	bl	8002a78 <UI_GetReg>
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8007a5a:	4913      	ldr	r1, [pc, #76]	; (8007aa8 <DAC_Exec+0x6c>)
  SET_BIT(DACx->SWTRIGR,
 8007a5c:	4a13      	ldr	r2, [pc, #76]	; (8007aac <DAC_Exec+0x70>)

  MODIFY_REG(*preg,
 8007a5e:	690b      	ldr	r3, [r1, #16]
 8007a60:	b200      	sxth	r0, r0
 8007a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a6a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8007a6e:	4318      	orrs	r0, r3
 8007a70:	6108      	str	r0, [r1, #16]
  SET_BIT(DACx->SWTRIGR,
 8007a72:	6853      	ldr	r3, [r2, #4]
 8007a74:	f043 0302 	orr.w	r3, r3, #2
 8007a78:	6053      	str	r3, [r2, #4]
}
 8007a7a:	bd10      	pop	{r4, pc}
                    DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8007a82:	f7fa fff9 	bl	8002a78 <UI_GetReg>
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8007a86:	4908      	ldr	r1, [pc, #32]	; (8007aa8 <DAC_Exec+0x6c>)
  SET_BIT(DACx->SWTRIGR,
 8007a88:	4a08      	ldr	r2, [pc, #32]	; (8007aac <DAC_Exec+0x70>)
  MODIFY_REG(*preg,
 8007a8a:	684b      	ldr	r3, [r1, #4]
 8007a8c:	b200      	sxth	r0, r0
 8007a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a96:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8007a9a:	4318      	orrs	r0, r3
 8007a9c:	6048      	str	r0, [r1, #4]
  SET_BIT(DACx->SWTRIGR,
 8007a9e:	6853      	ldr	r3, [r2, #4]
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	6053      	str	r3, [r2, #4]
 8007aa6:	e7ce      	b.n	8007a46 <DAC_Exec+0xa>
 8007aa8:	50000808 	.word	0x50000808
 8007aac:	50000800 	.word	0x50000800

08007ab0 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 8007ab0:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 8007ab2:	2400      	movs	r4, #0
 8007ab4:	7384      	strb	r4, [r0, #14]
  pHandle->EncRestart = false;
 8007ab6:	73c4      	strb	r4, [r0, #15]
  pHandle->pVSS = pVSS;
 8007ab8:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pENC = pENC;
 8007abc:	6083      	str	r3, [r0, #8]
}
 8007abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 8007ac4:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8007ac6:	2200      	movs	r2, #0
{
 8007ac8:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8007aca:	4611      	mov	r1, r2
 8007acc:	6840      	ldr	r0, [r0, #4]
 8007ace:	f002 f8bf 	bl	8009c50 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 8007ad2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8007ad6:	6860      	ldr	r0, [r4, #4]
 8007ad8:	f002 f8b2 	bl	8009c40 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f001 fe00 	bl	80096e4 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	f001 fdff 	bl	80096ec <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 8007aee:	8ae2      	ldrh	r2, [r4, #22]
 8007af0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	f001 fdf9 	bl	80096ec <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8007afa:	8ae1      	ldrh	r1, [r4, #22]
 8007afc:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 8007afe:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8007b00:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 8007b04:	fba2 2303 	umull	r2, r3, r2, r3
 8007b08:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	81a3      	strh	r3, [r4, #12]
}
 8007b0e:	bd10      	pop	{r4, pc}
 8007b10:	10624dd3 	.word	0x10624dd3

08007b14 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 8007b14:	8983      	ldrh	r3, [r0, #12]
 8007b16:	b12b      	cbz	r3, 8007b24 <EAC_Exec+0x10>
  {
    pHandle->hRemainingTicks--;
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 8007b1e:	b11b      	cbz	r3, 8007b28 <EAC_Exec+0x14>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 8007b20:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 8007b22:	4770      	bx	lr
  bool retVal = true;
 8007b24:	2001      	movs	r0, #1
 8007b26:	4770      	bx	lr
{
 8007b28:	b510      	push	{r4, lr}
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 8007b2a:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8007b2e:	7e03      	ldrb	r3, [r0, #24]
 8007b30:	fb91 f1f3 	sdiv	r1, r1, r3
 8007b34:	4604      	mov	r4, r0
 8007b36:	6880      	ldr	r0, [r0, #8]
 8007b38:	f000 f938 	bl	8007dac <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	73a0      	strb	r0, [r4, #14]
}
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	bf00      	nop

08007b44 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 8007b44:	7b80      	ldrb	r0, [r0, #14]
 8007b46:	4770      	bx	lr

08007b48 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 8007b48:	73c1      	strb	r1, [r0, #15]
}
 8007b4a:	4770      	bx	lr

08007b4c <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 8007b4c:	7bc0      	ldrb	r0, [r0, #15]
 8007b4e:	4770      	bx	lr

08007b50 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007b50:	69c3      	ldr	r3, [r0, #28]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8007b52:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
{
 8007b56:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8007b58:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007b5a:	f8b0 606a 	ldrh.w	r6, [r0, #106]	; 0x6a
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8007b5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007b62:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007b64:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8007b66:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8007b6a:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007b6c:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8007b70:	6259      	str	r1, [r3, #36]	; 0x24
 8007b72:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8007b76:	6202      	str	r2, [r0, #32]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007b78:	6644      	str	r4, [r0, #100]	; 0x64
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007b7a:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007b7c:	f890 4073 	ldrb.w	r4, [r0, #115]	; 0x73
 8007b80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007b84:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007b88:	619a      	str	r2, [r3, #24]
 8007b8a:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007b8c:	f890 4073 	ldrb.w	r4, [r0, #115]	; 0x73
 8007b90:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007b94:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007b98:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007b9c:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007b9e:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8007bb0:	f890 2071 	ldrb.w	r2, [r0, #113]	; 0x71

  for ( Index = 0u; Index < BufferSize; Index++ )
 8007bb4:	b13a      	cbz	r2, 8007bc6 <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8007bb6:	3a01      	subs	r2, #1
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	3201      	adds	r2, #1
 8007bbc:	0092      	lsls	r2, r2, #2
 8007bbe:	3024      	adds	r0, #36	; 0x24
  }
}
 8007bc0:	bc70      	pop	{r4, r5, r6}
 8007bc2:	f002 b8cb 	b.w	8009d5c <memset>
 8007bc6:	bc70      	pop	{r4, r5, r6}
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop

08007bcc <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 8007bcc:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8007bce:	f890 2071 	ldrb.w	r2, [r0, #113]	; 0x71
{
 8007bd2:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8007bd4:	b13a      	cbz	r2, 8007be6 <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8007bd6:	3a01      	subs	r2, #1
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	3201      	adds	r2, #1
 8007bdc:	0092      	lsls	r2, r2, #2
 8007bde:	2100      	movs	r1, #0
 8007be0:	3024      	adds	r0, #36	; 0x24
 8007be2:	f002 f8bb 	bl	8009d5c <memset>
  }
  pHandle->SensorIsReliable = true;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop

08007bf0 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8007bf0:	69c2      	ldr	r2, [r0, #28]
 8007bf2:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	fb03 f302 	mul.w	r3, r3, r2
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8007bfc:	2b00      	cmp	r3, #0
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8007bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
  pHandle->_Super.hMecAngle = mecAngle;
  
  /*Computes and stores the rotor electrical angle*/
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8007c02:	7b42      	ldrb	r2, [r0, #13]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8007c04:	bfb8      	it	lt
 8007c06:	185b      	addlt	r3, r3, r1
 8007c08:	141b      	asrs	r3, r3, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8007c0a:	fb12 f203 	smulbb	r2, r2, r3
 8007c0e:	b212      	sxth	r2, r2
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8007c10:	8043      	strh	r3, [r0, #2]

  pHandle->_Super.hElAngle = elAngle;
 8007c12:	8002      	strh	r2, [r0, #0]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 8007c14:	4610      	mov	r0, r2
 8007c16:	4770      	bx	lr

08007c18 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8007c18:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007c1a:	69c2      	ldr	r2, [r0, #28]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8007c1c:	f890 7071 	ldrb.w	r7, [r0, #113]	; 0x71
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007c20:	68d3      	ldr	r3, [r2, #12]
 8007c22:	f023 0301 	bic.w	r3, r3, #1
 8007c26:	60d3      	str	r3, [r2, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007c28:	6a54      	ldr	r4, [r2, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
 8007c2a:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
  pHandle->TimerOverflowNb = 0;
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 8007c2e:	ea5f 7cd4 	movs.w	ip, r4, lsr #31
  pHandle->TimerOverflowNb = 0;
 8007c32:	f04f 0600 	mov.w	r6, #0
 8007c36:	f8a0 606c 	strh.w	r6, [r0, #108]	; 0x6c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c3a:	bf18      	it	ne
 8007c3c:	f06f 0601 	mvnne.w	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007c40:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c42:	bf18      	it	ne
 8007c44:	6116      	strne	r6, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007c46:	68d6      	ldr	r6, [r2, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 8007c48:	b2ad      	uxth	r5, r5
 8007c4a:	f046 0601 	orr.w	r6, r6, #1
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 8007c4e:	4465      	add	r5, ip
 8007c50:	60d6      	str	r6, [r2, #12]
 8007c52:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007c56:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8007c5a:	f8b0 c06a 	ldrh.w	ip, [r0, #106]	; 0x6a
 8007c5e:	bf98      	it	ls
 8007c60:	f890 6075 	ldrbls.w	r6, [r0, #117]	; 0x75
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8007c64:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  {
    pHandle->TimerOverflowError = true;
 8007c68:	bf88      	it	hi
 8007c6a:	2601      	movhi	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	bf88      	it	hi
 8007c72:	f880 6075 	strbhi.w	r6, [r0, #117]	; 0x75
 8007c76:	1aa2      	subs	r2, r4, r2
 8007c78:	fb0c f505 	mul.w	r5, ip, r5
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8087 	beq.w	8007d90 <ENC_CalcAvrgMecSpeedUnit+0x178>
    /* encoder timer down-counting*/
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007c82:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8007c86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8007c8a:	1b52      	subs	r2, r2, r5
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007c8e:	2f00      	cmp	r7, #0
 8007c90:	f000 8087 	beq.w	8007da2 <ENC_CalcAvrgMecSpeedUnit+0x18a>
 8007c94:	2f01      	cmp	r7, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007c96:	6a43      	ldr	r3, [r0, #36]	; 0x24
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007c98:	d939      	bls.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007c9a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007c9c:	2f02      	cmp	r7, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007c9e:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ca0:	d035      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ca2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ca4:	2f03      	cmp	r7, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ca6:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ca8:	d031      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007caa:	6b02      	ldr	r2, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cac:	2f04      	cmp	r7, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cae:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cb0:	d02d      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cb2:	6b42      	ldr	r2, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cb4:	2f05      	cmp	r7, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cb6:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cb8:	d029      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cba:	6b82      	ldr	r2, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cbc:	2f06      	cmp	r7, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cbe:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cc0:	d025      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cc2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cc4:	2f07      	cmp	r7, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cc6:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cc8:	d021      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cca:	6c02      	ldr	r2, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ccc:	2f08      	cmp	r7, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cce:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cd0:	d01d      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cd4:	2f09      	cmp	r7, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cd6:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cd8:	d019      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cda:	6c82      	ldr	r2, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cdc:	2f0a      	cmp	r7, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cde:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ce0:	d015      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ce2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ce4:	2f0b      	cmp	r7, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007ce6:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007ce8:	d011      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cea:	6d02      	ldr	r2, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cec:	2f0c      	cmp	r7, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cee:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cf0:	d00d      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cf2:	6d42      	ldr	r2, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cf4:	2f0d      	cmp	r7, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cf6:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cf8:	d009      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cfa:	6d82      	ldr	r2, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007cfc:	2f0e      	cmp	r7, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007cfe:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007d00:	d005      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007d02:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007d04:	2f0f      	cmp	r7, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007d06:	4413      	add	r3, r2
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007d08:	d001      	beq.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007d0a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007d0c:	4413      	add	r3, r2
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8007d0e:	6a02      	ldr	r2, [r0, #32]
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8007d10:	fb0c f707 	mul.w	r7, ip, r7
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8007d18:	fb93 f3f7 	sdiv	r3, r3, r7
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8007d1c:	b21f      	sxth	r7, r3
 8007d1e:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007d20:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 8007d24:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007d28:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8007d2c:	8087      	strh	r7, [r0, #4]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007d2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  pHandle->DeltaCapturesIndex++;
 8007d32:	3501      	adds	r5, #1
 8007d34:	b2ed      	uxtb	r5, r5
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007d36:	6a57      	ldr	r7, [r2, #36]	; 0x24
  pHandle->DeltaCapturesIndex++;
 8007d38:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8007d3c:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
  pHandle->PreviousCapture = CntCapture;
 8007d40:	f8a0 406e 	strh.w	r4, [r0, #110]	; 0x6e
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007d44:	eba3 030c 	sub.w	r3, r3, ip
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007d48:	fb07 f505 	mul.w	r5, r7, r5

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8007d4c:	f890 c071 	ldrb.w	ip, [r0, #113]	; 0x71
 8007d50:	f890 7074 	ldrb.w	r7, [r0, #116]	; 0x74
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8007d54:	7b44      	ldrb	r4, [r0, #13]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007d56:	6982      	ldr	r2, [r0, #24]
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8007d58:	8143      	strh	r3, [r0, #10]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8007d5a:	45bc      	cmp	ip, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007d5c:	fb04 f305 	mul.w	r3, r4, r5
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8007d60:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 8007d64:	fb93 f3f4 	sdiv	r3, r3, r4
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007d68:	fb02 f203 	mul.w	r2, r2, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8007d6c:	8ac3      	ldrh	r3, [r0, #22]
 8007d6e:	fb92 f2f3 	sdiv	r2, r2, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 8007d72:	bf08      	it	eq
 8007d74:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8007d76:	80c2      	strh	r2, [r0, #6]
    pHandle->DeltaCapturesIndex = 0u;
 8007d78:	bf08      	it	eq
 8007d7a:	f880 3074 	strbeq.w	r3, [r0, #116]	; 0x74
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8007d7e:	b196      	cbz	r6, 8007da6 <ENC_CalcAvrgMecSpeedUnit+0x18e>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007d80:	7c82      	ldrb	r2, [r0, #18]
 8007d82:	7302      	strb	r2, [r0, #12]
    pHandle->SensorIsReliable = false;
 8007d84:	2300      	movs	r3, #0
 8007d86:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8007d8a:	bcf0      	pop	{r4, r5, r6, r7}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	4770      	bx	lr
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007d90:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8007d94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007d98:	442a      	add	r2, r5
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007d9a:	625a      	str	r2, [r3, #36]	; 0x24
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	f47f af79 	bne.w	8007c94 <ENC_CalcAvrgMecSpeedUnit+0x7c>
  int32_t wOverallAngleVariation = 0;
 8007da2:	463b      	mov	r3, r7
 8007da4:	e7b3      	b.n	8007d0e <ENC_CalcAvrgMecSpeedUnit+0xf6>
}
 8007da6:	bcf0      	pop	{r4, r5, r6, r7}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8007da8:	f001 bc32 	b.w	8009610 <SPD_IsMecSpeedReliable>

08007dac <ENC_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle (s16degrees)
  * @retval none
  */
__weak void ENC_SetMecAngle( ENCODER_Handle_t * pHandle, int16_t hMecAngle )
{
 8007dac:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  if ( hMecAngle < 0 )
 8007dae:	2900      	cmp	r1, #0
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007db0:	69c2      	ldr	r2, [r0, #28]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007db2:	f8b0 006a 	ldrh.w	r0, [r0, #106]	; 0x6a
 8007db6:	4906      	ldr	r1, [pc, #24]	; (8007dd0 <ENC_SetMecAngle+0x24>)
 8007db8:	bfbc      	itt	lt
 8007dba:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007dbe:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8007dc0:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007dc4:	fba1 1303 	umull	r1, r3, r1, r3
 8007dc8:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8007dca:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	80008001 	.word	0x80008001

08007dd4 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8007dd4:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8007dd6:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8007dd8:	f8b2 306c 	ldrh.w	r3, [r2, #108]	; 0x6c
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
}
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop

08007de8 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	8243      	strh	r3, [r0, #18]
 8007dec:	8283      	strh	r3, [r0, #20]

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8007dee:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8007df2:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8007df6:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007dfa:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 8007dfe:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8007e02:	4770      	bx	lr

08007e04 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8007e04:	b120      	cbz	r0, 8007e10 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8007e06:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8007e0a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8007e0c:	9b00      	ldr	r3, [sp, #0]
 8007e0e:	60c3      	str	r3, [r0, #12]
  }
}
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop

08007e14 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8007e14:	b190      	cbz	r0, 8007e3c <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8007e16:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8007e18:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8007e1a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007e1c:	b151      	cbz	r1, 8007e34 <FCP_CalcCRC+0x20>
 8007e1e:	1e4a      	subs	r2, r1, #1
 8007e20:	1c81      	adds	r1, r0, #2
 8007e22:	fa51 f282 	uxtab	r2, r1, r2
 8007e26:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8007e28:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8007e2c:	440b      	add	r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007e2e:	4282      	cmp	r2, r0
      nSum += pFrame->Buffer[idx];
 8007e30:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007e32:	d1f9      	bne.n	8007e28 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8007e34:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8007e38:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  }

  return nCRC ;
}
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop

08007e40 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8007e40:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8007e42:	2400      	movs	r4, #0
 8007e44:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8007e46:	f8c0 400e 	str.w	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8007e4a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8007e4c:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8007e4e:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8007e52:	6083      	str	r3, [r0, #8]
}
 8007e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8007e5c:	2301      	movs	r3, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 8007e5e:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8007e60:	82c2      	strh	r2, [r0, #22]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8007e62:	7303      	strb	r3, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8007e64:	7603      	strb	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8007e66:	7643      	strb	r3, [r0, #25]
}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop

08007e6c <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8007e6c:	b430      	push	{r4, r5}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8007e6e:	2300      	movs	r3, #0
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8007e70:	2502      	movs	r5, #2
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8007e72:	2401      	movs	r4, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8007e74:	7305      	strb	r5, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8007e76:	7604      	strb	r4, [r0, #24]
  pHandle->hFinalTorque = hFinalTorque;
 8007e78:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8007e7a:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8007e7c:	7643      	strb	r3, [r0, #25]
}
 8007e7e:	bc30      	pop	{r4, r5}
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop

08007e84 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8007e84:	b410      	push	{r4}
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8007e86:	2201      	movs	r2, #1
{
 8007e88:	b083      	sub	sp, #12
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8007e8a:	2403      	movs	r4, #3
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8007e8c:	2300      	movs	r3, #0
  pHandle->Iqdref.q = Iqdref.q;
 8007e8e:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8007e92:	7304      	strb	r4, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8007e94:	7602      	strb	r2, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8007e96:	7643      	strb	r3, [r0, #25]
}
 8007e98:	b003      	add	sp, #12
 8007e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8007ea0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8007ea2:	2103      	movs	r1, #3
{
 8007ea4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	f001 fce0 	bl	800986c <STM_NextState>

  if ( RetVal == true )
 8007eac:	b108      	cbz	r0, 8007eb2 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8007eb2:	bd10      	pop	{r4, pc}

08007eb4 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8007eb4:	6800      	ldr	r0, [r0, #0]
 8007eb6:	2107      	movs	r1, #7
 8007eb8:	f001 bcd8 	b.w	800986c <STM_NextState>

08007ebc <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8007ebc:	6800      	ldr	r0, [r0, #0]
 8007ebe:	f001 bd4b 	b.w	8009958 <STM_FaultAcknowledged>
 8007ec2:	bf00      	nop

08007ec4 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8007ec4:	6800      	ldr	r0, [r0, #0]
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	f001 bcd0 	b.w	800986c <STM_NextState>

08007ecc <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8007ecc:	b110      	cbz	r0, 8007ed4 <MCI_ExecBufferedCommands+0x8>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8007ece:	7e03      	ldrb	r3, [r0, #24]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d000      	beq.n	8007ed6 <MCI_ExecBufferedCommands+0xa>
 8007ed4:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch ( pHandle->lastCommand )
 8007ed6:	7b01      	ldrb	r1, [r0, #12]
 8007ed8:	2902      	cmp	r1, #2
{
 8007eda:	b510      	push	{r4, lr}
 8007edc:	4604      	mov	r4, r0
      switch ( pHandle->lastCommand )
 8007ede:	d01f      	beq.n	8007f20 <MCI_ExecBufferedCommands+0x54>
 8007ee0:	2903      	cmp	r1, #3
 8007ee2:	d004      	beq.n	8007eee <MCI_ExecBufferedCommands+0x22>
 8007ee4:	2901      	cmp	r1, #1
 8007ee6:	d00b      	beq.n	8007f00 <MCI_ExecBufferedCommands+0x34>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	7623      	strb	r3, [r4, #24]
      }
    }
  }
}
 8007eec:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8007eee:	6882      	ldr	r2, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8007ef0:	f8d0 1012 	ldr.w	r1, [r0, #18]
 8007ef4:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8007ef6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8007efa:	2302      	movs	r3, #2
 8007efc:	7623      	strb	r3, [r4, #24]
}
 8007efe:	bd10      	pop	{r4, pc}
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8007f00:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8007f0a:	f001 fbeb 	bl	80096e4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8007f0e:	8ae2      	ldrh	r2, [r4, #22]
 8007f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f14:	6860      	ldr	r0, [r4, #4]
 8007f16:	f001 fbe9 	bl	80096ec <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0e4      	beq.n	8007ee8 <MCI_ExecBufferedCommands+0x1c>
 8007f1e:	e7ec      	b.n	8007efa <MCI_ExecBufferedCommands+0x2e>
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8007f20:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8007f24:	2100      	movs	r1, #0
 8007f26:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8007f2a:	f001 fbdb 	bl	80096e4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8007f2e:	8ae2      	ldrh	r2, [r4, #22]
 8007f30:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8007f34:	6860      	ldr	r0, [r4, #4]
 8007f36:	f001 fbd9 	bl	80096ec <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d0d4      	beq.n	8007ee8 <MCI_ExecBufferedCommands+0x1c>
 8007f3e:	e7dc      	b.n	8007efa <MCI_ExecBufferedCommands+0x2e>

08007f40 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8007f40:	6800      	ldr	r0, [r0, #0]
 8007f42:	f001 bd07 	b.w	8009954 <STM_GetState>
 8007f46:	bf00      	nop

08007f48 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8007f48:	7e40      	ldrb	r0, [r0, #25]
 8007f4a:	4770      	bx	lr

08007f4c <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8007f4c:	7b03      	ldrb	r3, [r0, #12]
 8007f4e:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8007f50:	bf0c      	ite	eq
 8007f52:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8007f56:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop

08007f5c <MCI_StopSpeedRamp>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is executed, false otherwise.
  */
__weak bool MCI_StopSpeedRamp( MCI_Handle_t * pHandle )
{
  return STC_StopSpeedRamp( pHandle->pSTC );
 8007f5c:	6840      	ldr	r0, [r0, #4]
 8007f5e:	f001 bc49 	b.w	80097f4 <STC_StopSpeedRamp>
 8007f62:	bf00      	nop

08007f64 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8007f64:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8007f66:	6840      	ldr	r0, [r0, #4]
 8007f68:	f001 fba2 	bl	80096b0 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8007f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8007f70:	f001 bb46 	b.w	8009600 <SPD_GetAvrgMecSpeedUnit>

08007f74 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *         
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8007f74:	6840      	ldr	r0, [r0, #4]
 8007f76:	f001 bba5 	b.w	80096c4 <STC_GetMecSpeedRefUnit>
 8007f7a:	bf00      	nop

08007f7c <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8007f7c:	6883      	ldr	r3, [r0, #8]
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	b283      	uxth	r3, r0
{
 8007f82:	b082      	sub	sp, #8
}
 8007f84:	f363 000f 	bfi	r0, r3, #0, #16
 8007f88:	b002      	add	sp, #8
 8007f8a:	4770      	bx	lr

08007f8c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8007f8c:	6883      	ldr	r3, [r0, #8]
 8007f8e:	6858      	ldr	r0, [r3, #4]
 8007f90:	b283      	uxth	r3, r0
{
 8007f92:	b082      	sub	sp, #8
}
 8007f94:	f363 000f 	bfi	r0, r3, #0, #16
 8007f98:	b002      	add	sp, #8
 8007f9a:	4770      	bx	lr

08007f9c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8007f9c:	6883      	ldr	r3, [r0, #8]
 8007f9e:	68d8      	ldr	r0, [r3, #12]
 8007fa0:	b283      	uxth	r3, r0
{
 8007fa2:	b082      	sub	sp, #8
}
 8007fa4:	f363 000f 	bfi	r0, r3, #0, #16
 8007fa8:	b002      	add	sp, #8
 8007faa:	4770      	bx	lr

08007fac <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8007fac:	6883      	ldr	r3, [r0, #8]
 8007fae:	6918      	ldr	r0, [r3, #16]
 8007fb0:	b283      	uxth	r3, r0
{
 8007fb2:	b082      	sub	sp, #8
}
 8007fb4:	f363 000f 	bfi	r0, r3, #0, #16
 8007fb8:	b002      	add	sp, #8
 8007fba:	4770      	bx	lr

08007fbc <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8007fbc:	6883      	ldr	r3, [r0, #8]
 8007fbe:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8007fc2:	b283      	uxth	r3, r0
{
 8007fc4:	b082      	sub	sp, #8
}
 8007fc6:	f363 000f 	bfi	r0, r3, #0, #16
 8007fca:	b002      	add	sp, #8
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop

08007fd0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8007fd0:	6883      	ldr	r3, [r0, #8]
 8007fd2:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8007fd6:	b283      	uxth	r3, r0
{
 8007fd8:	b082      	sub	sp, #8
}
 8007fda:	f363 000f 	bfi	r0, r3, #0, #16
 8007fde:	b002      	add	sp, #8
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop

08007fe4 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8007fe4:	6883      	ldr	r3, [r0, #8]
}
 8007fe6:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8007fea:	4770      	bx	lr

08007fec <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8007fec:	6883      	ldr	r3, [r0, #8]
 8007fee:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8007ff0:	8299      	strh	r1, [r3, #20]
}
 8007ff2:	4770      	bx	lr

08007ff4 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8007ff4:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8007ff6:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8007ffa:	f001 fc03 	bl	8009804 <STC_GetDefaultIqdref>
 8007ffe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8008002:	8220      	strh	r0, [r4, #16]
 8008004:	8263      	strh	r3, [r4, #18]
}
 8008006:	bd10      	pop	{r4, pc}

08008008 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8008008:	f644 11e6 	movw	r1, #18918	; 0x49e6
 800800c:	b202      	sxth	r2, r0
 800800e:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8008012:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8008016:	fb13 f301 	smulbb	r3, r3, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800801a:	4240      	negs	r0, r0
 800801c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8008020:	13c0      	asrs	r0, r0, #15
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8008022:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8008026:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8008028:	da04      	bge.n	8008034 <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 800802a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800802e:	da0c      	bge.n	800804a <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <MCM_Clarke+0x48>)
 8008032:	e001      	b.n	8008038 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8008034:	f647 73ff 	movw	r3, #32767	; 0x7fff
  }

  return ( Output );
 8008038:	b292      	uxth	r2, r2
 800803a:	2000      	movs	r0, #0
 800803c:	b29b      	uxth	r3, r3
 800803e:	f362 000f 	bfi	r0, r2, #0, #16
 8008042:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008046:	b004      	add	sp, #16
 8008048:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 800804a:	b203      	sxth	r3, r0
  if ( Output.beta == ( int16_t )( -32768 ) )
 800804c:	d1f4      	bne.n	8008038 <MCM_Clarke+0x30>
 800804e:	e7ef      	b.n	8008030 <MCM_Clarke+0x28>
 8008050:	ffff8001 	.word	0xffff8001

08008054 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8008054:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8008058:	f3c0 1089 	ubfx	r0, r0, #6, #10


  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800805c:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8008060:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8008064:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8008066:	d031      	beq.n	80080cc <MCM_Trig_Functions+0x78>
 8008068:	d921      	bls.n	80080ae <MCM_Trig_Functions+0x5a>
 800806a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800806e:	d015      	beq.n	800809c <MCM_Trig_Functions+0x48>
 8008070:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8008074:	d109      	bne.n	800808a <MCM_Trig_Functions+0x36>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8008076:	b2c0      	uxtb	r0, r0
 8008078:	491a      	ldr	r1, [pc, #104]	; (80080e4 <MCM_Trig_Functions+0x90>)
 800807a:	43c3      	mvns	r3, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800807c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8008080:	b2db      	uxtb	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8008082:	4252      	negs	r2, r2
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8008084:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8008088:	b212      	sxth	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
 800808a:	b292      	uxth	r2, r2
 800808c:	2000      	movs	r0, #0
 800808e:	b29b      	uxth	r3, r3
 8008090:	f362 000f 	bfi	r0, r2, #0, #16
 8008094:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008098:	b002      	add	sp, #8
 800809a:	4770      	bx	lr
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800809c:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800809e:	43c3      	mvns	r3, r0
 80080a0:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80080a2:	4910      	ldr	r1, [pc, #64]	; (80080e4 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80080a4:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80080a8:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      break;
 80080ac:	e7ed      	b.n	800808a <MCM_Trig_Functions+0x36>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d1eb      	bne.n	800808a <MCM_Trig_Functions+0x36>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80080b2:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80080b4:	43c3      	mvns	r3, r0
 80080b6:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80080b8:	490a      	ldr	r1, [pc, #40]	; (80080e4 <MCM_Trig_Functions+0x90>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80080ba:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80080be:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80080c2:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80080c4:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80080c6:	b212      	sxth	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80080c8:	b21b      	sxth	r3, r3
      break;
 80080ca:	e7de      	b.n	800808a <MCM_Trig_Functions+0x36>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80080cc:	b2c0      	uxtb	r0, r0
 80080ce:	43c3      	mvns	r3, r0
 80080d0:	4a04      	ldr	r2, [pc, #16]	; (80080e4 <MCM_Trig_Functions+0x90>)
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80080d8:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80080dc:	425b      	negs	r3, r3
 80080de:	b21b      	sxth	r3, r3
      break;
 80080e0:	e7d3      	b.n	800808a <MCM_Trig_Functions+0x36>
 80080e2:	bf00      	nop
 80080e4:	0800a008 	.word	0x0800a008

080080e8 <MCM_Park>:
{
 80080e8:	b530      	push	{r4, r5, lr}
 80080ea:	b085      	sub	sp, #20
 80080ec:	b204      	sxth	r4, r0
 80080ee:	9001      	str	r0, [sp, #4]
 80080f0:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80080f2:	4608      	mov	r0, r1
 80080f4:	f7ff ffae 	bl	8008054 <MCM_Trig_Functions>
 80080f8:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 80080fa:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80080fe:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8008100:	fb05 3310 	mls	r3, r5, r0, r3
 8008104:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8008106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800810a:	da04      	bge.n	8008116 <MCM_Park+0x2e>
  else if ( wqd_tmp < ( -32768 ) )
 800810c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008110:	da1e      	bge.n	8008150 <MCM_Park+0x68>
    Output.q = -32767;
 8008112:	4a11      	ldr	r2, [pc, #68]	; (8008158 <MCM_Park+0x70>)
 8008114:	e001      	b.n	800811a <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 8008116:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 800811a:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 800811e:	fb04 1000 	mla	r0, r4, r0, r1
 8008122:	13c0      	asrs	r0, r0, #15
  if ( wqd_tmp > INT16_MAX )
 8008124:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008128:	da04      	bge.n	8008134 <MCM_Park+0x4c>
  else if ( wqd_tmp < ( -32768 ) )
 800812a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800812e:	da0c      	bge.n	800814a <MCM_Park+0x62>
    Output.d = -32767;
 8008130:	4b09      	ldr	r3, [pc, #36]	; (8008158 <MCM_Park+0x70>)
 8008132:	e001      	b.n	8008138 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8008134:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8008138:	b292      	uxth	r2, r2
 800813a:	2000      	movs	r0, #0
 800813c:	b29b      	uxth	r3, r3
 800813e:	f362 000f 	bfi	r0, r2, #0, #16
 8008142:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008146:	b005      	add	sp, #20
 8008148:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800814a:	b203      	sxth	r3, r0
  if ( Output.d == ( int16_t )( -32768 ) )
 800814c:	d1f4      	bne.n	8008138 <MCM_Park+0x50>
 800814e:	e7ef      	b.n	8008130 <MCM_Park+0x48>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8008150:	b21a      	sxth	r2, r3
  if ( Output.q == ( int16_t )( -32768 ) )
 8008152:	d1e2      	bne.n	800811a <MCM_Park+0x32>
 8008154:	e7dd      	b.n	8008112 <MCM_Park+0x2a>
 8008156:	bf00      	nop
 8008158:	ffff8001 	.word	0xffff8001

0800815c <MCM_Rev_Park>:
{
 800815c:	b530      	push	{r4, r5, lr}
 800815e:	b085      	sub	sp, #20
 8008160:	b204      	sxth	r4, r0
 8008162:	1405      	asrs	r5, r0, #16
 8008164:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8008166:	4608      	mov	r0, r1
 8008168:	f7ff ff74 	bl	8008054 <MCM_Trig_Functions>
 800816c:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 800816e:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8008172:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8008174:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8008178:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800817c:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8008180:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8008184:	2000      	movs	r0, #0
 8008186:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800818a:	f362 000f 	bfi	r0, r2, #0, #16
 800818e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008192:	b005      	add	sp, #20
 8008194:	bd30      	pop	{r4, r5, pc}
 8008196:	bf00      	nop

08008198 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8008198:	b508      	push	{r3, lr}
 800819a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800819e:	2100      	movs	r1, #0
 80081a0:	f001 fddc 	bl	8009d5c <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80081aa:	bd08      	pop	{r3, pc}

080081ac <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80081ac:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80081b0:	1c53      	adds	r3, r2, #1
 80081b2:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80081b4:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80081b6:	bf88      	it	hi
 80081b8:	2300      	movhi	r3, #0
{
 80081ba:	b430      	push	{r4, r5}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80081bc:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 80081c0:	f100 05fe 	add.w	r5, r0, #254	; 0xfe
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80081c4:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80081c8:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 80081cc:	2200      	movs	r2, #0
 80081ce:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80081d0:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80081d4:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80081d6:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80081d8:	d1fa      	bne.n	80081d0 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80081da:	2a00      	cmp	r2, #0
 80081dc:	bfb8      	it	lt
 80081de:	327f      	addlt	r2, #127	; 0x7f
 80081e0:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80081e2:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80081e6:	bc30      	pop	{r4, r5}
 80081e8:	4608      	mov	r0, r1
 80081ea:	4770      	bx	lr

080081ec <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 80081ec:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop

080081f4 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80081f4:	8a03      	ldrh	r3, [r0, #16]
 80081f6:	8b42      	ldrh	r2, [r0, #26]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d306      	bcc.n	800820a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80081fc:	8b82      	ldrh	r2, [r0, #28]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d801      	bhi.n	8008206 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
  }
  else
  {
    hFault = pHandle->hFaultState;
 8008202:	8ac0      	ldrh	r0, [r0, #22]
 8008204:	4770      	bx	lr
    hFault = MC_NO_ERROR;
 8008206:	2000      	movs	r0, #0
  }
  return hFault;
}
 8008208:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 800820a:	2008      	movs	r0, #8
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop

08008210 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8008210:	2300      	movs	r3, #0
 8008212:	8203      	strh	r3, [r0, #16]
}
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop

08008218 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008218:	7803      	ldrb	r3, [r0, #0]
 800821a:	b123      	cbz	r3, 8008226 <NTC_Init+0xe>
    pHandle->hFaultState = MC_NO_ERROR;
 800821c:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800821e:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 8008220:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008222:	8203      	strh	r3, [r0, #16]
 8008224:	4770      	bx	lr
{
 8008226:	b510      	push	{r4, lr}
 8008228:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800822a:	3004      	adds	r0, #4
 800822c:	f7f9 fcda 	bl	8001be4 <RCM_RegisterRegConv>
 8008230:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8008234:	4620      	mov	r0, r4
 8008236:	f7ff ffeb 	bl	8008210 <NTC_Clear>
}
 800823a:	bd10      	pop	{r4, pc}

0800823c <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800823c:	7803      	ldrb	r3, [r0, #0]
 800823e:	b11b      	cbz	r3, 8008248 <NTC_CalcAvTemp+0xc>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8008240:	2300      	movs	r3, #0
 8008242:	82c3      	strh	r3, [r0, #22]
 8008244:	4618      	mov	r0, r3
  }

  return ( pHandle->hFaultState );
}
 8008246:	4770      	bx	lr
{
 8008248:	b510      	push	{r4, lr}
 800824a:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800824c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008250:	f7f9 fd88 	bl	8001d64 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8008254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008258:	4298      	cmp	r0, r3
 800825a:	d007      	beq.n	800826c <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800825c:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800825e:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008260:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8008262:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8008266:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800826a:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800826c:	4620      	mov	r0, r4
 800826e:	f7ff ffc1 	bl	80081f4 <NTC_SetFaultState>
 8008272:	82e0      	strh	r0, [r4, #22]
}
 8008274:	bd10      	pop	{r4, pc}
 8008276:	bf00      	nop

08008278 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008278:	7803      	ldrb	r3, [r0, #0]
 800827a:	b113      	cbz	r3, 8008282 <NTC_GetAvTemp_C+0xa>
    wTemp *= pHandle->hSensitivity;
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 800827c:	8a80      	ldrh	r0, [r0, #20]
  }
  return ( ( int16_t )wTemp );
}
 800827e:	b200      	sxth	r0, r0
 8008280:	4770      	bx	lr
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8008282:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008284:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8008286:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800828a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 800828c:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 800828e:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008292:	2b00      	cmp	r3, #0
 8008294:	bfbc      	itt	lt
 8008296:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 800829a:	33ff      	addlt	r3, #255	; 0xff
 800829c:	eb00 4023 	add.w	r0, r0, r3, asr #16
}
 80082a0:	b200      	sxth	r0, r0
 80082a2:	4770      	bx	lr

080082a4 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80082a4:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80082a6:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80082a8:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80082aa:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80082ac:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80082ae:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80082b0:	6283      	str	r3, [r0, #40]	; 0x28
}
 80082b2:	4770      	bx	lr

080082b4 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80082b4:	8081      	strh	r1, [r0, #4]
}
 80082b6:	4770      	bx	lr

080082b8 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 80082b8:	80c1      	strh	r1, [r0, #6]
}
 80082ba:	4770      	bx	lr

080082bc <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 80082bc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop

080082c4 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80082c4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80082cc:	6081      	str	r1, [r0, #8]

  return;
}
 80082ce:	4770      	bx	lr

080082d0 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80082d0:	8b00      	ldrh	r0, [r0, #24]
 80082d2:	4770      	bx	lr

080082d4 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80082d4:	8b40      	ldrh	r0, [r0, #26]
 80082d6:	4770      	bx	lr

080082d8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 80082d8:	8441      	strh	r1, [r0, #34]	; 0x22
}
 80082da:	4770      	bx	lr

080082dc <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80082dc:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80082e4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80082e8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 80082ec:	b4f0      	push	{r4, r5, r6, r7}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80082ee:	fb01 f202 	mul.w	r2, r1, r2
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80082f2:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80082f6:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 80082fa:	b18b      	cbz	r3, 8008320 <PI_Controller+0x3c>
 80082fc:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008300:	fb01 f103 	mul.w	r1, r1, r3
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

    if ( wIntegral_sum_temp < 0 )
 8008304:	187b      	adds	r3, r7, r1
 8008306:	d424      	bmi.n	8008352 <PI_Controller+0x6e>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8008308:	2f00      	cmp	r7, #0
 800830a:	da04      	bge.n	8008316 <PI_Controller+0x32>
      {
        if ( wIntegral_Term < 0 )
        {
          wIntegral_sum_temp = -INT32_MAX;
 800830c:	4f16      	ldr	r7, [pc, #88]	; (8008368 <PI_Controller+0x84>)
 800830e:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8008312:	bf28      	it	cs
 8008314:	463b      	movcs	r3, r7
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008316:	42a3      	cmp	r3, r4
 8008318:	dc03      	bgt.n	8008322 <PI_Controller+0x3e>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800831a:	6904      	ldr	r4, [r0, #16]
 800831c:	429c      	cmp	r4, r3
 800831e:	dc00      	bgt.n	8008322 <PI_Controller+0x3e>
 8008320:	461c      	mov	r4, r3
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8008322:	8b81      	ldrh	r1, [r0, #28]
 8008324:	8bc3      	ldrh	r3, [r0, #30]
 8008326:	410a      	asrs	r2, r1
 8008328:	fa44 f303 	asr.w	r3, r4, r3
 800832c:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800832e:	429d      	cmp	r5, r3
 8008330:	db08      	blt.n	8008344 <PI_Controller+0x60>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
    wOutput_32 = hUpperOutputLimit;
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 8008332:	429e      	cmp	r6, r3
 8008334:	dd02      	ble.n	800833c <PI_Controller+0x58>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 8008336:	1af3      	subs	r3, r6, r3
 8008338:	441c      	add	r4, r3
 800833a:	4633      	mov	r3, r6
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800833c:	6084      	str	r4, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800833e:	b218      	sxth	r0, r3
}
 8008340:	bcf0      	pop	{r4, r5, r6, r7}
 8008342:	4770      	bx	lr
    wDischarge = hUpperOutputLimit - wOutput_32;
 8008344:	1aeb      	subs	r3, r5, r3
 8008346:	441c      	add	r4, r3
 8008348:	462b      	mov	r3, r5
  pHandle->wIntegralTerm += wDischarge;
 800834a:	6084      	str	r4, [r0, #8]
  return ( ( int16_t )( wOutput_32 ) );
 800834c:	b218      	sxth	r0, r3
}
 800834e:	bcf0      	pop	{r4, r5, r6, r7}
 8008350:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8008352:	2f00      	cmp	r7, #0
 8008354:	dddf      	ble.n	8008316 <PI_Controller+0x32>
        if ( wIntegral_Term > 0 )
 8008356:	2900      	cmp	r1, #0
 8008358:	dddd      	ble.n	8008316 <PI_Controller+0x32>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800835a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800835e:	429c      	cmp	r4, r3
 8008360:	d1df      	bne.n	8008322 <PI_Controller+0x3e>
          wIntegral_sum_temp = INT32_MAX;
 8008362:	4623      	mov	r3, r4
 8008364:	e7dc      	b.n	8008320 <PI_Controller+0x3c>
 8008366:	bf00      	nop
 8008368:	80000001 	.word	0x80000001

0800836c <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800836c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
{
 8008370:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8008372:	8b0c      	ldrh	r4, [r1, #24]
 8008374:	89cd      	ldrh	r5, [r1, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008376:	898a      	ldrh	r2, [r1, #12]
 8008378:	8acb      	ldrh	r3, [r1, #22]
{
 800837a:	4606      	mov	r6, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800837c:	fb15 f504 	smulbb	r5, r5, r4
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008380:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8008384:	f8d6 4108 	ldr.w	r4, [r6, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008388:	fb12 5503 	smlabb	r5, r2, r3, r5
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800838c:	f7ff faf8 	bl	8007980 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8008390:	1e2a      	subs	r2, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008392:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <PQD_CalcElMotorPower+0x64>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8008394:	490f      	ldr	r1, [pc, #60]	; (80083d4 <PQD_CalcElMotorPower+0x68>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008396:	fb04 f000 	mul.w	r0, r4, r0
  wAux /= 65536;
 800839a:	bfb8      	it	lt
 800839c:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80083a0:	fb83 4300 	smull	r4, r3, r3, r0
  wAux /= 65536;
 80083a4:	bfb8      	it	lt
 80083a6:	32ff      	addlt	r2, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80083a8:	17c0      	asrs	r0, r0, #31
  wAux /= 65536;
 80083aa:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80083ac:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
  wAux3 = wAux * wAux2;
 80083b0:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 80083b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80083b8:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 80083ba:	fb81 2103 	smull	r2, r1, r1, r3
 80083be:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80083c0:	4630      	mov	r0, r6
 80083c2:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 80083c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80083ca:	f7ff beef 	b.w	80081ac <MPM_CalcElMotorPower>
 80083ce:	bf00      	nop
 80083d0:	1b4e81b5 	.word	0x1b4e81b5
 80083d4:	66666667 	.word	0x66666667

080083d8 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 80083d8:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80083da:	4b18      	ldr	r3, [pc, #96]	; (800843c <startTimers+0x64>)
 80083dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083de:	07d2      	lsls	r2, r2, #31
 80083e0:	b082      	sub	sp, #8
 80083e2:	d415      	bmi.n	8008410 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80083e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083e6:	f042 0201 	orr.w	r2, r2, #1
 80083ea:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80083ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80083ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80083f2:	f002 0201 	and.w	r2, r2, #1
 80083f6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80083f8:	9a01      	ldr	r2, [sp, #4]
 80083fa:	694a      	ldr	r2, [r1, #20]
 80083fc:	f042 0201 	orr.w	r2, r2, #1
 8008400:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008402:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800840a:	b002      	add	sp, #8
 800840c:	bc30      	pop	{r4, r5}
 800840e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8008410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008414:	4c0a      	ldr	r4, [pc, #40]	; (8008440 <startTimers+0x68>)
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	6859      	ldr	r1, [r3, #4]
 800841a:	4d0a      	ldr	r5, [pc, #40]	; (8008444 <startTimers+0x6c>)
 800841c:	4021      	ands	r1, r4
 800841e:	f041 0120 	orr.w	r1, r1, #32
 8008422:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008424:	6958      	ldr	r0, [r3, #20]
 8008426:	f040 0001 	orr.w	r0, r0, #1
 800842a:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800842c:	6859      	ldr	r1, [r3, #4]
 800842e:	402a      	ands	r2, r5
 8008430:	4021      	ands	r1, r4
 8008432:	430a      	orrs	r2, r1
 8008434:	605a      	str	r2, [r3, #4]
}
 8008436:	b002      	add	sp, #8
 8008438:	bc30      	pop	{r4, r5}
 800843a:	4770      	bx	lr
 800843c:	40021000 	.word	0x40021000
 8008440:	fdffff8f 	.word	0xfdffff8f
 8008444:	02000070 	.word	0x02000070

08008448 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8008448:	6843      	ldr	r3, [r0, #4]
 800844a:	4718      	bx	r3

0800844c <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800844c:	b4f0      	push	{r4, r5, r6, r7}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800844e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008452:	8e07      	ldrh	r7, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008454:	140b      	asrs	r3, r1, #16
{
 8008456:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008458:	fb05 f303 	mul.w	r3, r5, r3
{
 800845c:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800845e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008462:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008464:	005b      	lsls	r3, r3, #1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008466:	fb07 f101 	mul.w	r1, r7, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
  wZ = ( wUBeta - wUAlpha ) / 2;
 800846a:	1a5f      	subs	r7, r3, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 800846c:	4419      	add	r1, r3
 800846e:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008472:	eb07 74d7 	add.w	r4, r7, r7, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8008476:	1052      	asrs	r2, r2, #1
 8008478:	ea4f 0695 	mov.w	r6, r5, lsr #2
  wZ = ( wUBeta - wUAlpha ) / 2;
 800847c:	ea4f 0464 	mov.w	r4, r4, asr #1
  if ( wY < 0 )
 8008480:	d46b      	bmi.n	800855a <PWMC_SetPhaseVoltage+0x10e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8008482:	2c00      	cmp	r4, #0
 8008484:	db46      	blt.n	8008514 <PWMC_SetPhaseVoltage+0xc8>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008486:	1b12      	subs	r2, r2, r4
 8008488:	bf44      	itt	mi
 800848a:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 800848e:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008492:	1e3c      	subs	r4, r7, #0
 8008494:	bfbc      	itt	lt
 8008496:	f504 347f 	addlt.w	r4, r4, #261120	; 0x3fc00
 800849a:	f204 34ff 	addwlt	r4, r4, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800849e:	2900      	cmp	r1, #0
 80084a0:	bfb8      	it	lt
 80084a2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80084a6:	eb06 42a2 	add.w	r2, r6, r2, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80084aa:	bfb8      	it	lt
 80084ac:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80084b0:	eb02 44a4 	add.w	r4, r2, r4, asr #18
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
 80084b4:	b295      	uxth	r5, r2
      wTimePhC = wTimePhA - wY / 131072;
 80084b6:	eba2 42a1 	sub.w	r2, r2, r1, asr #18
      pHandle->Sector = SECTOR_2;
 80084ba:	2301      	movs	r3, #1
      pHandle->lowDuty = wTimePhB;
 80084bc:	b2a4      	uxth	r4, r4
      pHandle->highDuty = wTimePhC;
 80084be:	b292      	uxth	r2, r2
      pHandle->Sector = SECTOR_2;
 80084c0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 80084c4:	8784      	strh	r4, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80084c6:	87c5      	strh	r5, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 80084c8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  pHandle->CntPhA = ( uint16_t )wTimePhA;
  pHandle->CntPhB = ( uint16_t )wTimePhB;
  pHandle->CntPhC = ( uint16_t )wTimePhC;

  if ( pHandle->DTTest == 1u )
 80084cc:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
  pHandle->CntPhA = ( uint16_t )wTimePhA;
 80084d0:	8645      	strh	r5, [r0, #50]	; 0x32
  if ( pHandle->DTTest == 1u )
 80084d2:	2b01      	cmp	r3, #1
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 80084d4:	8684      	strh	r4, [r0, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 80084d6:	86c2      	strh	r2, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 80084d8:	d118      	bne.n	800850c <PWMC_SetPhaseVoltage+0xc0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 80084da:	f9b0 3048 	ldrsh.w	r3, [r0, #72]	; 0x48
 80084de:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80084e2:	2b00      	cmp	r3, #0
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 80084e4:	f9b0 304a 	ldrsh.w	r3, [r0, #74]	; 0x4a
      pHandle->CntPhA += pHandle->DTCompCnt;
 80084e8:	bfcc      	ite	gt
 80084ea:	19ed      	addgt	r5, r5, r7
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80084ec:	1bed      	suble	r5, r5, r7
    if ( pHandle->Ib > 0 )
 80084ee:	2b00      	cmp	r3, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80084f0:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 80084f4:	bfcc      	ite	gt
 80084f6:	19e4      	addgt	r4, r4, r7
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80084f8:	1be4      	suble	r4, r4, r7
    if ( pHandle->Ic > 0 )
 80084fa:	2b00      	cmp	r3, #0
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80084fc:	b2ad      	uxth	r5, r5
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80084fe:	b2a4      	uxth	r4, r4
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8008500:	bfcc      	ite	gt
 8008502:	19d2      	addgt	r2, r2, r7
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8008504:	1bd2      	suble	r2, r2, r7
 8008506:	8645      	strh	r5, [r0, #50]	; 0x32
 8008508:	8684      	strh	r4, [r0, #52]	; 0x34
 800850a:	86c2      	strh	r2, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800850c:	6983      	ldr	r3, [r0, #24]
}
 800850e:	b002      	add	sp, #8
 8008510:	bcf0      	pop	{r4, r5, r6, r7}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8008512:	4718      	bx	r3
      if ( wX <= 0 )
 8008514:	2b00      	cmp	r3, #0
 8008516:	dd42      	ble.n	800859e <PWMC_SetPhaseVoltage+0x152>
        wTimePhB = wTimePhA + wZ / 131072;
 8008518:	2f00      	cmp	r7, #0
 800851a:	bfb8      	it	lt
 800851c:	f507 377f 	addlt.w	r7, r7, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008520:	eba3 0404 	sub.w	r4, r3, r4
        wTimePhB = wTimePhA + wZ / 131072;
 8008524:	bfb8      	it	lt
 8008526:	f207 37ff 	addwlt	r7, r7, #1023	; 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 800852a:	2b00      	cmp	r3, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800852c:	eb06 45a4 	add.w	r5, r6, r4, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008530:	bfb8      	it	lt
 8008532:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8008536:	eb05 47a7 	add.w	r7, r5, r7, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800853a:	bfb8      	it	lt
 800853c:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
        pHandle->Sector = SECTOR_1;
 8008540:	2200      	movs	r2, #0
        pHandle->midDuty = wTimePhB;
 8008542:	b2bc      	uxth	r4, r7
        wTimePhC = wTimePhB - wX / 131072;
 8008544:	eba7 4763 	sub.w	r7, r7, r3, asr #17
        pHandle->Sector = SECTOR_1;
 8008548:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        pHandle->lowDuty = wTimePhA;
 800854c:	b2ad      	uxth	r5, r5
        pHandle->highDuty = wTimePhC;
 800854e:	b2ba      	uxth	r2, r7
        pHandle->lowDuty = wTimePhA;
 8008550:	8785      	strh	r5, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8008552:	87c4      	strh	r4, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8008554:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8008558:	e7b8      	b.n	80084cc <PWMC_SetPhaseVoltage+0x80>
    if ( wZ < 0 )
 800855a:	2c00      	cmp	r4, #0
 800855c:	db65      	blt.n	800862a <PWMC_SetPhaseVoltage+0x1de>
      if ( wX <= 0 )
 800855e:	2b00      	cmp	r3, #0
 8008560:	dd3e      	ble.n	80085e0 <PWMC_SetPhaseVoltage+0x194>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008562:	1ad5      	subs	r5, r2, r3
 8008564:	bf44      	itt	mi
 8008566:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800856a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800856e:	2900      	cmp	r1, #0
 8008570:	bfb8      	it	lt
 8008572:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008576:	eb06 45a5 	add.w	r5, r6, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 800857a:	bfb8      	it	lt
 800857c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
 8008580:	eba5 42a1 	sub.w	r2, r5, r1, asr #18
        pHandle->Sector = SECTOR_3;
 8008584:	2402      	movs	r4, #2
 8008586:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 800858a:	eb02 4463 	add.w	r4, r2, r3, asr #17
        pHandle->lowDuty = wTimePhB;
 800858e:	b2a4      	uxth	r4, r4
        pHandle->midDuty = wTimePhC;
 8008590:	b292      	uxth	r2, r2
        pHandle->highDuty = wTimePhA;
 8008592:	b2ad      	uxth	r5, r5
        pHandle->lowDuty = wTimePhB;
 8008594:	8784      	strh	r4, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8008596:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8008598:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800859c:	e796      	b.n	80084cc <PWMC_SetPhaseVoltage+0x80>
        wTimePhC = wTimePhA - wY / 131072;
 800859e:	2900      	cmp	r1, #0
 80085a0:	bfb8      	it	lt
 80085a2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80085a6:	eba2 0503 	sub.w	r5, r2, r3
        wTimePhC = wTimePhA - wY / 131072;
 80085aa:	bfb8      	it	lt
 80085ac:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 80085b0:	1e1c      	subs	r4, r3, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80085b2:	eb06 45a5 	add.w	r5, r6, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80085b6:	bfb8      	it	lt
 80085b8:	f504 34ff 	addlt.w	r4, r4, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80085bc:	eba5 41a1 	sub.w	r1, r5, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80085c0:	bfb8      	it	lt
 80085c2:	f204 14ff 	addwlt	r4, r4, #511	; 0x1ff
        pHandle->Sector = SECTOR_6;
 80085c6:	2205      	movs	r2, #5
        wTimePhB = wTimePhC + wX / 131072;
 80085c8:	eb01 4464 	add.w	r4, r1, r4, asr #17
        pHandle->Sector = SECTOR_6;
 80085cc:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        pHandle->lowDuty = wTimePhA;
 80085d0:	b2ad      	uxth	r5, r5
        pHandle->midDuty = wTimePhC;
 80085d2:	b28a      	uxth	r2, r1
        pHandle->highDuty = wTimePhB;
 80085d4:	b2a4      	uxth	r4, r4
        pHandle->lowDuty = wTimePhA;
 80085d6:	8785      	strh	r5, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80085d8:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 80085da:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80085de:	e775      	b.n	80084cc <PWMC_SetPhaseVoltage+0x80>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80085e0:	1b1c      	subs	r4, r3, r4
 80085e2:	bf44      	itt	mi
 80085e4:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 80085e8:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
 80085ec:	eb06 45a4 	add.w	r5, r6, r4, asr #18
        wTimePhB = wTimePhA + wZ / 131072;
 80085f0:	1e3c      	subs	r4, r7, #0
 80085f2:	bfbc      	itt	lt
 80085f4:	f504 347f 	addlt.w	r4, r4, #261120	; 0x3fc00
 80085f8:	f204 34ff 	addwlt	r4, r4, #1023	; 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfb8      	it	lt
 8008600:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8008604:	eb05 44a4 	add.w	r4, r5, r4, asr #18
        pHandle->Sector = SECTOR_4;
 8008608:	f04f 0203 	mov.w	r2, #3
        wTimePhC = wTimePhB - wX / 131072;
 800860c:	bfb8      	it	lt
 800860e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
        pHandle->Sector = SECTOR_4;
 8008612:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhC = wTimePhB - wX / 131072;
 8008616:	eba4 4263 	sub.w	r2, r4, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800861a:	b292      	uxth	r2, r2
        pHandle->midDuty = wTimePhB;
 800861c:	b2a4      	uxth	r4, r4
        pHandle->highDuty = wTimePhA;
 800861e:	b2ad      	uxth	r5, r5
        pHandle->lowDuty = wTimePhC;
 8008620:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8008622:	87c4      	strh	r4, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8008624:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8008628:	e750      	b.n	80084cc <PWMC_SetPhaseVoltage+0x80>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800862a:	1b14      	subs	r4, r2, r4
 800862c:	bf44      	itt	mi
 800862e:	f504 347f 	addmi.w	r4, r4, #261120	; 0x3fc00
 8008632:	f204 34ff 	addwmi	r4, r4, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8008636:	2900      	cmp	r1, #0
 8008638:	bfbc      	itt	lt
 800863a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800863e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008642:	2f00      	cmp	r7, #0
 8008644:	bfb8      	it	lt
 8008646:	f507 377f 	addlt.w	r7, r7, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800864a:	eb06 44a4 	add.w	r4, r6, r4, asr #18
      wTimePhB = wTimePhA + wZ / 131072;
 800864e:	bfb8      	it	lt
 8008650:	f207 37ff 	addwlt	r7, r7, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8008654:	eba4 42a1 	sub.w	r2, r4, r1, asr #18
      pHandle->midDuty = wTimePhA;
 8008658:	b2a5      	uxth	r5, r4
      wTimePhB = wTimePhA + wZ / 131072;
 800865a:	eb04 44a7 	add.w	r4, r4, r7, asr #18
      pHandle->Sector = SECTOR_5;
 800865e:	2304      	movs	r3, #4
      pHandle->lowDuty = wTimePhC;
 8008660:	b292      	uxth	r2, r2
      pHandle->highDuty = wTimePhB;
 8008662:	b2a4      	uxth	r4, r4
      pHandle->Sector = SECTOR_5;
 8008664:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8008668:	8782      	strh	r2, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800866a:	87c5      	strh	r5, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800866c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8008670:	e72c      	b.n	80084cc <PWMC_SetPhaseVoltage+0x80>
 8008672:	bf00      	nop

08008674 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8008674:	6883      	ldr	r3, [r0, #8]
 8008676:	4718      	bx	r3

08008678 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8008678:	b510      	push	{r4, lr}
 800867a:	4604      	mov	r4, r0
 800867c:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800867e:	b1a1      	cbz	r1, 80086aa <PWMC_CurrentReadingCalibr+0x32>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8008680:	2901      	cmp	r1, #1
 8008682:	d002      	beq.n	800868a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8008684:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8008686:	b002      	add	sp, #8
 8008688:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800868a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800868e:	b1d3      	cbz	r3, 80086c6 <PWMC_CurrentReadingCalibr+0x4e>
      pHandle->OffCalibrWaitTimeCounter--;
 8008690:	3b01      	subs	r3, #1
 8008692:	b29b      	uxth	r3, r3
 8008694:	9101      	str	r1, [sp, #4]
 8008696:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1f2      	bne.n	8008684 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800869e:	6903      	ldr	r3, [r0, #16]
 80086a0:	4798      	blx	r3
        retVal = true;
 80086a2:	9901      	ldr	r1, [sp, #4]
 80086a4:	4608      	mov	r0, r1
}
 80086a6:	b002      	add	sp, #8
 80086a8:	bd10      	pop	{r4, pc}
    PWMC_SwitchOffPWM( pHandle );
 80086aa:	f7ff ffe3 	bl	8008674 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80086ae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80086b2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e4      	bne.n	8008684 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80086ba:	4620      	mov	r0, r4
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	4798      	blx	r3
      retVal = true;
 80086c0:	2001      	movs	r0, #1
}
 80086c2:	b002      	add	sp, #8
 80086c4:	bd10      	pop	{r4, pc}
      retVal = true;
 80086c6:	4608      	mov	r0, r1
}
 80086c8:	b002      	add	sp, #8
 80086ca:	bd10      	pop	{r4, pc}

080086cc <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80086cc:	69c3      	ldr	r3, [r0, #28]
 80086ce:	4718      	bx	r3

080086d0 <R3_2_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80086d0:	b4f0      	push	{r4, r5, r6, r7}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80086d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 80086d4:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80086d8:	689d      	ldr	r5, [r3, #8]
 80086da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80086de:	2c05      	cmp	r4, #5
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80086e2:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80086e4:	6813      	ldr	r3, [r2, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80086e6:	6836      	ldr	r6, [r6, #0]
 80086e8:	686a      	ldr	r2, [r5, #4]
 80086ea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80086ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086f2:	606a      	str	r2, [r5, #4]
 80086f4:	d821      	bhi.n	800873a <R3_2_GetPhaseCurrents+0x6a>
 80086f6:	2501      	movs	r5, #1
 80086f8:	fa05 f404 	lsl.w	r4, r5, r4
 80086fc:	f014 0f21 	tst.w	r4, #33	; 0x21
 8008700:	d12c      	bne.n	800875c <R3_2_GetPhaseCurrents+0x8c>
 8008702:	f014 0f06 	tst.w	r4, #6
 8008706:	d044      	beq.n	8008792 <R3_2_GetPhaseCurrents+0xc2>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8008708:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800870a:	4d53      	ldr	r5, [pc, #332]	; (8008858 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800870c:	1ad4      	subs	r4, r2, r3
      if ( Aux < -INT16_MAX )
 800870e:	42ac      	cmp	r4, r5
 8008710:	da75      	bge.n	80087fe <R3_2_GetPhaseCurrents+0x12e>
 8008712:	462c      	mov	r4, r5
      {
        Iab->a = -INT16_MAX;
 8008714:	800d      	strh	r5, [r1, #0]
 8008716:	462f      	mov	r7, r5
 8008718:	f248 0301 	movw	r3, #32769	; 0x8001
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800871c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800871e:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8008720:	1b12      	subs	r2, r2, r4

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 8008722:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008726:	da74      	bge.n	8008812 <R3_2_GetPhaseCurrents+0x142>
      {
        Iab->b = INT16_MAX;
      }
      else  if ( Aux < -INT16_MAX )
 8008728:	4c4b      	ldr	r4, [pc, #300]	; (8008858 <R3_2_GetPhaseCurrents+0x188>)
 800872a:	42a2      	cmp	r2, r4
 800872c:	db7d      	blt.n	800882a <R3_2_GetPhaseCurrents+0x15a>
      {
        Iab->b = -INT16_MAX;
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 800872e:	fa0f fc82 	sxth.w	ip, r2
 8008732:	f8a1 c002 	strh.w	ip, [r1, #2]
 8008736:	b292      	uxth	r2, r2
 8008738:	e006      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
 800873a:	f9b1 7000 	ldrsh.w	r7, [r1]
 800873e:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8008742:	b2bb      	uxth	r3, r7
 8008744:	fa1f f28c 	uxth.w	r2, ip
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008748:	4413      	add	r3, r2
 800874a:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 800874c:	f8a0 7048 	strh.w	r7, [r0, #72]	; 0x48
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008750:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = Iab->b;
 8008754:	f8a0 c04a 	strh.w	ip, [r0, #74]	; 0x4a
}
 8008758:	bcf0      	pop	{r4, r5, r6, r7}
 800875a:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800875c:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 800875e:	4d3e      	ldr	r5, [pc, #248]	; (8008858 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8008760:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 8008762:	42ac      	cmp	r4, r5
 8008764:	db35      	blt.n	80087d2 <R3_2_GetPhaseCurrents+0x102>
      else  if ( Aux > INT16_MAX )
 8008766:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800876a:	db42      	blt.n	80087f2 <R3_2_GetPhaseCurrents+0x122>
        Iab->b = INT16_MAX;
 800876c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008770:	461a      	mov	r2, r3
 8008772:	804b      	strh	r3, [r1, #2]
 8008774:	461c      	mov	r4, r3
 8008776:	469c      	mov	ip, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8008778:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800877a:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800877c:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 800877e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008782:	da2c      	bge.n	80087de <R3_2_GetPhaseCurrents+0x10e>
      else  if ( Aux < -INT16_MAX )
 8008784:	4f34      	ldr	r7, [pc, #208]	; (8008858 <R3_2_GetPhaseCurrents+0x188>)
 8008786:	42bc      	cmp	r4, r7
 8008788:	da2f      	bge.n	80087ea <R3_2_GetPhaseCurrents+0x11a>
        Iab->a = -INT16_MAX;
 800878a:	800f      	strh	r7, [r1, #0]
 800878c:	f248 0301 	movw	r3, #32769	; 0x8001
 8008790:	e7da      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
 8008792:	f014 0f18 	tst.w	r4, #24
 8008796:	d0d0      	beq.n	800873a <R3_2_GetPhaseCurrents+0x6a>
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8008798:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 800879a:	4a2f      	ldr	r2, [pc, #188]	; (8008858 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800879c:	1ae4      	subs	r4, r4, r3
      if ( Aux < -INT16_MAX )
 800879e:	4294      	cmp	r4, r2
 80087a0:	db41      	blt.n	8008826 <R3_2_GetPhaseCurrents+0x156>
      else  if ( Aux > INT16_MAX )
 80087a2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
        Iab->a = INT16_MAX;
 80087a6:	bfa6      	itte	ge
 80087a8:	f647 73ff 	movwge	r3, #32767	; 0x7fff
 80087ac:	800b      	strhge	r3, [r1, #0]
        Iab->a = ( int16_t )Aux;
 80087ae:	800c      	strhlt	r4, [r1, #0]
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80087b0:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 80087b2:	4b29      	ldr	r3, [pc, #164]	; (8008858 <R3_2_GetPhaseCurrents+0x188>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80087b4:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 80087b6:	429a      	cmp	r2, r3
 80087b8:	db3c      	blt.n	8008834 <R3_2_GetPhaseCurrents+0x164>
      else  if ( Aux > INT16_MAX )
 80087ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80087be:	db41      	blt.n	8008844 <R3_2_GetPhaseCurrents+0x174>
 80087c0:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = INT16_MAX;
 80087c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80087c8:	804b      	strh	r3, [r1, #2]
 80087ca:	461a      	mov	r2, r3
 80087cc:	469c      	mov	ip, r3
 80087ce:	b2bb      	uxth	r3, r7
 80087d0:	e7ba      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
 80087d2:	462c      	mov	r4, r5
        Iab->b = -INT16_MAX;
 80087d4:	804d      	strh	r5, [r1, #2]
 80087d6:	46ac      	mov	ip, r5
 80087d8:	f248 0201 	movw	r2, #32769	; 0x8001
 80087dc:	e7cc      	b.n	8008778 <R3_2_GetPhaseCurrents+0xa8>
        Iab->a = INT16_MAX;
 80087de:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80087e2:	4623      	mov	r3, r4
 80087e4:	800c      	strh	r4, [r1, #0]
 80087e6:	4627      	mov	r7, r4
 80087e8:	e7ae      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 80087ea:	b227      	sxth	r7, r4
 80087ec:	800f      	strh	r7, [r1, #0]
 80087ee:	b2a3      	uxth	r3, r4
 80087f0:	e7aa      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
        Iab->b = ( int16_t )Aux;
 80087f2:	fa0f fc84 	sxth.w	ip, r4
 80087f6:	f8a1 c002 	strh.w	ip, [r1, #2]
 80087fa:	b2a2      	uxth	r2, r4
 80087fc:	e7bc      	b.n	8008778 <R3_2_GetPhaseCurrents+0xa8>
      else  if ( Aux > INT16_MAX )
 80087fe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008802:	db0c      	blt.n	800881e <R3_2_GetPhaseCurrents+0x14e>
        Iab->a = INT16_MAX;
 8008804:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008808:	4613      	mov	r3, r2
 800880a:	800a      	strh	r2, [r1, #0]
 800880c:	4614      	mov	r4, r2
 800880e:	4617      	mov	r7, r2
 8008810:	e784      	b.n	800871c <R3_2_GetPhaseCurrents+0x4c>
        Iab->b = INT16_MAX;
 8008812:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8008816:	4622      	mov	r2, r4
 8008818:	804c      	strh	r4, [r1, #2]
 800881a:	46a4      	mov	ip, r4
 800881c:	e794      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
        Iab->a = ( int16_t )Aux;
 800881e:	b227      	sxth	r7, r4
 8008820:	800f      	strh	r7, [r1, #0]
 8008822:	b2a3      	uxth	r3, r4
 8008824:	e77a      	b.n	800871c <R3_2_GetPhaseCurrents+0x4c>
        Iab->a = -INT16_MAX;
 8008826:	800a      	strh	r2, [r1, #0]
 8008828:	e7c2      	b.n	80087b0 <R3_2_GetPhaseCurrents+0xe0>
        Iab->b = -INT16_MAX;
 800882a:	804c      	strh	r4, [r1, #2]
 800882c:	46a4      	mov	ip, r4
 800882e:	f248 0201 	movw	r2, #32769	; 0x8001
 8008832:	e789      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
 8008834:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = -INT16_MAX;
 8008838:	804b      	strh	r3, [r1, #2]
 800883a:	469c      	mov	ip, r3
 800883c:	f248 0201 	movw	r2, #32769	; 0x8001
 8008840:	b2bb      	uxth	r3, r7
 8008842:	e781      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
 8008844:	f9b1 7000 	ldrsh.w	r7, [r1]
        Iab->b = ( int16_t )Aux;
 8008848:	fa0f fc82 	sxth.w	ip, r2
 800884c:	b2bb      	uxth	r3, r7
 800884e:	f8a1 c002 	strh.w	ip, [r1, #2]
 8008852:	b292      	uxth	r2, r2
 8008854:	e778      	b.n	8008748 <R3_2_GetPhaseCurrents+0x78>
 8008856:	bf00      	nop
 8008858:	ffff8001 	.word	0xffff8001

0800885c <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800885c:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800885e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8008860:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8008864:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008868:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800886c:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800886e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008870:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008872:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8008874:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8008876:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008878:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800887a:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800887c:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800887e:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008880:	4904      	ldr	r1, [pc, #16]	; (8008894 <R3_2_SetADCSampPointPolarization+0x38>)
 8008882:	685b      	ldr	r3, [r3, #4]
}
 8008884:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008888:	420b      	tst	r3, r1
}
 800888a:	bf14      	ite	ne
 800888c:	2001      	movne	r0, #1
 800888e:	2000      	moveq	r0, #0
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	02000070 	.word	0x02000070

08008898 <R3_2_SetADCSampPointSectX>:
{
 8008898:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800889a:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 800889e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80088a0:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80088a2:	1aca      	subs	r2, r1, r3
 80088a4:	f8b4 6092 	ldrh.w	r6, [r4, #146]	; 0x92
 80088a8:	b292      	uxth	r2, r2
 80088aa:	42b2      	cmp	r2, r6
 80088ac:	d914      	bls.n	80088d8 <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80088ae:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 80088b0:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80088b2:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 80088b4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80088b8:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 80088ba:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 80088bc:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 80088be:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 80088c0:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80088c2:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80088c4:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80088c6:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80088c8:	6852      	ldr	r2, [r2, #4]
 80088ca:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <R3_2_SetADCSampPointSectX+0x70>)
 80088cc:	421a      	tst	r2, r3
}
 80088ce:	bf14      	ite	ne
 80088d0:	2001      	movne	r0, #1
 80088d2:	2000      	moveq	r0, #0
 80088d4:	bc70      	pop	{r4, r5, r6}
 80088d6:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 80088d8:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 80088da:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 80088dc:	b2ad      	uxth	r5, r5
 80088de:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 80088e2:	d904      	bls.n	80088ee <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 80088e4:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	e7e4      	b.n	80088b8 <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80088ee:	4433      	add	r3, r6
 80088f0:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 80088f2:	4299      	cmp	r1, r3
 80088f4:	d8e0      	bhi.n	80088b8 <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80088f6:	43db      	mvns	r3, r3
 80088f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80088fc:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008900:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8008902:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8008906:	e7d7      	b.n	80088b8 <R3_2_SetADCSampPointSectX+0x20>
 8008908:	02000070 	.word	0x02000070

0800890c <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800890c:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800890e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008910:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8008914:	689a      	ldr	r2, [r3, #8]
 8008916:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800891a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800891c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800891e:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008920:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008922:	6853      	ldr	r3, [r2, #4]
 8008924:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892c:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800892e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8008932:	2b0f      	cmp	r3, #15
 8008934:	d80b      	bhi.n	800894e <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 8008936:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800893a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 800893e:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 8008940:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8008942:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8008944:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 8008952:	bc70      	pop	{r4, r5, r6}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop

08008958 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008958:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800895a:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800895c:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008960:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008962:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008968:	681c      	ldr	r4, [r3, #0]
 800896a:	6853      	ldr	r3, [r2, #4]
 800896c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008974:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8008976:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800897a:	2b0f      	cmp	r3, #15
 800897c:	d808      	bhi.n	8008990 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 800897e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8008982:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8008984:	3301      	adds	r3, #1
 8008986:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8008988:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800898a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800898e:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	600b      	str	r3, [r1, #0]
  Iab->b = 0;
}
 8008994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop

0800899c <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800899c:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 800899e:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80089a0:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80089a2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80089a6:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089a8:	f06f 0001 	mvn.w	r0, #1
 80089ac:	6118      	str	r0, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80089ae:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80089b0:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80089b2:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	07d2      	lsls	r2, r2, #31
 80089b8:	d5fc      	bpl.n	80089b4 <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80089ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80089bc:	f891 009a 	ldrb.w	r0, [r1, #154]	; 0x9a
 80089c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089c4:	2802      	cmp	r0, #2
 80089c6:	645a      	str	r2, [r3, #68]	; 0x44
 80089c8:	d000      	beq.n	80089cc <R3_2_TurnOnLowSides+0x30>
 80089ca:	4770      	bx	lr
{
 80089cc:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80089ce:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80089d2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80089d4:	f8b1 608c 	ldrh.w	r6, [r1, #140]	; 0x8c
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80089d8:	f8b1 408e 	ldrh.w	r4, [r1, #142]	; 0x8e
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80089dc:	f8b1 2090 	ldrh.w	r2, [r1, #144]	; 0x90
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80089e0:	61ae      	str	r6, [r5, #24]
 80089e2:	6184      	str	r4, [r0, #24]
 80089e4:	619a      	str	r2, [r3, #24]
  }
  return;
}
 80089e6:	bc70      	pop	{r4, r5, r6}
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop

080089ec <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80089ec:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80089ee:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80089f2:	688b      	ldr	r3, [r1, #8]
{
 80089f4:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80089f6:	2400      	movs	r4, #0
 80089f8:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80089fc:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089fe:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8008a02:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a04:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008a06:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008a08:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008a0a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a0c:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	07d2      	lsls	r2, r2, #31
 8008a12:	d5fc      	bpl.n	8008a0e <R3_2_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a14:	f06f 0201 	mvn.w	r2, #1
 8008a18:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008a1c:	f891 009a 	ldrb.w	r0, [r1, #154]	; 0x9a
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a24:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008a28:	2802      	cmp	r0, #2
 8008a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a2e:	645a      	str	r2, [r3, #68]	; 0x44
 8008a30:	d008      	beq.n	8008a44 <R3_2_SwitchOnPWM+0x58>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a32:	f06f 0201 	mvn.w	r2, #1
 8008a36:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	f042 0201 	orr.w	r2, r2, #1
 8008a3e:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8008a40:	bcf0      	pop	{r4, r5, r6, r7}
 8008a42:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008a44:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8008a48:	6a0d      	ldr	r5, [r1, #32]
 8008a4a:	f8b1 608c 	ldrh.w	r6, [r1, #140]	; 0x8c
 8008a4e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8008a50:	f8b1 408e 	ldrh.w	r4, [r1, #142]	; 0x8e
 8008a54:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8008a56:	f8b1 1090 	ldrh.w	r1, [r1, #144]	; 0x90
 8008a5a:	f240 5755 	movw	r7, #1365	; 0x555
 8008a5e:	ea1c 0f07 	tst.w	ip, r7
 8008a62:	d103      	bne.n	8008a6c <R3_2_SwitchOnPWM+0x80>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008a64:	62ae      	str	r6, [r5, #40]	; 0x28
 8008a66:	6284      	str	r4, [r0, #40]	; 0x28
 8008a68:	6291      	str	r1, [r2, #40]	; 0x28
 8008a6a:	e7e2      	b.n	8008a32 <R3_2_SwitchOnPWM+0x46>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008a6c:	61ae      	str	r6, [r5, #24]
 8008a6e:	6184      	str	r4, [r0, #24]
 8008a70:	6191      	str	r1, [r2, #24]
 8008a72:	e7de      	b.n	8008a32 <R3_2_SwitchOnPWM+0x46>

08008a74 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008a74:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008a76:	688b      	ldr	r3, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008a78:	68da      	ldr	r2, [r3, #12]
{
 8008a7a:	b430      	push	{r4, r5}
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  if ( pHandle->BrakeActionLock == true )
 8008a7c:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008a80:	2500      	movs	r5, #0
 8008a82:	f022 0201 	bic.w	r2, r2, #1
 8008a86:	60da      	str	r2, [r3, #12]
 8008a88:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ( pHandle->BrakeActionLock == true )
 8008a8c:	b95c      	cbnz	r4, 8008aa6 <R3_2_SwitchOffPWM+0x32>
  {
  }
  else
  {
    TIMx->BDTR &= ~( ( uint32_t )( LL_TIM_OSSI_ENABLE ) );
 8008a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    LL_TIM_DisableAllOutputs( TIMx );

    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008a90:	f891 009a 	ldrb.w	r0, [r1, #154]	; 0x9a
    TIMx->BDTR &= ~( ( uint32_t )( LL_TIM_OSSI_ENABLE ) );
 8008a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a98:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008a9c:	2802      	cmp	r0, #2
 8008a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008aa2:	645a      	str	r2, [r3, #68]	; 0x44
 8008aa4:	d00a      	beq.n	8008abc <R3_2_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008aa6:	f06f 0201 	mvn.w	r2, #1
 8008aaa:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008aac:	691a      	ldr	r2, [r3, #16]
 8008aae:	07d2      	lsls	r2, r2, #31
 8008ab0:	d5fc      	bpl.n	8008aac <R3_2_SwitchOffPWM+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008ab2:	f06f 0201 	mvn.w	r2, #1
 8008ab6:	611a      	str	r2, [r3, #16]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

}
 8008ab8:	bc30      	pop	{r4, r5}
 8008aba:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008abc:	e9d1 4008 	ldrd	r4, r0, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008ac0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008ac2:	f8b1 508c 	ldrh.w	r5, [r1, #140]	; 0x8c
  WRITE_REG(GPIOx->BRR, PinMask);
 8008ac6:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008ac8:	f8b1 408e 	ldrh.w	r4, [r1, #142]	; 0x8e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008acc:	f8b1 1090 	ldrh.w	r1, [r1, #144]	; 0x90
 8008ad0:	6284      	str	r4, [r0, #40]	; 0x28
 8008ad2:	6291      	str	r1, [r2, #40]	; 0x28
 8008ad4:	e7e7      	b.n	8008aa6 <R3_2_SwitchOffPWM+0x32>
 8008ad6:	bf00      	nop

08008ad8 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8008ad8:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ada:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8008adc:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ade:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008ae0:	686a      	ldr	r2, [r5, #4]
 8008ae2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008aea:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8008aec:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8008af0:	4a0d      	ldr	r2, [pc, #52]	; (8008b28 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8008af2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008af6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008af8:	6800      	ldr	r0, [r0, #0]
 8008afa:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 8008afc:	4293      	cmp	r3, r2
 8008afe:	db0e      	blt.n	8008b1e <R3_2_RLGetPhaseCurrents+0x46>
  {
    if ( wAux < INT16_MAX )
 8008b00:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008b04:	4293      	cmp	r3, r2
 8008b06:	dd05      	ble.n	8008b14 <R3_2_RLGetPhaseCurrents+0x3c>
 8008b08:	f647 73ff 	movw	r3, #32767	; 0x7fff
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8008b0c:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 8008b0e:	804b      	strh	r3, [r1, #2]
}
 8008b10:	bc30      	pop	{r4, r5}
 8008b12:	4770      	bx	lr
 8008b14:	b21b      	sxth	r3, r3
  pStator_Currents->a = (int16_t)wAux;
 8008b16:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 8008b18:	804b      	strh	r3, [r1, #2]
}
 8008b1a:	bc30      	pop	{r4, r5}
 8008b1c:	4770      	bx	lr
 8008b1e:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <R3_2_RLGetPhaseCurrents+0x54>)
  pStator_Currents->a = (int16_t)wAux;
 8008b20:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = (int16_t)wAux;
 8008b22:	804b      	strh	r3, [r1, #2]
}
 8008b24:	bc30      	pop	{r4, r5}
 8008b26:	4770      	bx	lr
 8008b28:	ffff8002 	.word	0xffff8002
 8008b2c:	ffff8001 	.word	0xffff8001

08008b30 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b30:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008b32:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b34:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b36:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b3a:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b3c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b3e:	6913      	ldr	r3, [r2, #16]
 8008b40:	07db      	lsls	r3, r3, #31
 8008b42:	d5fc      	bpl.n	8008b3e <R3_2_RLTurnOnLowSides+0xe>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008b44:	6c53      	ldr	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008b46:	f891 009a 	ldrb.w	r0, [r1, #154]	; 0x9a
 8008b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4e:	2802      	cmp	r0, #2
 8008b50:	6453      	str	r3, [r2, #68]	; 0x44
 8008b52:	d000      	beq.n	8008b56 <R3_2_RLTurnOnLowSides+0x26>
 8008b54:	4770      	bx	lr
{
 8008b56:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008b58:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008b5c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008b5e:	f8b1 608c 	ldrh.w	r6, [r1, #140]	; 0x8c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008b62:	f8b1 408e 	ldrh.w	r4, [r1, #142]	; 0x8e
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008b66:	f8b1 2090 	ldrh.w	r2, [r1, #144]	; 0x90
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008b6a:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008b6c:	6284      	str	r4, [r0, #40]	; 0x28
 8008b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 8008b70:	bc70      	pop	{r4, r5, r6}
 8008b72:	4770      	bx	lr

08008b74 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b74:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008b76:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b78:	f06f 0201 	mvn.w	r2, #1
{
 8008b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008b80:	e9d1 5400 	ldrd	r5, r4, [r1]
 8008b84:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b86:	691a      	ldr	r2, [r3, #16]
 8008b88:	07d6      	lsls	r6, r2, #31
 8008b8a:	d5fc      	bpl.n	8008b86 <R3_2_RLSwitchOnPWM+0x12>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8008b8c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b90:	f06f 0701 	mvn.w	r7, #1
 8008b94:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b96:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b98:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b9a:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008b9c:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b9e:	691a      	ldr	r2, [r3, #16]
 8008ba0:	07d2      	lsls	r2, r2, #31
 8008ba2:	d5fc      	bpl.n	8008b9e <R3_2_RLSwitchOnPWM+0x2a>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008ba4:	68da      	ldr	r2, [r3, #12]
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008ba6:	f891 609a 	ldrb.w	r6, [r1, #154]	; 0x9a
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	60da      	str	r2, [r3, #12]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bb6:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008bba:	2e02      	cmp	r6, #2
 8008bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8008bc2:	d117      	bne.n	8008bf4 <R3_2_RLSwitchOnPWM+0x80>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008bc4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8008bc8:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8008bcc:	f8b1 e08c 	ldrh.w	lr, [r1, #140]	; 0x8c
 8008bd0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8008bd2:	f8b1 708e 	ldrh.w	r7, [r1, #142]	; 0x8e
 8008bd6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008bd8:	f8b1 2090 	ldrh.w	r2, [r1, #144]	; 0x90
 8008bdc:	f240 5155 	movw	r1, #1365	; 0x555
 8008be0:	ea18 0f01 	tst.w	r8, r1
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008be4:	bf15      	itete	ne
 8008be6:	f8cc e018 	strne.w	lr, [ip, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008bea:	f8cc e028 	streq.w	lr, [ip, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008bee:	61b7      	strne	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008bf0:	62b7      	streq	r7, [r6, #40]	; 0x28
 8008bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8008bfa:	68aa      	ldr	r2, [r5, #8]
 8008bfc:	4905      	ldr	r1, [pc, #20]	; (8008c14 <R3_2_RLSwitchOnPWM+0xa0>)
 8008bfe:	400a      	ands	r2, r1
 8008c00:	f042 0208 	orr.w	r2, r2, #8
 8008c04:	60aa      	str	r2, [r5, #8]
 8008c06:	68a3      	ldr	r3, [r4, #8]
 8008c08:	400b      	ands	r3, r1
 8008c0a:	f043 0308 	orr.w	r3, r3, #8
 8008c0e:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	7fffffc0 	.word	0x7fffffc0

08008c18 <R3_2_Init>:
{
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008c1c:	6f44      	ldr	r4, [r0, #116]	; 0x74
    if ( TIMx == TIM1 )
 8008c1e:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8008ec4 <R3_2_Init+0x2ac>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8008c22:	6822      	ldr	r2, [r4, #0]
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008c24:	f8d4 900c 	ldr.w	r9, [r4, #12]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c28:	6855      	ldr	r5, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008c2a:	f04f 0b04 	mov.w	fp, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c2e:	f025 0504 	bic.w	r5, r5, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008c32:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008c36:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8008c3a:	e9d4 e706 	ldrd	lr, r7, [r4, #24]
 8008c3e:	6055      	str	r5, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008c40:	f8c2 b000 	str.w	fp, [r2]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008c44:	6855      	ldr	r5, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008c46:	2620      	movs	r6, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008c48:	f025 0520 	bic.w	r5, r5, #32
 8008c4c:	6055      	str	r5, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008c4e:	6016      	str	r6, [r2, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008c50:	684d      	ldr	r5, [r1, #4]
 8008c52:	f025 0504 	bic.w	r5, r5, #4
 8008c56:	604d      	str	r5, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008c58:	f8c1 b000 	str.w	fp, [r1]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008c5c:	684d      	ldr	r5, [r1, #4]
 8008c5e:	f025 0520 	bic.w	r5, r5, #32
 8008c62:	604d      	str	r5, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008c64:	600e      	str	r6, [r1, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008c66:	4e92      	ldr	r6, [pc, #584]	; (8008eb0 <R3_2_Init+0x298>)
 8008c68:	6935      	ldr	r5, [r6, #16]
    if ( TIMx == TIM1 )
 8008c6a:	4553      	cmp	r3, sl
 8008c6c:	bf0c      	ite	eq
 8008c6e:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
 8008c72:	f445 5500 	orrne.w	r5, r5, #8192	; 0x2000
{
 8008c76:	b083      	sub	sp, #12
 8008c78:	6135      	str	r5, [r6, #16]
    if ( OPAMPParams != NULL )
 8008c7a:	f1b9 0f00 	cmp.w	r9, #0
 8008c7e:	d014      	beq.n	8008caa <R3_2_Init+0x92>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8008c80:	f8d9 5000 	ldr.w	r5, [r9]
 8008c84:	b11d      	cbz	r5, 8008c8e <R3_2_Init+0x76>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008c86:	682e      	ldr	r6, [r5, #0]
 8008c88:	f046 0601 	orr.w	r6, r6, #1
 8008c8c:	602e      	str	r6, [r5, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8008c8e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8008c92:	b11d      	cbz	r5, 8008c9c <R3_2_Init+0x84>
 8008c94:	682e      	ldr	r6, [r5, #0]
 8008c96:	f046 0601 	orr.w	r6, r6, #1
 8008c9a:	602e      	str	r6, [r5, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8008c9c:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8008ca0:	b11d      	cbz	r5, 8008caa <R3_2_Init+0x92>
 8008ca2:	682e      	ldr	r6, [r5, #0]
 8008ca4:	f046 0601 	orr.w	r6, r6, #1
 8008ca8:	602e      	str	r6, [r5, #0]
    if ( COMP_OCPAx != NULL )
 8008caa:	f1bc 0f00 	cmp.w	ip, #0
 8008cae:	d01c      	beq.n	8008cea <R3_2_Init+0xd2>
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 8008cb0:	f894 509d 	ldrb.w	r5, [r4, #157]	; 0x9d
 8008cb4:	2d01      	cmp	r5, #1
 8008cb6:	d00c      	beq.n	8008cd2 <R3_2_Init+0xba>
  *         @arg @ref LL_COMP_INPUT_MINUS_IO1
  *         @arg @ref LL_COMP_INPUT_MINUS_IO2
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_INMSEL | COMP_CSR_SCALEN | COMP_CSR_BRGEN));
 8008cb8:	f8dc 5000 	ldr.w	r5, [ip]
 8008cbc:	4e7d      	ldr	r6, [pc, #500]	; (8008eb4 <R3_2_Init+0x29c>)
 8008cbe:	4035      	ands	r5, r6
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8008cc0:	2d50      	cmp	r5, #80	; 0x50
 8008cc2:	f000 816e 	beq.w	8008fa2 <R3_2_Init+0x38a>
 8008cc6:	f8dc 5000 	ldr.w	r5, [ip]
 8008cca:	402e      	ands	r6, r5
        else if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 8008ccc:	2e50      	cmp	r6, #80	; 0x50
 8008cce:	f000 81a0 	beq.w	8009012 <R3_2_Init+0x3fa>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008cd2:	f8dc 5000 	ldr.w	r5, [ip]
 8008cd6:	f045 0501 	orr.w	r5, r5, #1
 8008cda:	f8cc 5000 	str.w	r5, [ip]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008cde:	f8dc 5000 	ldr.w	r5, [ip]
 8008ce2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8008ce6:	f8cc 5000 	str.w	r5, [ip]
    if ( COMP_OCPBx != NULL )
 8008cea:	f1b8 0f00 	cmp.w	r8, #0
 8008cee:	d00b      	beq.n	8008d08 <R3_2_Init+0xf0>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008cf0:	f8d8 5000 	ldr.w	r5, [r8]
 8008cf4:	f045 0501 	orr.w	r5, r5, #1
 8008cf8:	f8c8 5000 	str.w	r5, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008cfc:	f8d8 5000 	ldr.w	r5, [r8]
 8008d00:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8008d04:	f8c8 5000 	str.w	r5, [r8]
    if ( COMP_OCPCx != NULL )
 8008d08:	f1be 0f00 	cmp.w	lr, #0
 8008d0c:	d00b      	beq.n	8008d26 <R3_2_Init+0x10e>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d0e:	f8de 5000 	ldr.w	r5, [lr]
 8008d12:	f045 0501 	orr.w	r5, r5, #1
 8008d16:	f8ce 5000 	str.w	r5, [lr]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d1a:	f8de 5000 	ldr.w	r5, [lr]
 8008d1e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8008d22:	f8ce 5000 	str.w	r5, [lr]
    if ( COMP_OVPx != NULL )
 8008d26:	b1b7      	cbz	r7, 8008d56 <R3_2_Init+0x13e>
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 8008d28:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
 8008d2c:	2d01      	cmp	r5, #1
 8008d2e:	d00a      	beq.n	8008d46 <R3_2_Init+0x12e>
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_INMSEL | COMP_CSR_SCALEN | COMP_CSR_BRGEN));
 8008d30:	683d      	ldr	r5, [r7, #0]
 8008d32:	4e60      	ldr	r6, [pc, #384]	; (8008eb4 <R3_2_Init+0x29c>)
 8008d34:	4035      	ands	r5, r6
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8008d36:	2d50      	cmp	r5, #80	; 0x50
 8008d38:	f000 8117 	beq.w	8008f6a <R3_2_Init+0x352>
 8008d3c:	683d      	ldr	r5, [r7, #0]
 8008d3e:	402e      	ands	r6, r5
        else if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 8008d40:	2e50      	cmp	r6, #80	; 0x50
 8008d42:	f000 814a 	beq.w	8008fda <R3_2_Init+0x3c2>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008d46:	683d      	ldr	r5, [r7, #0]
 8008d48:	f045 0501 	orr.w	r5, r5, #1
 8008d4c:	603d      	str	r5, [r7, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008d4e:	683d      	ldr	r5, [r7, #0]
 8008d50:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8008d54:	603d      	str	r5, [r7, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008d56:	6895      	ldr	r5, [r2, #8]
 8008d58:	07ef      	lsls	r7, r5, #31
 8008d5a:	f140 80b5 	bpl.w	8008ec8 <R3_2_Init+0x2b0>
 8008d5e:	688a      	ldr	r2, [r1, #8]
 8008d60:	07d5      	lsls	r5, r2, #31
 8008d62:	d559      	bpl.n	8008e18 <R3_2_Init+0x200>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	f022 0201 	bic.w	r2, r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008d72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d76:	605a      	str	r2, [r3, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008d78:	699a      	ldr	r2, [r3, #24]
 8008d7a:	f042 0208 	orr.w	r2, r2, #8
 8008d7e:	619a      	str	r2, [r3, #24]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d86:	619a      	str	r2, [r3, #24]
 8008d88:	69da      	ldr	r2, [r3, #28]
 8008d8a:	f042 0208 	orr.w	r2, r2, #8
 8008d8e:	61da      	str	r2, [r3, #28]
 8008d90:	69da      	ldr	r2, [r3, #28]
 8008d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d96:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008d98:	695a      	ldr	r2, [r3, #20]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	615a      	str	r2, [r3, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8008da0:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8008da4:	2a02      	cmp	r2, #2
 8008da6:	d024      	beq.n	8008df2 <R3_2_Init+0x1da>
    if ( pHandle->_Super.Motor == M1 )
 8008da8:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
 8008dac:	b932      	cbnz	r2, 8008dbc <R3_2_Init+0x1a4>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8008dae:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
 8008db2:	2a01      	cmp	r2, #1
 8008db4:	d02b      	beq.n	8008e0e <R3_2_Init+0x1f6>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008db6:	2a03      	cmp	r2, #3
 8008db8:	f000 8147 	beq.w	800904a <R3_2_Init+0x432>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dc0:	611a      	str	r2, [r3, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8008dc2:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8008dc6:	b16a      	cbz	r2, 8008de4 <R3_2_Init+0x1cc>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	05d0      	lsls	r0, r2, #23
 8008dcc:	d50a      	bpl.n	8008de4 <R3_2_Init+0x1cc>
 8008dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008dd2:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8008dd6:	e001      	b.n	8008ddc <R3_2_Init+0x1c4>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8008dd8:	3a01      	subs	r2, #1
 8008dda:	d003      	beq.n	8008de4 <R3_2_Init+0x1cc>
 8008ddc:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008dde:	6919      	ldr	r1, [r3, #16]
 8008de0:	05c9      	lsls	r1, r1, #23
 8008de2:	d4f9      	bmi.n	8008dd8 <R3_2_Init+0x1c0>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dea:	60da      	str	r2, [r3, #12]
}
 8008dec:	b003      	add	sp, #12
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8008df2:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8008df6:	2a01      	cmp	r2, #1
 8008df8:	d109      	bne.n	8008e0e <R3_2_Init+0x1f6>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008dfa:	f894 109b 	ldrb.w	r1, [r4, #155]	; 0x9b
 8008dfe:	2903      	cmp	r1, #3
 8008e00:	d105      	bne.n	8008e0e <R3_2_Init+0x1f6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008e0c:	6319      	str	r1, [r3, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8008e0e:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8008e12:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008e14:	625a      	str	r2, [r3, #36]	; 0x24
 8008e16:	e7d1      	b.n	8008dbc <R3_2_Init+0x1a4>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008e18:	688a      	ldr	r2, [r1, #8]
 8008e1a:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8008e1e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008e22:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008e24:	688a      	ldr	r2, [r1, #8]
 8008e26:	00d2      	lsls	r2, r2, #3
 8008e28:	d417      	bmi.n	8008e5a <R3_2_Init+0x242>
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8008e2a:	4a23      	ldr	r2, [pc, #140]	; (8008eb8 <R3_2_Init+0x2a0>)
  MODIFY_REG(ADCx->CR,
 8008e2c:	688d      	ldr	r5, [r1, #8]
 8008e2e:	6812      	ldr	r2, [r2, #0]
 8008e30:	4e22      	ldr	r6, [pc, #136]	; (8008ebc <R3_2_Init+0x2a4>)
 8008e32:	0992      	lsrs	r2, r2, #6
 8008e34:	f025 4510 	bic.w	r5, r5, #2415919104	; 0x90000000
 8008e38:	fba6 6202 	umull	r6, r2, r6, r2
 8008e3c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008e40:	0992      	lsrs	r2, r2, #6
 8008e42:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8008e46:	608d      	str	r5, [r1, #8]
 8008e48:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0UL)
 8008e4a:	9a01      	ldr	r2, [sp, #4]
 8008e4c:	b12a      	cbz	r2, 8008e5a <R3_2_Init+0x242>
      wait_loop_index--;
 8008e4e:	9a01      	ldr	r2, [sp, #4]
 8008e50:	3a01      	subs	r2, #1
 8008e52:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0UL)
 8008e54:	9a01      	ldr	r2, [sp, #4]
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	d1f9      	bne.n	8008e4e <R3_2_Init+0x236>
  MODIFY_REG(ADCx->CR,
 8008e5a:	688a      	ldr	r2, [r1, #8]
 8008e5c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8008e60:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008e64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008e68:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008e6a:	688a      	ldr	r2, [r1, #8]
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	dbfc      	blt.n	8008e6a <R3_2_Init+0x252>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008e70:	680a      	ldr	r2, [r1, #0]
 8008e72:	07d7      	lsls	r7, r2, #31
 8008e74:	d408      	bmi.n	8008e88 <R3_2_Init+0x270>
  MODIFY_REG(ADCx->CR,
 8008e76:	4d12      	ldr	r5, [pc, #72]	; (8008ec0 <R3_2_Init+0x2a8>)
 8008e78:	688a      	ldr	r2, [r1, #8]
 8008e7a:	402a      	ands	r2, r5
 8008e7c:	f042 0201 	orr.w	r2, r2, #1
 8008e80:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008e82:	680a      	ldr	r2, [r1, #0]
 8008e84:	07d6      	lsls	r6, r2, #31
 8008e86:	d5f7      	bpl.n	8008e78 <R3_2_Init+0x260>
  MODIFY_REG(ADCx->CR,
 8008e88:	688d      	ldr	r5, [r1, #8]
 8008e8a:	4e0d      	ldr	r6, [pc, #52]	; (8008ec0 <R3_2_Init+0x2a8>)
 8008e8c:	4035      	ands	r5, r6
 8008e8e:	f045 0508 	orr.w	r5, r5, #8
 8008e92:	608d      	str	r5, [r1, #8]
  MODIFY_REG(ADCx->CR,
 8008e94:	688a      	ldr	r2, [r1, #8]
 8008e96:	4032      	ands	r2, r6
 8008e98:	f042 0220 	orr.w	r2, r2, #32
 8008e9c:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008e9e:	68ca      	ldr	r2, [r1, #12]
 8008ea0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008ea4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008ea8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008eac:	60ca      	str	r2, [r1, #12]
 8008eae:	e759      	b.n	8008d64 <R3_2_Init+0x14c>
 8008eb0:	e0042000 	.word	0xe0042000
 8008eb4:	00c000f0 	.word	0x00c000f0
 8008eb8:	200005dc 	.word	0x200005dc
 8008ebc:	053e2d63 	.word	0x053e2d63
 8008ec0:	7fffffc0 	.word	0x7fffffc0
 8008ec4:	40012c00 	.word	0x40012c00
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008ec8:	6895      	ldr	r5, [r2, #8]
 8008eca:	f025 4520 	bic.w	r5, r5, #2684354560	; 0xa0000000
 8008ece:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008ed2:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008ed4:	6895      	ldr	r5, [r2, #8]
 8008ed6:	00ee      	lsls	r6, r5, #3
 8008ed8:	d417      	bmi.n	8008f0a <R3_2_Init+0x2f2>
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8008eda:	4d60      	ldr	r5, [pc, #384]	; (800905c <R3_2_Init+0x444>)
  MODIFY_REG(ADCx->CR,
 8008edc:	6896      	ldr	r6, [r2, #8]
 8008ede:	682d      	ldr	r5, [r5, #0]
 8008ee0:	4f5f      	ldr	r7, [pc, #380]	; (8009060 <R3_2_Init+0x448>)
 8008ee2:	09ad      	lsrs	r5, r5, #6
 8008ee4:	f026 4610 	bic.w	r6, r6, #2415919104	; 0x90000000
 8008ee8:	fba7 7505 	umull	r7, r5, r7, r5
 8008eec:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8008ef0:	09ad      	lsrs	r5, r5, #6
 8008ef2:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
 8008ef6:	6096      	str	r6, [r2, #8]
 8008ef8:	9500      	str	r5, [sp, #0]
    while(wait_loop_index != 0UL)
 8008efa:	9d00      	ldr	r5, [sp, #0]
 8008efc:	b12d      	cbz	r5, 8008f0a <R3_2_Init+0x2f2>
      wait_loop_index--;
 8008efe:	9d00      	ldr	r5, [sp, #0]
 8008f00:	3d01      	subs	r5, #1
 8008f02:	9500      	str	r5, [sp, #0]
    while(wait_loop_index != 0UL)
 8008f04:	9d00      	ldr	r5, [sp, #0]
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	d1f9      	bne.n	8008efe <R3_2_Init+0x2e6>
  MODIFY_REG(ADCx->CR,
 8008f0a:	6895      	ldr	r5, [r2, #8]
 8008f0c:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
 8008f10:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008f14:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8008f18:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008f1a:	6895      	ldr	r5, [r2, #8]
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	dbfc      	blt.n	8008f1a <R3_2_Init+0x302>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008f20:	6815      	ldr	r5, [r2, #0]
 8008f22:	07ed      	lsls	r5, r5, #31
 8008f24:	d408      	bmi.n	8008f38 <R3_2_Init+0x320>
  MODIFY_REG(ADCx->CR,
 8008f26:	4e4f      	ldr	r6, [pc, #316]	; (8009064 <R3_2_Init+0x44c>)
 8008f28:	6895      	ldr	r5, [r2, #8]
 8008f2a:	4035      	ands	r5, r6
 8008f2c:	f045 0501 	orr.w	r5, r5, #1
 8008f30:	6095      	str	r5, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008f32:	6815      	ldr	r5, [r2, #0]
 8008f34:	07ef      	lsls	r7, r5, #31
 8008f36:	d5f7      	bpl.n	8008f28 <R3_2_Init+0x310>
  MODIFY_REG(ADCx->CR,
 8008f38:	6896      	ldr	r6, [r2, #8]
 8008f3a:	4f4a      	ldr	r7, [pc, #296]	; (8009064 <R3_2_Init+0x44c>)
 8008f3c:	403e      	ands	r6, r7
 8008f3e:	f046 0608 	orr.w	r6, r6, #8
 8008f42:	6096      	str	r6, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8008f44:	6895      	ldr	r5, [r2, #8]
 8008f46:	403d      	ands	r5, r7
 8008f48:	f045 0520 	orr.w	r5, r5, #32
 8008f4c:	6095      	str	r5, [r2, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008f4e:	68d5      	ldr	r5, [r2, #12]
 8008f50:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8008f54:	f425 1500 	bic.w	r5, r5, #2097152	; 0x200000
 8008f58:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008f5c:	2640      	movs	r6, #64	; 0x40
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008f5e:	60d5      	str	r5, [r2, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008f60:	6016      	str	r6, [r2, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008f62:	6855      	ldr	r5, [r2, #4]
 8008f64:	4335      	orrs	r5, r6
 8008f66:	6055      	str	r5, [r2, #4]
 8008f68:	e6f9      	b.n	8008d5e <R3_2_Init+0x146>
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8008f6a:	f8df e100 	ldr.w	lr, [pc, #256]	; 800906c <R3_2_Init+0x454>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 8008f6e:	f8b4 c098 	ldrh.w	ip, [r4, #152]	; 0x98
  MODIFY_REG(*preg,
 8008f72:	f8de 5004 	ldr.w	r5, [lr, #4]
  SET_BIT(DACx->SWTRIGR,
 8008f76:	4e3c      	ldr	r6, [pc, #240]	; (8009068 <R3_2_Init+0x450>)
  MODIFY_REG(*preg,
 8008f78:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8008f7c:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8008f80:	ea4c 0505 	orr.w	r5, ip, r5
 8008f84:	f8ce 5004 	str.w	r5, [lr, #4]
  SET_BIT(DACx->SWTRIGR,
 8008f88:	6875      	ldr	r5, [r6, #4]
 8008f8a:	f045 0501 	orr.w	r5, r5, #1
 8008f8e:	6075      	str	r5, [r6, #4]
  return ((READ_BIT(DACx->CR,
 8008f90:	6835      	ldr	r5, [r6, #0]
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008f92:	07ed      	lsls	r5, r5, #31
 8008f94:	f53f aed7 	bmi.w	8008d46 <R3_2_Init+0x12e>
  SET_BIT(DACx->CR,
 8008f98:	6835      	ldr	r5, [r6, #0]
 8008f9a:	f045 0501 	orr.w	r5, r5, #1
 8008f9e:	6035      	str	r5, [r6, #0]
 8008fa0:	e6d1      	b.n	8008d46 <R3_2_Init+0x12e>
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8008fa2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800906c <R3_2_Init+0x454>
 8008fa6:	f8b4 a096 	ldrh.w	sl, [r4, #150]	; 0x96
  MODIFY_REG(*preg,
 8008faa:	f8d9 5004 	ldr.w	r5, [r9, #4]
  SET_BIT(DACx->SWTRIGR,
 8008fae:	4e2e      	ldr	r6, [pc, #184]	; (8009068 <R3_2_Init+0x450>)
  MODIFY_REG(*preg,
 8008fb0:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8008fb4:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8008fb8:	ea4a 0505 	orr.w	r5, sl, r5
 8008fbc:	f8c9 5004 	str.w	r5, [r9, #4]
  SET_BIT(DACx->SWTRIGR,
 8008fc0:	6875      	ldr	r5, [r6, #4]
 8008fc2:	f045 0501 	orr.w	r5, r5, #1
 8008fc6:	6075      	str	r5, [r6, #4]
  return ((READ_BIT(DACx->CR,
 8008fc8:	6835      	ldr	r5, [r6, #0]
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008fca:	07ed      	lsls	r5, r5, #31
 8008fcc:	f53f ae81 	bmi.w	8008cd2 <R3_2_Init+0xba>
  SET_BIT(DACx->CR,
 8008fd0:	6835      	ldr	r5, [r6, #0]
 8008fd2:	f045 0501 	orr.w	r5, r5, #1
 8008fd6:	6035      	str	r5, [r6, #0]
 8008fd8:	e67b      	b.n	8008cd2 <R3_2_Init+0xba>
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8008fda:	f8df e090 	ldr.w	lr, [pc, #144]	; 800906c <R3_2_Init+0x454>
 8008fde:	f8b4 c098 	ldrh.w	ip, [r4, #152]	; 0x98
  MODIFY_REG(*preg,
 8008fe2:	f8de 5010 	ldr.w	r5, [lr, #16]
  SET_BIT(DACx->SWTRIGR,
 8008fe6:	4e20      	ldr	r6, [pc, #128]	; (8009068 <R3_2_Init+0x450>)
  MODIFY_REG(*preg,
 8008fe8:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8008fec:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8008ff0:	ea4c 0505 	orr.w	r5, ip, r5
 8008ff4:	f8ce 5010 	str.w	r5, [lr, #16]
  SET_BIT(DACx->SWTRIGR,
 8008ff8:	6875      	ldr	r5, [r6, #4]
 8008ffa:	f045 0502 	orr.w	r5, r5, #2
 8008ffe:	6075      	str	r5, [r6, #4]
  return ((READ_BIT(DACx->CR,
 8009000:	6835      	ldr	r5, [r6, #0]
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009002:	03ed      	lsls	r5, r5, #15
 8009004:	f53f ae9f 	bmi.w	8008d46 <R3_2_Init+0x12e>
  SET_BIT(DACx->CR,
 8009008:	6835      	ldr	r5, [r6, #0]
 800900a:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 800900e:	6035      	str	r5, [r6, #0]
 8009010:	e699      	b.n	8008d46 <R3_2_Init+0x12e>
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8009012:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800906c <R3_2_Init+0x454>
 8009016:	f8b4 a096 	ldrh.w	sl, [r4, #150]	; 0x96
  MODIFY_REG(*preg,
 800901a:	f8d9 5010 	ldr.w	r5, [r9, #16]
  SET_BIT(DACx->SWTRIGR,
 800901e:	4e12      	ldr	r6, [pc, #72]	; (8009068 <R3_2_Init+0x450>)
  MODIFY_REG(*preg,
 8009020:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8009024:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8009028:	ea4a 0505 	orr.w	r5, sl, r5
 800902c:	f8c9 5010 	str.w	r5, [r9, #16]
  SET_BIT(DACx->SWTRIGR,
 8009030:	6875      	ldr	r5, [r6, #4]
 8009032:	f045 0502 	orr.w	r5, r5, #2
 8009036:	6075      	str	r5, [r6, #4]
  return ((READ_BIT(DACx->CR,
 8009038:	6835      	ldr	r5, [r6, #0]
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800903a:	03ed      	lsls	r5, r5, #15
 800903c:	f53f ae49 	bmi.w	8008cd2 <R3_2_Init+0xba>
  SET_BIT(DACx->CR,
 8009040:	6835      	ldr	r5, [r6, #0]
 8009042:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 8009046:	6035      	str	r5, [r6, #0]
 8009048:	e643      	b.n	8008cd2 <R3_2_Init+0xba>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800904a:	2101      	movs	r1, #1
 800904c:	6319      	str	r1, [r3, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800904e:	6959      	ldr	r1, [r3, #20]
 8009050:	f041 0101 	orr.w	r1, r1, #1
 8009054:	6159      	str	r1, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009056:	631a      	str	r2, [r3, #48]	; 0x30
 8009058:	e6b0      	b.n	8008dbc <R3_2_Init+0x1a4>
 800905a:	bf00      	nop
 800905c:	200005dc 	.word	0x200005dc
 8009060:	053e2d63 	.word	0x053e2d63
 8009064:	7fffffc0 	.word	0x7fffffc0
 8009068:	50000800 	.word	0x50000800
 800906c:	50000808 	.word	0x50000808

08009070 <R3_2_CurrentReadingPolarization>:
{
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009072:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009074:	493f      	ldr	r1, [pc, #252]	; (8009174 <R3_2_CurrentReadingPolarization+0x104>)
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009076:	689d      	ldr	r5, [r3, #8]
  pHandle->PhaseAOffset = 0u;
 8009078:	2200      	movs	r2, #0
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800907a:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 800907e:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 8009082:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8009084:	65c2      	str	r2, [r0, #92]	; 0x5c
 8009086:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800908a:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800908e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8009092:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009094:	4b38      	ldr	r3, [pc, #224]	; (8009178 <R3_2_CurrentReadingPolarization+0x108>)
 8009096:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8009098:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 800909a:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800909c:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80090a0:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 80090a2:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 80090a6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 80090aa:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80090ac:	f7ff fc9e 	bl	80089ec <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 80090b0:	4a32      	ldr	r2, [pc, #200]	; (800917c <R3_2_CurrentReadingPolarization+0x10c>)
 80090b2:	686b      	ldr	r3, [r5, #4]
 80090b4:	4013      	ands	r3, r2
 80090b6:	2b70      	cmp	r3, #112	; 0x70
 80090b8:	d1fb      	bne.n	80090b2 <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4930      	ldr	r1, [pc, #192]	; (8009180 <R3_2_CurrentReadingPolarization+0x110>)
 80090be:	400a      	ands	r2, r1
 80090c0:	f042 0208 	orr.w	r2, r2, #8
 80090c4:	60ba      	str	r2, [r7, #8]
 80090c6:	68b3      	ldr	r3, [r6, #8]
 80090c8:	400b      	ands	r3, r1
 80090ca:	f043 0308 	orr.w	r3, r3, #8
 80090ce:	60b3      	str	r3, [r6, #8]
  while ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80090d0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80090d4:	2b0f      	cmp	r3, #15
 80090d6:	d9fb      	bls.n	80090d0 <R3_2_CurrentReadingPolarization+0x60>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80090d8:	4620      	mov	r0, r4
 80090da:	f7ff fccb 	bl	8008a74 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 80090de:	2300      	movs	r3, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80090e0:	4a28      	ldr	r2, [pc, #160]	; (8009184 <R3_2_CurrentReadingPolarization+0x114>)
  pHandle->PolarizationCounter = 0u;
 80090e2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 80090e6:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 80090ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80090ee:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff fc7b 	bl	80089ec <R3_2_SwitchOnPWM>
  while ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80090f6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	d9fb      	bls.n	80090f6 <R3_2_CurrentReadingPolarization+0x86>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80090fe:	4620      	mov	r0, r4
 8009100:	f7ff fcb8 	bl	8008a74 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009104:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009108:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800910a:	481f      	ldr	r0, [pc, #124]	; (8009188 <R3_2_CurrentReadingPolarization+0x118>)
 800910c:	6060      	str	r0, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800910e:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009110:	0912      	lsrs	r2, r2, #4
 8009112:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009116:	091b      	lsrs	r3, r3, #4
 8009118:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800911a:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800911c:	4a1b      	ldr	r2, [pc, #108]	; (800918c <R3_2_CurrentReadingPolarization+0x11c>)
 800911e:	61a2      	str	r2, [r4, #24]
 8009120:	f023 0308 	bic.w	r3, r3, #8
 8009124:	61ab      	str	r3, [r5, #24]
 8009126:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8009128:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800912c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009130:	61aa      	str	r2, [r5, #24]
 8009132:	69ea      	ldr	r2, [r5, #28]
 8009134:	f022 0208 	bic.w	r2, r2, #8
 8009138:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800913a:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800913c:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800913e:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009140:	69ab      	ldr	r3, [r5, #24]
 8009142:	f043 0308 	orr.w	r3, r3, #8
 8009146:	61ab      	str	r3, [r5, #24]
 8009148:	69ab      	ldr	r3, [r5, #24]
 800914a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800914e:	61ab      	str	r3, [r5, #24]
 8009150:	69eb      	ldr	r3, [r5, #28]
 8009152:	f043 0308 	orr.w	r3, r3, #8
 8009156:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009158:	6a2b      	ldr	r3, [r5, #32]
 800915a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800915e:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8009162:	2104      	movs	r1, #4
 8009164:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8009166:	2200      	movs	r2, #0
  pHandle->_Super.Sector=SECTOR_5;
 8009168:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 800916c:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
}
 8009170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009172:	bf00      	nop
 8009174:	0800890d 	.word	0x0800890d
 8009178:	0800885d 	.word	0x0800885d
 800917c:	02000070 	.word	0x02000070
 8009180:	7fffffc0 	.word	0x7fffffc0
 8009184:	08008959 	.word	0x08008959
 8009188:	080086d1 	.word	0x080086d1
 800918c:	08008899 	.word	0x08008899

08009190 <R3_2_TIMx_UP_IRQHandler>:
{
 8009190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009194:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8009196:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
{
 800919a:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800919c:	e9d2 6002 	ldrd	r6, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80091a0:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d03b      	beq.n	8009220 <R3_2_TIMx_UP_IRQHandler+0x90>
    while (ADCx_1->JSQR != 0x0u)
 80091a8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1fc      	bne.n	80091a8 <R3_2_TIMx_UP_IRQHandler+0x18>
 80091ae:	b22d      	sxth	r5, r5
 80091b0:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    Opamp = OPAMPParams->OPAMPSelect_1 [pHandle->_Super.Sector];
 80091b4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    if (Opamp != NULL )
 80091b8:	f1bc 0f00 	cmp.w	ip, #0
 80091bc:	d007      	beq.n	80091ce <R3_2_TIMx_UP_IRQHandler+0x3e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 80091be:	f8dc 0000 	ldr.w	r0, [ip]
 80091c2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80091c4:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 80091c8:	4338      	orrs	r0, r7
 80091ca:	f8cc 0000 	str.w	r0, [ip]
     Opamp = OPAMPParams->OPAMPSelect_2 [pHandle->_Super.Sector];
 80091ce:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
    if (Opamp != NULL )
 80091d2:	f1bc 0f00 	cmp.w	ip, #0
 80091d6:	d009      	beq.n	80091ec <R3_2_TIMx_UP_IRQHandler+0x5c>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 80091d8:	f8dc 0000 	ldr.w	r0, [ip]
 80091dc:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 80091e0:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 80091e4:	ea43 030e 	orr.w	r3, r3, lr
 80091e8:	f8cc 3000 	str.w	r3, [ip]
 80091ec:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80091f0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80091f4:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80091f6:	6f55      	ldr	r5, [r2, #116]	; 0x74
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80091f8:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80091fa:	432b      	orrs	r3, r5
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80091fc:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80091fe:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009202:	6873      	ldr	r3, [r6, #4]
 8009204:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009210:	2280      	movs	r2, #128	; 0x80
 8009212:	6073      	str	r3, [r6, #4]
}
 8009214:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009218:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009220:	b22d      	sxth	r5, r5
 8009222:	e7e3      	b.n	80091ec <R3_2_TIMx_UP_IRQHandler+0x5c>

08009224 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8009224:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8009228:	b923      	cbnz	r3, 8009234 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800922a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800922c:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
 8009230:	2a02      	cmp	r2, #2
 8009232:	d004      	beq.n	800923e <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8009234:	2301      	movs	r3, #1
 8009236:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 800923a:	3046      	adds	r0, #70	; 0x46
 800923c:	4770      	bx	lr
{
 800923e:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009240:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009244:	f8b3 508c 	ldrh.w	r5, [r3, #140]	; 0x8c
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800924a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800924c:	f8b3 408e 	ldrh.w	r4, [r3, #142]	; 0x8e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009250:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8009254:	628c      	str	r4, [r1, #40]	; 0x28
 8009256:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8009258:	2301      	movs	r3, #1
 800925a:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 800925e:	bc30      	pop	{r4, r5}
 8009260:	3046      	adds	r0, #70	; 0x46
 8009262:	4770      	bx	lr

08009264 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009264:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8009266:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009268:	6890      	ldr	r0, [r2, #8]
 800926a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800926c:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800926e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009272:	6442      	str	r2, [r0, #68]	; 0x44
}
 8009274:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8009278:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 800927c:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop

08009284 <R3_2_IsOverCurrentOccurred>:
{
 8009284:	4602      	mov	r2, r0
  if ( pHandle->OverVoltageFlag == true )
 8009286:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 800928a:	b160      	cbz	r0, 80092a6 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 800928c:	2300      	movs	r3, #0
 800928e:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
 8009292:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8009294:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8009296:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 800929a:	b11b      	cbz	r3, 80092a4 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 800929c:	2300      	movs	r3, #0
    retVal |= MC_BREAK_IN;
 800929e:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 80092a0:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
}
 80092a4:	4770      	bx	lr
 80092a6:	2140      	movs	r1, #64	; 0x40
 80092a8:	e7f5      	b.n	8009296 <R3_2_IsOverCurrentOccurred+0x12>
 80092aa:	bf00      	nop

080092ac <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 80092ac:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 80092b0:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 80092b2:	2900      	cmp	r1, #0
 80092b4:	d13c      	bne.n	8009330 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80092b6:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80092b8:	6893      	ldr	r3, [r2, #8]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80092ba:	f892 509a 	ldrb.w	r5, [r2, #154]	; 0x9a
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80092be:	699a      	ldr	r2, [r3, #24]
 80092c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80092c4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80092c8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80092cc:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80092ce:	6a1a      	ldr	r2, [r3, #32]
 80092d0:	f042 0201 	orr.w	r2, r2, #1
 80092d4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80092d6:	6a1a      	ldr	r2, [r3, #32]
 80092d8:	2d01      	cmp	r5, #1
 80092da:	f022 0204 	bic.w	r2, r2, #4
 80092de:	621a      	str	r2, [r3, #32]
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80092e0:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 80092e4:	6359      	str	r1, [r3, #52]	; 0x34
 80092e6:	d030      	beq.n	800934a <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80092e8:	2d02      	cmp	r5, #2
 80092ea:	d10f      	bne.n	800930c <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80092f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80092f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092fa:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80092fc:	6a1a      	ldr	r2, [r3, #32]
 80092fe:	f042 0210 	orr.w	r2, r2, #16
 8009302:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009304:	6a1a      	ldr	r2, [r3, #32]
 8009306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800930a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800930c:	6862      	ldr	r2, [r4, #4]
 800930e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009312:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009316:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800931a:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800931c:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800931e:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8009320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009324:	621a      	str	r2, [r3, #32]
 8009326:	6a1a      	ldr	r2, [r3, #32]
 8009328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800932c:	621a      	str	r2, [r3, #32]
 800932e:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009330:	4b0e      	ldr	r3, [pc, #56]	; (800936c <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009332:	490f      	ldr	r1, [pc, #60]	; (8009370 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009334:	4a0f      	ldr	r2, [pc, #60]	; (8009374 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009336:	4c10      	ldr	r4, [pc, #64]	; (8009378 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009338:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 800933a:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800933c:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800933e:	e9c0 2102 	strd	r2, r1, [r0, #8]
  pHandle->_Super.RLDetectionMode = true;
 8009342:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8009346:	bc30      	pop	{r4, r5}
 8009348:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800934a:	699a      	ldr	r2, [r3, #24]
 800934c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009350:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009354:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009358:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800935a:	6a1a      	ldr	r2, [r3, #32]
 800935c:	f022 0210 	bic.w	r2, r2, #16
 8009360:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009362:	6a1a      	ldr	r2, [r3, #32]
 8009364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009368:	621a      	str	r2, [r3, #32]
 800936a:	e7cf      	b.n	800930c <R3_2_RLDetectionModeEnable+0x60>
 800936c:	08008ad9 	.word	0x08008ad9
 8009370:	08008b75 	.word	0x08008b75
 8009374:	08008a75 	.word	0x08008a75
 8009378:	08008b31 	.word	0x08008b31

0800937c <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 800937c:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8009380:	2b00      	cmp	r3, #0
 8009382:	d03b      	beq.n	80093fc <R3_2_RLDetectionModeDisable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009384:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8009386:	6893      	ldr	r3, [r2, #8]
{
 8009388:	b470      	push	{r4, r5, r6}
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800938a:	f892 509a 	ldrb.w	r5, [r2, #154]	; 0x9a
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800938e:	4c40      	ldr	r4, [pc, #256]	; (8009490 <R3_2_RLDetectionModeDisable+0x114>)
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
 8009396:	4022      	ands	r2, r4
 8009398:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800939c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800939e:	6a19      	ldr	r1, [r3, #32]
 80093a0:	2d01      	cmp	r5, #1
 80093a2:	f041 0101 	orr.w	r1, r1, #1
 80093a6:	6219      	str	r1, [r3, #32]
 80093a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80093ac:	d027      	beq.n	80093fe <R3_2_RLDetectionModeDisable+0x82>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80093ae:	2d02      	cmp	r5, #2
 80093b0:	d049      	beq.n	8009446 <R3_2_RLDetectionModeDisable+0xca>
  WRITE_REG(TIMx->CCR1, CompareValue);
 80093b2:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80093b4:	6999      	ldr	r1, [r3, #24]
 80093b6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80093ba:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80093be:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80093c2:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80093c4:	6a19      	ldr	r1, [r3, #32]
 80093c6:	f041 0110 	orr.w	r1, r1, #16
 80093ca:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80093cc:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80093ce:	69d9      	ldr	r1, [r3, #28]
 80093d0:	400c      	ands	r4, r1
 80093d2:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80093d6:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80093d8:	6a19      	ldr	r1, [r3, #32]
 80093da:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80093de:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 80093e0:	492c      	ldr	r1, [pc, #176]	; (8009494 <R3_2_RLDetectionModeDisable+0x118>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80093e2:	4a2d      	ldr	r2, [pc, #180]	; (8009498 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 80093e4:	63de      	str	r6, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80093e6:	4d2d      	ldr	r5, [pc, #180]	; (800949c <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 80093e8:	4c2d      	ldr	r4, [pc, #180]	; (80094a0 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80093ea:	6045      	str	r5, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 80093ec:	2300      	movs	r3, #0
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 80093ee:	6144      	str	r4, [r0, #20]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80093f0:	e9c0 2102 	strd	r2, r1, [r0, #8]
    pHandle->_Super.RLDetectionMode = false;
 80093f4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80093f8:	bc70      	pop	{r4, r5, r6}
 80093fa:	4770      	bx	lr
 80093fc:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80093fe:	6a19      	ldr	r1, [r3, #32]
 8009400:	f041 0104 	orr.w	r1, r1, #4
 8009404:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009406:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009408:	6999      	ldr	r1, [r3, #24]
 800940a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800940e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009412:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009416:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009418:	6a19      	ldr	r1, [r3, #32]
 800941a:	f041 0110 	orr.w	r1, r1, #16
 800941e:	6219      	str	r1, [r3, #32]
 8009420:	6a19      	ldr	r1, [r3, #32]
 8009422:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009426:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009428:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800942a:	69d9      	ldr	r1, [r3, #28]
 800942c:	400c      	ands	r4, r1
 800942e:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009432:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009434:	6a19      	ldr	r1, [r3, #32]
 8009436:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800943a:	6219      	str	r1, [r3, #32]
 800943c:	6a19      	ldr	r1, [r3, #32]
 800943e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009442:	6219      	str	r1, [r3, #32]
 8009444:	e7cc      	b.n	80093e0 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 8009446:	6a19      	ldr	r1, [r3, #32]
 8009448:	f021 0104 	bic.w	r1, r1, #4
 800944c:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800944e:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009450:	6999      	ldr	r1, [r3, #24]
 8009452:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009456:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800945a:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800945e:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009460:	6a19      	ldr	r1, [r3, #32]
 8009462:	f041 0110 	orr.w	r1, r1, #16
 8009466:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009468:	6a19      	ldr	r1, [r3, #32]
 800946a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800946e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009470:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009472:	69d9      	ldr	r1, [r3, #28]
 8009474:	400c      	ands	r4, r1
 8009476:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800947a:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800947c:	6a19      	ldr	r1, [r3, #32]
 800947e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009482:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009484:	6a19      	ldr	r1, [r3, #32]
 8009486:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800948a:	6219      	str	r1, [r3, #32]
 800948c:	e7a8      	b.n	80093e0 <R3_2_RLDetectionModeDisable+0x64>
 800948e:	bf00      	nop
 8009490:	fffeff8c 	.word	0xfffeff8c
 8009494:	080089ed 	.word	0x080089ed
 8009498:	08008a75 	.word	0x08008a75
 800949c:	080086d1 	.word	0x080086d1
 80094a0:	0800899d 	.word	0x0800899d

080094a4 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094a4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80094a6:	689b      	ldr	r3, [r3, #8]
{
 80094a8:	b470      	push	{r4, r5, r6}
 80094aa:	4602      	mov	r2, r0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80094ac:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80094b0:	69d8      	ldr	r0, [r3, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 80094b2:	f8b2 6056 	ldrh.w	r6, [r2, #86]	; 0x56
 80094b6:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80094ba:	fb01 f104 	mul.w	r1, r1, r4
 80094be:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 80094c2:	0c09      	lsrs	r1, r1, #16
 80094c4:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 80094c8:	8651      	strh	r1, [r2, #50]	; 0x32
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 80094ca:	1ba4      	subs	r4, r4, r6
 80094cc:	61d8      	str	r0, [r3, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 80094ce:	f8b2 0058 	ldrh.w	r0, [r2, #88]	; 0x58
  WRITE_REG(TIMx->CCR4, CompareValue);
 80094d2:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 80094d4:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80094d6:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80094d8:	6859      	ldr	r1, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 80094da:	8f10      	ldrh	r0, [r2, #56]	; 0x38
 80094dc:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 80094e0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 80094e4:	2503      	movs	r5, #3
 80094e6:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 80094ea:	6059      	str	r1, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 80094ec:	2801      	cmp	r0, #1
  pHdl->Sector = SECTOR_4;
 80094ee:	f882 503a 	strb.w	r5, [r2, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80094f2:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 80094f4:	d006      	beq.n	8009504 <R3_2_RLDetectionModeSetDuty+0x60>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80094f6:	4a05      	ldr	r2, [pc, #20]	; (800950c <R3_2_RLDetectionModeSetDuty+0x68>)
 80094f8:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 80094fa:	bf14      	ite	ne
 80094fc:	2001      	movne	r0, #1
 80094fe:	2000      	moveq	r0, #0
}
 8009500:	bc70      	pop	{r4, r5, r6}
 8009502:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8009504:	2300      	movs	r3, #0
 8009506:	8713      	strh	r3, [r2, #56]	; 0x38
}
 8009508:	bc70      	pop	{r4, r5, r6}
 800950a:	4770      	bx	lr
 800950c:	02000070 	.word	0x02000070

08009510 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009510:	8b42      	ldrh	r2, [r0, #26]
 8009512:	8b81      	ldrh	r1, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009514:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009516:	440a      	add	r2, r1
 8009518:	0852      	lsrs	r2, r2, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800951a:	b18b      	cbz	r3, 8009540 <RVBS_Clear+0x30>
{
 800951c:	b410      	push	{r4}
  {
    pHandle->aBuffer[index] = aux;
 800951e:	6a04      	ldr	r4, [r0, #32]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009520:	2300      	movs	r3, #0
    pHandle->aBuffer[index] = aux;
 8009522:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009526:	3301      	adds	r3, #1
 8009528:	8b01      	ldrh	r1, [r0, #24]
 800952a:	b29b      	uxth	r3, r3
 800952c:	4299      	cmp	r1, r3
 800952e:	d8f8      	bhi.n	8009522 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8009530:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8009532:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8009534:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8009536:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 800953a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953e:	4770      	bx	lr
  pHandle->index = 0;
 8009540:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8009542:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 8009544:	80c2      	strh	r2, [r0, #6]
  pHandle->index = 0;
 8009546:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 800954a:	4770      	bx	lr

0800954c <RVBS_Init>:
{
 800954c:	b510      	push	{r4, lr}
 800954e:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8009550:	300c      	adds	r0, #12
 8009552:	f7f8 fb47 	bl	8001be4 <RCM_RegisterRegConv>
 8009556:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800955a:	4620      	mov	r0, r4
 800955c:	f7ff ffd8 	bl	8009510 <RVBS_Clear>
}
 8009560:	bd10      	pop	{r4, pc}
 8009562:	bf00      	nop

08009564 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8009564:	88c3      	ldrh	r3, [r0, #6]
 8009566:	8b42      	ldrh	r2, [r0, #26]
 8009568:	429a      	cmp	r2, r3
 800956a:	d305      	bcc.n	8009578 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800956c:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800956e:	4298      	cmp	r0, r3
 8009570:	bf8c      	ite	hi
 8009572:	2004      	movhi	r0, #4
 8009574:	2000      	movls	r0, #0
 8009576:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8009578:	2002      	movs	r0, #2
  }
  return fault;
}
 800957a:	4770      	bx	lr

0800957c <RVBS_CalcAvVbus>:
{
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009580:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8009584:	f7f8 fbee 	bl	8001d64 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8009588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800958c:	4298      	cmp	r0, r3
 800958e:	d01b      	beq.n	80095c8 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8009590:	6a26      	ldr	r6, [r4, #32]
 8009592:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8009596:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800959a:	8b25      	ldrh	r5, [r4, #24]
 800959c:	b1cd      	cbz	r5, 80095d2 <RVBS_CalcAvVbus+0x56>
 800959e:	2300      	movs	r3, #0
    wtemp = 0;
 80095a0:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80095a2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80095a6:	3301      	adds	r3, #1
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 80095ac:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80095ae:	d3f8      	bcc.n	80095a2 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80095b0:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80095b4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80095b8:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80095ba:	3d01      	subs	r5, #1
 80095bc:	42ab      	cmp	r3, r5
    pHandle->_Super.LatestConv = hAux;
 80095be:	80a0      	strh	r0, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80095c0:	da09      	bge.n	80095d6 <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 80095c2:	3301      	adds	r3, #1
 80095c4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80095c8:	4620      	mov	r0, r4
 80095ca:	f7ff ffcb 	bl	8009564 <RVBS_CheckFaultState>
 80095ce:	8120      	strh	r0, [r4, #8]
}
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80095d2:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 80095d4:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80095dc:	4620      	mov	r0, r4
 80095de:	f7ff ffc1 	bl	8009564 <RVBS_CheckFaultState>
 80095e2:	8120      	strh	r0, [r4, #8]
}
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
 80095e6:	bf00      	nop

080095e8 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 80095e8:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 80095ea:	2201      	movs	r2, #1
 80095ec:	6142      	str	r2, [r0, #20]
  pHandle->TargetFinal = 0;
 80095ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80095f2:	e9c0 3303 	strd	r3, r3, [r0, #12]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80095f6:	4770      	bx	lr

080095f8 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 80095f8:	f9b0 0000 	ldrsh.w	r0, [r0]
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop

08009600 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8009600:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop

08009608 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8009608:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop

08009610 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8009610:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 8009614:	b430      	push	{r4, r5}
 8009616:	b28a      	uxth	r2, r1
  if ( *pMecSpeedUnit < 0 )
 8009618:	2900      	cmp	r1, #0
  {
    hAux = -( *pMecSpeedUnit );
 800961a:	bfb8      	it	lt
 800961c:	4252      	neglt	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800961e:	8a05      	ldrh	r5, [r0, #16]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009620:	7c84      	ldrb	r4, [r0, #18]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009622:	7b03      	ldrb	r3, [r0, #12]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8009624:	89c1      	ldrh	r1, [r0, #14]
    hAux = -( *pMecSpeedUnit );
 8009626:	bfb8      	it	lt
 8009628:	b292      	uxthlt	r2, r2
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800962a:	4295      	cmp	r5, r2
 800962c:	d819      	bhi.n	8009662 <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800962e:	4291      	cmp	r1, r2
 8009630:	bf2c      	ite	cs
 8009632:	2200      	movcs	r2, #0
 8009634:	2201      	movcc	r2, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8009636:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 800963a:	b2a9      	uxth	r1, r5
 800963c:	2d00      	cmp	r5, #0
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800963e:	bfb8      	it	lt
 8009640:	4249      	neglt	r1, r1
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8009642:	8a85      	ldrh	r5, [r0, #20]
    hAux = -( pHandle->hMecAccelUnitP );
 8009644:	bfb8      	it	lt
 8009646:	b289      	uxthlt	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8009648:	428d      	cmp	r5, r1
 800964a:	d300      	bcc.n	800964e <SPD_IsMecSpeedReliable+0x3e>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800964c:	b15a      	cbz	r2, 8009666 <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800964e:	429c      	cmp	r4, r3
 8009650:	d901      	bls.n	8009656 <SPD_IsMecSpeedReliable+0x46>
    {
      bSpeedErrorNumber++;
 8009652:	3301      	adds	r3, #1
 8009654:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009656:	7303      	strb	r3, [r0, #12]

  return ( SpeedSensorReliability );
}
 8009658:	1b18      	subs	r0, r3, r4
 800965a:	bf18      	it	ne
 800965c:	2001      	movne	r0, #1
 800965e:	bc30      	pop	{r4, r5}
 8009660:	4770      	bx	lr
    SpeedError = true;
 8009662:	2201      	movs	r2, #1
 8009664:	e7e7      	b.n	8009636 <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8009666:	429c      	cmp	r4, r3
 8009668:	bf88      	it	hi
 800966a:	2300      	movhi	r3, #0
 800966c:	e7f3      	b.n	8009656 <SPD_IsMecSpeedReliable+0x46>
 800966e:	bf00      	nop

08009670 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8009670:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009674:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
  wAux *= INT16_MAX;
 8009678:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800967c:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8009680:	b200      	sxth	r0, r0
 8009682:	4770      	bx	lr

08009684 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8009684:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8009686:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800968a:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 800968e:	6101      	str	r1, [r0, #16]
  pHandle->TargetFinal = 0;
 8009690:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8009692:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8009694:	0424      	lsls	r4, r4, #16
  pHandle->Mode = pHandle->ModeDefault;
 8009696:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SPD = SPD_Handle;
 800969a:	6142      	str	r2, [r0, #20]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800969c:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80096a0:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 80096a2:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80096a4:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80096a6:	6183      	str	r3, [r0, #24]
}
 80096a8:	bc30      	pop	{r4, r5}
 80096aa:	4770      	bx	lr

080096ac <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 80096ac:	6141      	str	r1, [r0, #20]
}
 80096ae:	4770      	bx	lr

080096b0 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80096b0:	6940      	ldr	r0, [r0, #20]
 80096b2:	4770      	bx	lr

080096b4 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80096b4:	7803      	ldrb	r3, [r0, #0]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d000      	beq.n	80096bc <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80096ba:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80096bc:	6900      	ldr	r0, [r0, #16]
 80096be:	2100      	movs	r1, #0
 80096c0:	f7fe be04 	b.w	80082cc <PID_SetIntegralTerm>

080096c4 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80096c4:	6840      	ldr	r0, [r0, #4]
 80096c6:	2800      	cmp	r0, #0
 80096c8:	bfbc      	itt	lt
 80096ca:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80096ce:	30ff      	addlt	r0, #255	; 0xff
}
 80096d0:	1400      	asrs	r0, r0, #16
 80096d2:	4770      	bx	lr

080096d4 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80096d4:	6880      	ldr	r0, [r0, #8]
 80096d6:	2800      	cmp	r0, #0
 80096d8:	bfbc      	itt	lt
 80096da:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80096de:	30ff      	addlt	r0, #255	; 0xff
}
 80096e0:	1400      	asrs	r0, r0, #16
 80096e2:	4770      	bx	lr

080096e4 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80096e4:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80096e6:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80096e8:	60c3      	str	r3, [r0, #12]
}
 80096ea:	4770      	bx	lr

080096ec <STC_ExecRamp>:
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80096ec:	7803      	ldrb	r3, [r0, #0]
{
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	4604      	mov	r4, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80096f6:	b313      	cbz	r3, 800973e <STC_ExecRamp+0x52>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80096f8:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80096fa:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80096fc:	2800      	cmp	r0, #0
 80096fe:	bfbc      	itt	lt
 8009700:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8009704:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009706:	428b      	cmp	r3, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009708:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800970c:	db1c      	blt.n	8009748 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800970e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8009712:	428b      	cmp	r3, r1
 8009714:	dc18      	bgt.n	8009748 <STC_ExecRamp+0x5c>
    {
      AllowedRange = false;
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8009716:	8c23      	ldrh	r3, [r4, #32]
 8009718:	428b      	cmp	r3, r1
 800971a:	dd03      	ble.n	8009724 <STC_ExecRamp+0x38>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800971c:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8009720:	428b      	cmp	r3, r1
 8009722:	db11      	blt.n	8009748 <STC_ExecRamp+0x5c>
  }

  if ( AllowedRange == true )
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 8009724:	b9c6      	cbnz	r6, 8009758 <STC_ExecRamp+0x6c>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 8009726:	7823      	ldrb	r3, [r4, #0]
 8009728:	042d      	lsls	r5, r5, #16
 800972a:	2b01      	cmp	r3, #1
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
      }
      pHandle->RampRemainingStep = 0u;
 800972c:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8009730:	bf0c      	ite	eq
 8009732:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8009734:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8009736:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8009738:	61a3      	str	r3, [r4, #24]
 800973a:	2001      	movs	r0, #1
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800973c:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800973e:	f7ff ffc9 	bl	80096d4 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8009742:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009744:	42ab      	cmp	r3, r5
 8009746:	da01      	bge.n	800974c <STC_ExecRamp+0x60>
      AllowedRange = false;
 8009748:	2000      	movs	r0, #0
}
 800974a:	bd70      	pop	{r4, r5, r6, pc}
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800974c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8009750:	42ab      	cmp	r3, r5
 8009752:	dcf9      	bgt.n	8009748 <STC_ExecRamp+0x5c>
    if ( hDurationms == 0u )
 8009754:	2e00      	cmp	r6, #0
 8009756:	d0e6      	beq.n	8009726 <STC_ExecRamp+0x3a>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8009758:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800975a:	4a08      	ldr	r2, [pc, #32]	; (800977c <STC_ExecRamp+0x90>)
      pHandle->TargetFinal = hTargetFinal;
 800975c:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800975e:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8009768:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800976a:	1a2d      	subs	r5, r5, r0
 800976c:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 800976e:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8009770:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8009774:	2001      	movs	r0, #1
 8009776:	61a5      	str	r5, [r4, #24]
}
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	bf00      	nop
 800977c:	10624dd3 	.word	0x10624dd3

08009780 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009780:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8009782:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009786:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8009788:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800978a:	2a00      	cmp	r2, #0
 800978c:	bf18      	it	ne
 800978e:	460d      	movne	r5, r1
  if ( pHandle->RampRemainingStep > 1u )
 8009790:	2b01      	cmp	r3, #1
 8009792:	d910      	bls.n	80097b6 <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8009794:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8009796:	3b01      	subs	r3, #1
 8009798:	60c3      	str	r3, [r0, #12]
    wCurrentReference += pHandle->IncDecAmount;
 800979a:	440d      	add	r5, r1
 800979c:	2d00      	cmp	r5, #0
 800979e:	4629      	mov	r1, r5
 80097a0:	bfbc      	itt	lt
 80097a2:	f505 417f 	addlt.w	r1, r5, #65280	; 0xff00
 80097a6:	31ff      	addlt	r1, #255	; 0xff
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 80097a8:	2a01      	cmp	r2, #1
 80097aa:	ea4f 4621 	mov.w	r6, r1, asr #16
 80097ae:	d009      	beq.n	80097c4 <STC_CalcTorqueReference+0x44>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80097b0:	6085      	str	r5, [r0, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80097b2:	b230      	sxth	r0, r6
  }

  return hTorqueReference;
}
 80097b4:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80097b6:	d1f1      	bne.n	800979c <STC_CalcTorqueReference+0x1c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80097b8:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 80097bc:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80097be:	042d      	lsls	r5, r5, #16
    pHandle->RampRemainingStep = 0u;
 80097c0:	60c3      	str	r3, [r0, #12]
 80097c2:	e7eb      	b.n	800979c <STC_CalcTorqueReference+0x1c>
 80097c4:	4604      	mov	r4, r0
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80097c6:	6940      	ldr	r0, [r0, #20]
 80097c8:	f7ff ff1a 	bl	8009600 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80097cc:	1a30      	subs	r0, r6, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80097ce:	b201      	sxth	r1, r0
 80097d0:	6920      	ldr	r0, [r4, #16]
 80097d2:	f7fe fd87 	bl	80082e4 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80097d6:	0403      	lsls	r3, r0, #16
 80097d8:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 80097dc:	bd70      	pop	{r4, r5, r6, pc}
 80097de:	bf00      	nop

080097e0 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 80097e0:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop

080097e8 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 80097e8:	8bc0      	ldrh	r0, [r0, #30]
 80097ea:	4770      	bx	lr

080097ec <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 80097ec:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop

080097f4 <STC_StopSpeedRamp>:
  * @retval bool It returns true if the command is executed, false otherwise.
  */
__weak bool STC_StopSpeedRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->Mode == STC_SPEED_MODE )
 80097f4:	7803      	ldrb	r3, [r0, #0]
 80097f6:	2b01      	cmp	r3, #1
  {
    pHandle->RampRemainingStep = 0u;
 80097f8:	bf0a      	itet	eq
 80097fa:	2200      	moveq	r2, #0
  bool retVal = false;
 80097fc:	2300      	movne	r3, #0
    pHandle->RampRemainingStep = 0u;
 80097fe:	60c2      	streq	r2, [r0, #12]
    retVal = true;
  }
  return retVal;
}
 8009800:	4618      	mov	r0, r3
 8009802:	4770      	bx	lr

08009804 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009804:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8009808:	2000      	movs	r0, #0
 800980a:	b29a      	uxth	r2, r3
 800980c:	f362 000f 	bfi	r0, r2, #0, #16
 8009810:	0c1b      	lsrs	r3, r3, #16
{
 8009812:	b082      	sub	sp, #8
  return IqdRefDefault;
 8009814:	f363 401f 	bfi	r0, r3, #16, #16
}
 8009818:	b002      	add	sp, #8
 800981a:	4770      	bx	lr

0800981c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800981c:	b510      	push	{r4, lr}
 800981e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8009820:	6940      	ldr	r0, [r0, #20]
 8009822:	f7ff feed 	bl	8009600 <SPD_GetAvrgMecSpeedUnit>
 8009826:	0400      	lsls	r0, r0, #16
 8009828:	6060      	str	r0, [r4, #4]
}
 800982a:	bd10      	pop	{r4, pc}

0800982c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800982c:	2300      	movs	r3, #0
 800982e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8009830:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop

08009838 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009838:	8843      	ldrh	r3, [r0, #2]
{
 800983a:	b430      	push	{r4, r5}
  pHandle->hFaultOccurred |= hSetErrors;
 800983c:	8885      	ldrh	r5, [r0, #4]
{
 800983e:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;
 8009840:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009842:	430b      	orrs	r3, r1
 8009844:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8009848:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800984a:	280a      	cmp	r0, #10
  pHandle->hFaultOccurred |= hSetErrors;
 800984c:	80a1      	strh	r1, [r4, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800984e:	8062      	strh	r2, [r4, #2]
  if ( LocalState == FAULT_NOW )
 8009850:	d006      	beq.n	8009860 <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8009852:	b90a      	cbnz	r2, 8009858 <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8009854:	bc30      	pop	{r4, r5}
 8009856:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8009858:	200a      	movs	r0, #10
 800985a:	7020      	strb	r0, [r4, #0]
}
 800985c:	bc30      	pop	{r4, r5}
 800985e:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8009860:	2a00      	cmp	r2, #0
 8009862:	d1f7      	bne.n	8009854 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8009864:	200b      	movs	r0, #11
 8009866:	7020      	strb	r0, [r4, #0]
}
 8009868:	bc30      	pop	{r4, r5}
 800986a:	4770      	bx	lr

0800986c <STM_NextState>:
{
 800986c:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 800986e:	7803      	ldrb	r3, [r0, #0]
 8009870:	2b14      	cmp	r3, #20
 8009872:	d819      	bhi.n	80098a8 <STM_NextState+0x3c>
 8009874:	e8df f003 	tbb	[pc, r3]
 8009878:	240d1257 	.word	0x240d1257
 800987c:	3c0d352e 	.word	0x3c0d352e
 8009880:	1818423f 	.word	0x1818423f
 8009884:	4a650b47 	.word	0x4a650b47
 8009888:	53505e4d 	.word	0x53505e4d
 800988c:	39          	.byte	0x39
 800988d:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800988e:	290e      	cmp	r1, #14
 8009890:	d001      	beq.n	8009896 <STM_NextState+0x2a>
      if ( bState == ANY_STOP )
 8009892:	2907      	cmp	r1, #7
 8009894:	d108      	bne.n	80098a8 <STM_NextState+0x3c>
    pHandle->bState = bNewState;
 8009896:	7001      	strb	r1, [r0, #0]
 8009898:	2001      	movs	r0, #1
}
 800989a:	bd08      	pop	{r3, pc}
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800989c:	2907      	cmp	r1, #7
 800989e:	d0fa      	beq.n	8009896 <STM_NextState+0x2a>
 80098a0:	f1a1 030d 	sub.w	r3, r1, #13
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d9f6      	bls.n	8009896 <STM_NextState+0x2a>
 80098a8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d00f      	beq.n	80098d0 <STM_NextState+0x64>
 80098b0:	2907      	cmp	r1, #7
 80098b2:	d00d      	beq.n	80098d0 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80098b4:	2200      	movs	r2, #0
 80098b6:	2180      	movs	r1, #128	; 0x80
 80098b8:	f7ff ffbe 	bl	8009838 <STM_FaultProcessing>
 80098bc:	2000      	movs	r0, #0
}
 80098be:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80098c0:	2911      	cmp	r1, #17
 80098c2:	d8f7      	bhi.n	80098b4 <STM_NextState+0x48>
 80098c4:	4b21      	ldr	r3, [pc, #132]	; (800994c <STM_NextState+0xe0>)
 80098c6:	40cb      	lsrs	r3, r1
 80098c8:	07da      	lsls	r2, r3, #31
 80098ca:	d4e4      	bmi.n	8009896 <STM_NextState+0x2a>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80098cc:	2903      	cmp	r1, #3
 80098ce:	d1f1      	bne.n	80098b4 <STM_NextState+0x48>
 80098d0:	2000      	movs	r0, #0
}
 80098d2:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80098d4:	2913      	cmp	r1, #19
 80098d6:	d0de      	beq.n	8009896 <STM_NextState+0x2a>
 80098d8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80098dc:	2b05      	cmp	r3, #5
 80098de:	d1e5      	bne.n	80098ac <STM_NextState+0x40>
 80098e0:	e7d9      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80098e2:	1f8b      	subs	r3, r1, #6
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d8df      	bhi.n	80098a8 <STM_NextState+0x3c>
 80098e8:	e7d5      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80098ea:	2912      	cmp	r1, #18
 80098ec:	d1d1      	bne.n	8009892 <STM_NextState+0x26>
 80098ee:	e7d2      	b.n	8009896 <STM_NextState+0x2a>
      if ( bState == STOP )
 80098f0:	2908      	cmp	r1, #8
 80098f2:	d1d9      	bne.n	80098a8 <STM_NextState+0x3c>
 80098f4:	e7cf      	b.n	8009896 <STM_NextState+0x2a>
      if ( bState == STOP_IDLE )
 80098f6:	2909      	cmp	r1, #9
 80098f8:	d1d6      	bne.n	80098a8 <STM_NextState+0x3c>
 80098fa:	e7cc      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d0ca      	beq.n	8009896 <STM_NextState+0x2a>
 8009900:	290c      	cmp	r1, #12
 8009902:	d1d1      	bne.n	80098a8 <STM_NextState+0x3c>
 8009904:	e7c7      	b.n	8009896 <STM_NextState+0x2a>
      if ( bState == IDLE )
 8009906:	2900      	cmp	r1, #0
 8009908:	d1ce      	bne.n	80098a8 <STM_NextState+0x3c>
 800990a:	e7c4      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800990c:	2902      	cmp	r1, #2
 800990e:	d1c0      	bne.n	8009892 <STM_NextState+0x26>
 8009910:	e7c1      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8009912:	2911      	cmp	r1, #17
 8009914:	d1bd      	bne.n	8009892 <STM_NextState+0x26>
 8009916:	e7be      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8009918:	2904      	cmp	r1, #4
 800991a:	d1ba      	bne.n	8009892 <STM_NextState+0x26>
 800991c:	e7bb      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800991e:	1f0b      	subs	r3, r1, #4
 8009920:	2b01      	cmp	r3, #1
 8009922:	d8b6      	bhi.n	8009892 <STM_NextState+0x26>
 8009924:	e7b7      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009926:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800992a:	2b01      	cmp	r3, #1
 800992c:	d0b3      	beq.n	8009896 <STM_NextState+0x2a>
           || ( bState == ICLWAIT ) )
 800992e:	290c      	cmp	r1, #12
 8009930:	d1be      	bne.n	80098b0 <STM_NextState+0x44>
 8009932:	e7b0      	b.n	8009896 <STM_NextState+0x2a>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8009934:	2914      	cmp	r1, #20
 8009936:	d8b7      	bhi.n	80098a8 <STM_NextState+0x3c>
 8009938:	4b05      	ldr	r3, [pc, #20]	; (8009950 <STM_NextState+0xe4>)
 800993a:	40cb      	lsrs	r3, r1
 800993c:	07db      	lsls	r3, r3, #31
 800993e:	d4aa      	bmi.n	8009896 <STM_NextState+0x2a>
 8009940:	e7b2      	b.n	80098a8 <STM_NextState+0x3c>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8009942:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8009946:	2b07      	cmp	r3, #7
 8009948:	d1ae      	bne.n	80098a8 <STM_NextState+0x3c>
 800994a:	e7a4      	b.n	8009896 <STM_NextState+0x2a>
 800994c:	00030092 	.word	0x00030092
 8009950:	00140080 	.word	0x00140080

08009954 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8009954:	7800      	ldrb	r0, [r0, #0]
 8009956:	4770      	bx	lr

08009958 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8009958:	7803      	ldrb	r3, [r0, #0]
 800995a:	2b0b      	cmp	r3, #11
 800995c:	d001      	beq.n	8009962 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800995e:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8009960:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8009962:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8009964:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8009966:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8009968:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800996a:	2001      	movs	r0, #1
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop

08009970 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8009970:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8009972:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8009974:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop

0800997c <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800997c:	f7fe ba34 	b.w	8007de8 <FCP_Init>

08009980 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8009980:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8009984:	b192      	cbz	r2, 80099ac <UFCP_TX_IRQ_Handler+0x2c>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8009986:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
 800998a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800998e:	4603      	mov	r3, r0
 8009990:	b199      	cbz	r1, 80099ba <UFCP_TX_IRQ_Handler+0x3a>
 8009992:	2901      	cmp	r1, #1
 8009994:	d00b      	beq.n	80099ae <UFCP_TX_IRQ_Handler+0x2e>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009996:	7d40      	ldrb	r0, [r0, #21]
 8009998:	3001      	adds	r0, #1
 800999a:	4281      	cmp	r1, r0
 800999c:	dc0f      	bgt.n	80099be <UFCP_TX_IRQ_Handler+0x3e>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800999e:	1858      	adds	r0, r3, r1
    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 80099a0:	3101      	adds	r1, #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80099a2:	7d00      	ldrb	r0, [r0, #20]
 80099a4:	6290      	str	r0, [r2, #40]	; 0x28
 80099a6:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 80099aa:	4770      	bx	lr
 80099ac:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80099ae:	7d40      	ldrb	r0, [r0, #21]
 80099b0:	6290      	str	r0, [r2, #40]	; 0x28
      pBaseHandle->TxFrameLevel++;
 80099b2:	3101      	adds	r1, #1
 80099b4:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
}
 80099b8:	4770      	bx	lr
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 80099ba:	7d00      	ldrb	r0, [r0, #20]
        break;
 80099bc:	e7f8      	b.n	80099b0 <UFCP_TX_IRQ_Handler+0x30>
{
 80099be:	b430      	push	{r4, r5}
 80099c0:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
 80099c4:	6291      	str	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80099c6:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80099c8:	e9d3 0400 	ldrd	r0, r4, [r3]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 80099cc:	2500      	movs	r5, #0
 80099ce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80099d2:	6011      	str	r1, [r2, #0]
 80099d4:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80099d8:	4623      	mov	r3, r4
}
 80099da:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 80099dc:	4718      	bx	r3
 80099de:	bf00      	nop

080099e0 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 80099e0:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80099e4:	b10b      	cbz	r3, 80099ea <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80099e6:	2001      	movs	r0, #1
  }

  return ret_val;
}
 80099e8:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 80099ea:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameLevel = 0;
 80099ee:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099f2:	6813      	ldr	r3, [r2, #0]
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 80099f4:	2101      	movs	r1, #1
 80099f6:	f043 0320 	orr.w	r3, r3, #32
 80099fa:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 80099fe:	2002      	movs	r0, #2
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	4770      	bx	lr

08009a04 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8009a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8009a0a:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8009a0e:	b110      	cbz	r0, 8009a16 <UFCP_Send+0x12>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8009a10:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8009a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while ( size-- ) *dest++ = *buffer++;
 8009a16:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8009a18:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8009a1a:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8009a1c:	b2c1      	uxtb	r1, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8009a1e:	f104 0716 	add.w	r7, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d05d      	beq.n	8009ae2 <UFCP_Send+0xde>
 8009a26:	1d10      	adds	r0, r2, #4
 8009a28:	f104 051a 	add.w	r5, r4, #26
 8009a2c:	4295      	cmp	r5, r2
 8009a2e:	bf88      	it	hi
 8009a30:	42b8      	cmphi	r0, r7
 8009a32:	d86b      	bhi.n	8009b0c <UFCP_Send+0x108>
 8009a34:	2b0b      	cmp	r3, #11
 8009a36:	d969      	bls.n	8009b0c <UFCP_Send+0x108>
 8009a38:	4250      	negs	r0, r2
 8009a3a:	f000 0003 	and.w	r0, r0, #3
 8009a3e:	1cc5      	adds	r5, r0, #3
 8009a40:	42a9      	cmp	r1, r5
 8009a42:	d339      	bcc.n	8009ab8 <UFCP_Send+0xb4>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d06c      	beq.n	8009b22 <UFCP_Send+0x11e>
 8009a48:	7811      	ldrb	r1, [r2, #0]
 8009a4a:	75a1      	strb	r1, [r4, #22]
 8009a4c:	2801      	cmp	r0, #1
 8009a4e:	f1a3 0102 	sub.w	r1, r3, #2
 8009a52:	b2c9      	uxtb	r1, r1
 8009a54:	f102 0c01 	add.w	ip, r2, #1
 8009a58:	f104 0717 	add.w	r7, r4, #23
 8009a5c:	d012      	beq.n	8009a84 <UFCP_Send+0x80>
 8009a5e:	7851      	ldrb	r1, [r2, #1]
 8009a60:	75e1      	strb	r1, [r4, #23]
 8009a62:	2803      	cmp	r0, #3
 8009a64:	f1a3 0103 	sub.w	r1, r3, #3
 8009a68:	b2c9      	uxtb	r1, r1
 8009a6a:	f102 0c02 	add.w	ip, r2, #2
 8009a6e:	f104 0718 	add.w	r7, r4, #24
 8009a72:	d107      	bne.n	8009a84 <UFCP_Send+0x80>
 8009a74:	7891      	ldrb	r1, [r2, #2]
 8009a76:	7621      	strb	r1, [r4, #24]
 8009a78:	1f19      	subs	r1, r3, #4
 8009a7a:	b2c9      	uxtb	r1, r1
 8009a7c:	f102 0c03 	add.w	ip, r2, #3
 8009a80:	f104 0719 	add.w	r7, r4, #25
 8009a84:	1a1b      	subs	r3, r3, r0
 8009a86:	b2dd      	uxtb	r5, r3
 8009a88:	f100 0316 	add.w	r3, r0, #22
 8009a8c:	4402      	add	r2, r0
 8009a8e:	ea4f 0895 	mov.w	r8, r5, lsr #2
 8009a92:	18e0      	adds	r0, r4, r3
 8009a94:	2300      	movs	r3, #0
 8009a96:	3301      	adds	r3, #1
 8009a98:	b2de      	uxtb	r6, r3
 8009a9a:	f852 eb04 	ldr.w	lr, [r2], #4
 8009a9e:	f840 eb04 	str.w	lr, [r0], #4
 8009aa2:	45b0      	cmp	r8, r6
 8009aa4:	d8f7      	bhi.n	8009a96 <UFCP_Send+0x92>
 8009aa6:	f005 03fc 	and.w	r3, r5, #252	; 0xfc
 8009aaa:	1ac9      	subs	r1, r1, r3
 8009aac:	429d      	cmp	r5, r3
 8009aae:	b2c9      	uxtb	r1, r1
 8009ab0:	eb0c 0203 	add.w	r2, ip, r3
 8009ab4:	441f      	add	r7, r3
 8009ab6:	d014      	beq.n	8009ae2 <UFCP_Send+0xde>
 8009ab8:	7813      	ldrb	r3, [r2, #0]
 8009aba:	703b      	strb	r3, [r7, #0]
 8009abc:	b189      	cbz	r1, 8009ae2 <UFCP_Send+0xde>
 8009abe:	7853      	ldrb	r3, [r2, #1]
 8009ac0:	707b      	strb	r3, [r7, #1]
 8009ac2:	2901      	cmp	r1, #1
 8009ac4:	d00d      	beq.n	8009ae2 <UFCP_Send+0xde>
 8009ac6:	7893      	ldrb	r3, [r2, #2]
 8009ac8:	70bb      	strb	r3, [r7, #2]
 8009aca:	2902      	cmp	r1, #2
 8009acc:	d009      	beq.n	8009ae2 <UFCP_Send+0xde>
 8009ace:	78d3      	ldrb	r3, [r2, #3]
 8009ad0:	70fb      	strb	r3, [r7, #3]
 8009ad2:	2903      	cmp	r1, #3
 8009ad4:	d005      	beq.n	8009ae2 <UFCP_Send+0xde>
 8009ad6:	7913      	ldrb	r3, [r2, #4]
 8009ad8:	713b      	strb	r3, [r7, #4]
 8009ada:	2904      	cmp	r1, #4
 8009adc:	d001      	beq.n	8009ae2 <UFCP_Send+0xde>
 8009ade:	7953      	ldrb	r3, [r2, #5]
 8009ae0:	717b      	strb	r3, [r7, #5]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8009ae2:	f104 0014 	add.w	r0, r4, #20
 8009ae6:	f7fe f995 	bl	8007e14 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8009aea:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8009aee:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009af8:	6813      	ldr	r3, [r2, #0]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8009afa:	2101      	movs	r1, #1
 8009afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b00:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
 8009b04:	2002      	movs	r0, #2
 8009b06:	6013      	str	r3, [r2, #0]
}
 8009b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b0c:	3101      	adds	r1, #1
 8009b0e:	4411      	add	r1, r2
 8009b10:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8009b14:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009b18:	f803 0f01 	strb.w	r0, [r3, #1]!
 8009b1c:	428a      	cmp	r2, r1
 8009b1e:	d1f9      	bne.n	8009b14 <UFCP_Send+0x110>
 8009b20:	e7df      	b.n	8009ae2 <UFCP_Send+0xde>
 8009b22:	4694      	mov	ip, r2
 8009b24:	e7ae      	b.n	8009a84 <UFCP_Send+0x80>
 8009b26:	bf00      	nop

08009b28 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8009b28:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8009b2c:	b1b3      	cbz	r3, 8009b5c <UFCP_RX_IRQ_Handler+0x34>
{
 8009b2e:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8009b30:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
 8009b34:	4604      	mov	r4, r0
{
 8009b36:	b083      	sub	sp, #12
    uint8_t rx_byte = (uint8_t) rx_data;
 8009b38:	b2c8      	uxtb	r0, r1
    switch ( pBaseHandle->RxFrameLevel )
 8009b3a:	b1e3      	cbz	r3, 8009b76 <UFCP_RX_IRQ_Handler+0x4e>
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d00f      	beq.n	8009b60 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8009b40:	f894 109a 	ldrb.w	r1, [r4, #154]	; 0x9a
 8009b44:	3101      	adds	r1, #1
 8009b46:	428b      	cmp	r3, r1
 8009b48:	dc1f      	bgt.n	8009b8a <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009b4a:	18e1      	adds	r1, r4, r3
          pBaseHandle->RxFrameLevel++;
 8009b4c:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009b4e:	f881 0099 	strb.w	r0, [r1, #153]	; 0x99
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009b52:	4823      	ldr	r0, [pc, #140]	; (8009be0 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrameLevel++;
 8009b54:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8009b58:	b003      	add	sp, #12
 8009b5a:	bd30      	pop	{r4, r5, pc}
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009b5c:	4820      	ldr	r0, [pc, #128]	; (8009be0 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8009b5e:	4770      	bx	lr
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8009b60:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8009b62:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009b66:	481e      	ldr	r0, [pc, #120]	; (8009be0 <UFCP_RX_IRQ_Handler+0xb8>)
        pBaseHandle->RxFrameLevel++;
 8009b68:	bf54      	ite	pl
 8009b6a:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8009b6c:	2300      	movmi	r3, #0
 8009b6e:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8009b72:	b003      	add	sp, #12
 8009b74:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8009b76:	8a21      	ldrh	r1, [r4, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8009b78:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8009b7c:	4819      	ldr	r0, [pc, #100]	; (8009be4 <UFCP_RX_IRQ_Handler+0xbc>)
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8009b7e:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8009b86:	b003      	add	sp, #12
 8009b88:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8009b8a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8009b8e:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b92:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 8009b94:	2200      	movs	r2, #0
 8009b96:	f023 0320 	bic.w	r3, r3, #32
 8009b9a:	8262      	strh	r2, [r4, #18]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009b9c:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8009ba0:	600b      	str	r3, [r1, #0]
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009ba2:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009ba6:	f7fe f935 	bl	8007e14 <FCP_CalcCRC>
 8009baa:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8009bae:	4283      	cmp	r3, r0
 8009bb0:	d10a      	bne.n	8009bc8 <UFCP_RX_IRQ_Handler+0xa0>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8009bb2:	6820      	ldr	r0, [r4, #0]
 8009bb4:	68a5      	ldr	r5, [r4, #8]
 8009bb6:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8009bba:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8009bbe:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8009bc2:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8009bc4:	4808      	ldr	r0, [pc, #32]	; (8009be8 <UFCP_RX_IRQ_Handler+0xc0>)
 8009bc6:	e7c7      	b.n	8009b58 <UFCP_RX_IRQ_Handler+0x30>
            error_code = FCP_MSG_RX_BAD_CRC;
 8009bc8:	aa02      	add	r2, sp, #8
 8009bca:	230a      	movs	r3, #10
 8009bcc:	f802 3d01 	strb.w	r3, [r2, #-1]!
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	21ff      	movs	r1, #255	; 0xff
 8009bd6:	f7ff ff15 	bl	8009a04 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8009bda:	4803      	ldr	r0, [pc, #12]	; (8009be8 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8009bdc:	e7bc      	b.n	8009b58 <UFCP_RX_IRQ_Handler+0x30>
 8009bde:	bf00      	nop
 8009be0:	0800a208 	.word	0x0800a208
 8009be4:	0800a20a 	.word	0x0800a20a
 8009be8:	0800a20c 	.word	0x0800a20c

08009bec <UFCP_OVR_IRQ_Handler>:
{
 8009bec:	b500      	push	{lr}
 8009bee:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8009bf0:	aa02      	add	r2, sp, #8
 8009bf2:	2308      	movs	r3, #8
 8009bf4:	f802 3d01 	strb.w	r3, [r2, #-1]!
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009bf8:	21ff      	movs	r1, #255	; 0xff
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f7ff ff02 	bl	8009a04 <UFCP_Send>
}
 8009c00:	b003      	add	sp, #12
 8009c02:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c06:	bf00      	nop

08009c08 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8009c0e:	4770      	bx	lr

08009c10 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8009c10:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009c12:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8009c14:	8542      	strh	r2, [r0, #42]	; 0x2a
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8009c16:	7303      	strb	r3, [r0, #12]
  pHandle->_Super.hElAngle = 0;
 8009c18:	e9c0 3300 	strd	r3, r3, [r0]
  pHandle->_Super.hMecAccelUnitP = 0;
 8009c1c:	8143      	strh	r3, [r0, #10]
  pHandle->wElSpeedDpp32 = 0;
 8009c1e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pHandle->hRemainingStep = 0u;
 8009c22:	8483      	strh	r3, [r0, #36]	; 0x24
  pHandle->hElAngleAccu = 0;
 8009c24:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->bTransitionStarted = false;
 8009c26:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  pHandle->bTransitionEnded = false;
 8009c2a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  pHandle->bTransitionLocked = false;
 8009c2e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

  pHandle->bCopyObserver = false;
 8009c32:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8009c36:	4770      	bx	lr

08009c38 <VSS_Init>:
{
 8009c38:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8009c3a:	f7ff ffe9 	bl	8009c10 <VSS_Clear>
}
 8009c3e:	bd08      	pop	{r3, pc}

08009c40 <VSS_SetMecAngle>:
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
 8009c40:	8581      	strh	r1, [r0, #44]	; 0x2c
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
  pHandle->_Super.hElAngle = hMecAngle;
 8009c42:	8001      	strh	r1, [r0, #0]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8009c44:	7b43      	ldrb	r3, [r0, #13]
 8009c46:	fb91 f1f3 	sdiv	r1, r1, r3
 8009c4a:	8041      	strh	r1, [r0, #2]
}
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop

08009c50 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8009c50:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8009c54:	bb73      	cbnz	r3, 8009cb4 <VSS_SetMecAcceleration+0x64>
{
 8009c56:	b470      	push	{r4, r5, r6}
 8009c58:	8ac5      	ldrh	r5, [r0, #22]
 8009c5a:	6983      	ldr	r3, [r0, #24]
 8009c5c:	7b44      	ldrb	r4, [r0, #13]
 8009c5e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009c62:	006d      	lsls	r5, r5, #1
 8009c64:	fb03 f301 	mul.w	r3, r3, r1
 8009c68:	fb93 f3f5 	sdiv	r3, r3, r5
  {
    if ( hDurationms == 0u )
 8009c6c:	b1d2      	cbz	r2, 8009ca4 <VSS_SetMecAcceleration+0x54>
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
    }
    else
    {
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8009c6e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8009c70:	4d11      	ldr	r5, [pc, #68]	; (8009cb8 <VSS_SetMecAcceleration+0x68>)
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;

      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009c72:	84c1      	strh	r1, [r0, #38]	; 0x26
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009c74:	fb02 f206 	mul.w	r2, r2, r6
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8009c78:	fba5 1202 	umull	r1, r2, r5, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009c7c:	f3c2 128f 	ubfx	r2, r2, #6, #16
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8009c80:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8009c84:	fb91 f5f4 	sdiv	r5, r1, r4
      hNbrStep++;
 8009c88:	3201      	adds	r2, #1
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009c8a:	1b5b      	subs	r3, r3, r5
      hNbrStep++;
 8009c8c:	b292      	uxth	r2, r2
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009c8e:	041b      	lsls	r3, r3, #16

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009c90:	0409      	lsls	r1, r1, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009c92:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8009c96:	fb04 f303 	mul.w	r3, r4, r3
      pHandle->hRemainingStep = hNbrStep;
 8009c9a:	8482      	strh	r2, [r0, #36]	; 0x24
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009c9c:	e9c0 3107 	strd	r3, r1, [r0, #28]
    }
  }
}
 8009ca0:	bc70      	pop	{r4, r5, r6}
 8009ca2:	4770      	bx	lr
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009ca4:	fb13 f304 	smulbb	r3, r3, r4
 8009ca8:	80c3      	strh	r3, [r0, #6]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009caa:	8081      	strh	r1, [r0, #4]
      pHandle->hRemainingStep = 0u;
 8009cac:	8482      	strh	r2, [r0, #36]	; 0x24
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009cae:	84c1      	strh	r1, [r0, #38]	; 0x26
}
 8009cb0:	bc70      	pop	{r4, r5, r6}
 8009cb2:	4770      	bx	lr
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	10624dd3 	.word	0x10624dd3

08009cbc <RUC_SetPhaseDurationms>:
 8009cbc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009cc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cc4:	818a      	strh	r2, [r1, #12]
 8009cc6:	4770      	bx	lr

08009cc8 <RUC_SetPhaseFinalMecSpeedUnit>:
 8009cc8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009ccc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cd0:	81ca      	strh	r2, [r1, #14]
 8009cd2:	4770      	bx	lr

08009cd4 <RUC_SetPhaseFinalTorque>:
 8009cd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009cd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cdc:	820a      	strh	r2, [r1, #16]
 8009cde:	4770      	bx	lr

08009ce0 <RUC_GetPhaseDurationms>:
 8009ce0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ce8:	8988      	ldrh	r0, [r1, #12]
 8009cea:	4770      	bx	lr

08009cec <RUC_GetPhaseFinalMecSpeedUnit>:
 8009cec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009cf0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cf4:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop

08009cfc <RUC_GetPhaseFinalTorque>:
 8009cfc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009d00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d04:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop

08009d0c <RUC_GetNumberOfPhases>:
 8009d0c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop

08009d14 <__libc_init_array>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4e0d      	ldr	r6, [pc, #52]	; (8009d4c <__libc_init_array+0x38>)
 8009d18:	4c0d      	ldr	r4, [pc, #52]	; (8009d50 <__libc_init_array+0x3c>)
 8009d1a:	1ba4      	subs	r4, r4, r6
 8009d1c:	10a4      	asrs	r4, r4, #2
 8009d1e:	2500      	movs	r5, #0
 8009d20:	42a5      	cmp	r5, r4
 8009d22:	d109      	bne.n	8009d38 <__libc_init_array+0x24>
 8009d24:	4e0b      	ldr	r6, [pc, #44]	; (8009d54 <__libc_init_array+0x40>)
 8009d26:	4c0c      	ldr	r4, [pc, #48]	; (8009d58 <__libc_init_array+0x44>)
 8009d28:	f000 f820 	bl	8009d6c <_init>
 8009d2c:	1ba4      	subs	r4, r4, r6
 8009d2e:	10a4      	asrs	r4, r4, #2
 8009d30:	2500      	movs	r5, #0
 8009d32:	42a5      	cmp	r5, r4
 8009d34:	d105      	bne.n	8009d42 <__libc_init_array+0x2e>
 8009d36:	bd70      	pop	{r4, r5, r6, pc}
 8009d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d3c:	4798      	blx	r3
 8009d3e:	3501      	adds	r5, #1
 8009d40:	e7ee      	b.n	8009d20 <__libc_init_array+0xc>
 8009d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d46:	4798      	blx	r3
 8009d48:	3501      	adds	r5, #1
 8009d4a:	e7f2      	b.n	8009d32 <__libc_init_array+0x1e>
 8009d4c:	0800a230 	.word	0x0800a230
 8009d50:	0800a230 	.word	0x0800a230
 8009d54:	0800a230 	.word	0x0800a230
 8009d58:	0800a234 	.word	0x0800a234

08009d5c <memset>:
 8009d5c:	4402      	add	r2, r0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d100      	bne.n	8009d66 <memset+0xa>
 8009d64:	4770      	bx	lr
 8009d66:	f803 1b01 	strb.w	r1, [r3], #1
 8009d6a:	e7f9      	b.n	8009d60 <memset+0x4>

08009d6c <_init>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr

08009d78 <_fini>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	bf00      	nop
 8009d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7e:	bc08      	pop	{r3}
 8009d80:	469e      	mov	lr, r3
 8009d82:	4770      	bx	lr
