
SumoBot_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800ad58  0800ad58  0001ad58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adcc  0800adcc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800add4  0800add4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800add4  0800add4  0001add4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800addc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002044  20000014  0800adf0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002058  0800adf0  00022058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027057  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041a1  00000000  00000000  0004709b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002140  00000000  00000000  0004b240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f58  00000000  00000000  0004d380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b52  00000000  00000000  0004f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019fb1  00000000  00000000  00072e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed8d1  00000000  00000000  0008cddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017a6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f60  00000000  00000000  0017a728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ad40 	.word	0x0800ad40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	0800ad40 	.word	0x0800ad40

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052a:	2003      	movs	r0, #3
 800052c:	f000 ff89 	bl	8001442 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000530:	2000      	movs	r0, #0
 8000532:	f00a fabf 	bl	800aab4 <HAL_InitTick>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	e001      	b.n	8000546 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000542:	f009 feb7 	bl	800a2b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000546:	79fb      	ldrb	r3, [r7, #7]

}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_IncTick+0x1c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_IncTick+0x20>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4413      	add	r3, r2
 800055e:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x1c>)
 8000560:	6013      	str	r3, [r2, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	20001938 	.word	0x20001938
 8000570:	20000004 	.word	0x20000004

08000574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return uwTick;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <HAL_GetTick+0x14>)
 800057a:	681b      	ldr	r3, [r3, #0]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20001938 	.word	0x20001938

0800058c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	609a      	str	r2, [r3, #8]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	431a      	orrs	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	609a      	str	r2, [r3, #8]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80005f4:	b490      	push	{r4, r7}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3360      	adds	r3, #96	; 0x60
 8000606:	461a      	mov	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <LL_ADC_SetOffset+0x40>)
 8000614:	4013      	ands	r3, r2
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	430a      	orrs	r2, r1
 8000620:	4313      	orrs	r3, r2
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bc90      	pop	{r4, r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	03fff000 	.word	0x03fff000

08000638 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000638:	b490      	push	{r4, r7}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3360      	adds	r3, #96	; 0x60
 8000646:	461a      	mov	r2, r3
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bc90      	pop	{r4, r7}
 800065e:	4770      	bx	lr

08000660 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000660:	b490      	push	{r4, r7}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3360      	adds	r3, #96	; 0x60
 8000670:	461a      	mov	r2, r3
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800067a:	6823      	ldr	r3, [r4, #0]
 800067c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bc90      	pop	{r4, r7}
 800068e:	4770      	bx	lr

08000690 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000690:	b490      	push	{r4, r7}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3360      	adds	r3, #96	; 0x60
 80006a0:	461a      	mov	r2, r3
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006aa:	6823      	ldr	r3, [r4, #0]
 80006ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc90      	pop	{r4, r7}
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80006c0:	b490      	push	{r4, r7}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3360      	adds	r3, #96	; 0x60
 80006d0:	461a      	mov	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc90      	pop	{r4, r7}
 80006ee:	4770      	bx	lr

080006f0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	431a      	orrs	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	615a      	str	r2, [r3, #20]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000716:	b490      	push	{r4, r7}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3330      	adds	r3, #48	; 0x30
 8000726:	461a      	mov	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	f003 030c 	and.w	r3, r3, #12
 8000732:	4413      	add	r3, r2
 8000734:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000736:	6822      	ldr	r2, [r4, #0]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	f003 031f 	and.w	r3, r3, #31
 800073e:	211f      	movs	r1, #31
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	43db      	mvns	r3, r3
 8000746:	401a      	ands	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	0e9b      	lsrs	r3, r3, #26
 800074c:	f003 011f 	and.w	r1, r3, #31
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bc90      	pop	{r4, r7}
 8000766:	4770      	bx	lr

08000768 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000768:	b490      	push	{r4, r7}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3314      	adds	r3, #20
 8000778:	461a      	mov	r2, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	0e5b      	lsrs	r3, r3, #25
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	4413      	add	r3, r2
 8000786:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000788:	6822      	ldr	r2, [r4, #0]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	0d1b      	lsrs	r3, r3, #20
 800078e:	f003 031f 	and.w	r3, r3, #31
 8000792:	2107      	movs	r1, #7
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	401a      	ands	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	0d1b      	lsrs	r3, r3, #20
 80007a0:	f003 031f 	and.w	r3, r3, #31
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc90      	pop	{r4, r7}
 80007b6:	4770      	bx	lr

080007b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007d0:	43db      	mvns	r3, r3
 80007d2:	401a      	ands	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0318 	and.w	r3, r3, #24
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80007dc:	40d9      	lsrs	r1, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	400b      	ands	r3, r1
 80007e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80007e6:	431a      	orrs	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	0007ffff 	.word	0x0007ffff

08000800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	6093      	str	r3, [r2, #8]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000838:	d101      	bne.n	800083e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800083a:	2301      	movs	r3, #1
 800083c:	e000      	b.n	8000840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800085c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000860:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000888:	d101      	bne.n	800088e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <LL_ADC_IsEnabled+0x18>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <LL_ADC_IsEnabled+0x1a>
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d101      	bne.n	80008da <LL_ADC_REG_IsConversionOngoing+0x18>
 80008d6:	2301      	movs	r3, #1
 80008d8:	e000      	b.n	80008dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d101      	bne.n	8000900 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80008fc:	2301      	movs	r3, #1
 80008fe:	e000      	b.n	8000902 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e16b      	b.n	8000c02 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000934:	2b00      	cmp	r3, #0
 8000936:	d109      	bne.n	800094c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f009 fce5 	bl	800a308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff67 	bl	8000824 <LL_ADC_IsDeepPowerDownEnabled>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d004      	beq.n	8000966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff4d 	bl	8000800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff82 	bl	8000874 <LL_ADC_IsInternalRegulatorEnabled>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d113      	bne.n	800099e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff66 	bl	800084c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000980:	4ba2      	ldr	r3, [pc, #648]	; (8000c0c <HAL_ADC_Init+0x2fc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	099b      	lsrs	r3, r3, #6
 8000986:	4aa2      	ldr	r2, [pc, #648]	; (8000c10 <HAL_ADC_Init+0x300>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	099b      	lsrs	r3, r3, #6
 800098e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000990:	e002      	b.n	8000998 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3b01      	subs	r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f9      	bne.n	8000992 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff66 	bl	8000874 <LL_ADC_IsInternalRegulatorEnabled>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10d      	bne.n	80009ca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b2:	f043 0210 	orr.w	r2, r3, #16
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f043 0201 	orr.w	r2, r3, #1
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff77 	bl	80008c2 <LL_ADC_REG_IsConversionOngoing>
 80009d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8106 	bne.w	8000bf0 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8102 	bne.w	8000bf0 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80009f4:	f043 0202 	orr.w	r2, r3, #2
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff4b 	bl	800089c <LL_ADC_IsEnabled>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d111      	bne.n	8000a30 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a10:	f7ff ff44 	bl	800089c <LL_ADC_IsEnabled>
 8000a14:	4604      	mov	r4, r0
 8000a16:	487f      	ldr	r0, [pc, #508]	; (8000c14 <HAL_ADC_Init+0x304>)
 8000a18:	f7ff ff40 	bl	800089c <LL_ADC_IsEnabled>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d105      	bne.n	8000a30 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	487b      	ldr	r0, [pc, #492]	; (8000c18 <HAL_ADC_Init+0x308>)
 8000a2c:	f7ff fdae 	bl	800058c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7f5b      	ldrb	r3, [r3, #29]
 8000a34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a3a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000a40:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000a46:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a4e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000a50:	4313      	orrs	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d106      	bne.n	8000a6c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a62:	3b01      	subs	r3, #1
 8000a64:	045b      	lsls	r3, r3, #17
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	4b63      	ldr	r3, [pc, #396]	; (8000c1c <HAL_ADC_Init+0x30c>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	69b9      	ldr	r1, [r7, #24]
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff03 	bl	80008c2 <LL_ADC_REG_IsConversionOngoing>
 8000abc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff10 	bl	80008e8 <LL_ADC_INJ_IsConversionOngoing>
 8000ac8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d16d      	bne.n	8000bac <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d16a      	bne.n	8000bac <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ada:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ae2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000af2:	f023 0302 	bic.w	r3, r3, #2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	69b9      	ldr	r1, [r7, #24]
 8000afc:	430b      	orrs	r3, r1
 8000afe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d017      	beq.n	8000b38 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000b20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6911      	ldr	r1, [r2, #16]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	430b      	orrs	r3, r1
 8000b32:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000b36:	e013      	b.n	8000b60 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b5c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d118      	bne.n	8000b9c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b74:	f023 0304 	bic.w	r3, r3, #4
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000b80:	4311      	orrs	r1, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000b86:	4311      	orrs	r1, r2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0201 	orr.w	r2, r2, #1
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	e007      	b.n	8000bac <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 0201 	bic.w	r2, r2, #1
 8000baa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10c      	bne.n	8000bce <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f023 010f 	bic.w	r1, r3, #15
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a1b      	ldr	r3, [r3, #32]
 8000bc2:	1e5a      	subs	r2, r3, #1
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
 8000bcc:	e007      	b.n	8000bde <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 020f 	bic.w	r2, r2, #15
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be2:	f023 0303 	bic.w	r3, r3, #3
 8000be6:	f043 0201 	orr.w	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	65da      	str	r2, [r3, #92]	; 0x5c
 8000bee:	e007      	b.n	8000c00 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf4:	f043 0210 	orr.w	r2, r3, #16
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd90      	pop	{r4, r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	053e2d63 	.word	0x053e2d63
 8000c14:	50000100 	.word	0x50000100
 8000c18:	50000300 	.word	0x50000300
 8000c1c:	fff04007 	.word	0xfff04007

08000c20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0a6      	sub	sp, #152	; 0x98
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_ADC_ConfigChannel+0x22>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e348      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x6b4>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe37 	bl	80008c2 <LL_ADC_REG_IsConversionOngoing>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 832d 	bne.w	80012b6 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	6859      	ldr	r1, [r3, #4]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f7ff fd54 	bl	8000716 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fe25 	bl	80008c2 <LL_ADC_REG_IsConversionOngoing>
 8000c78:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe31 	bl	80008e8 <LL_ADC_INJ_IsConversionOngoing>
 8000c86:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 817b 	bne.w	8000f8a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f040 8176 	bne.w	8000f8a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ca6:	d10f      	bne.n	8000cc8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff fd58 	bl	8000768 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd15 	bl	80006f0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000cc6:	e00e      	b.n	8000ce6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6819      	ldr	r1, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f7ff fd47 	bl	8000768 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fd05 	bl	80006f0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	695a      	ldr	r2, [r3, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d022      	beq.n	8000d4e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6919      	ldr	r1, [r3, #16]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d18:	f7ff fc6c 	bl	80005f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	6919      	ldr	r1, [r3, #16]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f7ff fcb1 	bl	8000690 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6818      	ldr	r0, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	6919      	ldr	r1, [r3, #16]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	7f1b      	ldrb	r3, [r3, #28]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d102      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x124>
 8000d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d42:	e000      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x126>
 8000d44:	2300      	movs	r3, #0
 8000d46:	461a      	mov	r2, r3
 8000d48:	f7ff fcba 	bl	80006c0 <LL_ADC_SetOffsetSaturation>
 8000d4c:	e11d      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fc6f 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10a      	bne.n	8000d7a <HAL_ADC_ConfigChannel+0x15a>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fc64 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	0e9b      	lsrs	r3, r3, #26
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	e012      	b.n	8000da0 <HAL_ADC_ConfigChannel+0x180>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fc59 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d98:	fab3 f383 	clz	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d105      	bne.n	8000db8 <HAL_ADC_ConfigChannel+0x198>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0e9b      	lsrs	r3, r3, #26
 8000db2:	f003 031f 	and.w	r3, r3, #31
 8000db6:	e00a      	b.n	8000dce <HAL_ADC_ConfigChannel+0x1ae>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d106      	bne.n	8000de0 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fc40 	bl	8000660 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fc26 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10a      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0x1ec>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fc1b 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	0e9b      	lsrs	r3, r3, #26
 8000e06:	f003 021f 	and.w	r2, r3, #31
 8000e0a:	e010      	b.n	8000e2e <HAL_ADC_ConfigChannel+0x20e>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fc10 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e26:	fab3 f383 	clz	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d105      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x226>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	0e9b      	lsrs	r3, r3, #26
 8000e40:	f003 031f 	and.w	r3, r3, #31
 8000e44:	e00a      	b.n	8000e5c <HAL_ADC_ConfigChannel+0x23c>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e56:	fab3 f383 	clz	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d106      	bne.n	8000e6e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	2101      	movs	r1, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fbf9 	bl	8000660 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2102      	movs	r1, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fbdf 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10a      	bne.n	8000e9a <HAL_ADC_ConfigChannel+0x27a>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fbd4 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	0e9b      	lsrs	r3, r3, #26
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	e010      	b.n	8000ebc <HAL_ADC_ConfigChannel+0x29c>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fbc9 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb4:	fab3 f383 	clz	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x2b4>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	0e9b      	lsrs	r3, r3, #26
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	e00a      	b.n	8000eea <HAL_ADC_ConfigChannel+0x2ca>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000edc:	fa93 f3a3 	rbit	r3, r3
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ee4:	fab3 f383 	clz	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d106      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fbb2 	bl	8000660 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2103      	movs	r1, #3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb98 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x308>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2103      	movs	r1, #3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb8d 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	0e9b      	lsrs	r3, r3, #26
 8000f22:	f003 021f 	and.w	r2, r3, #31
 8000f26:	e010      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x32a>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fb82 	bl	8000638 <LL_ADC_GetOffsetChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f42:	fab3 f383 	clz	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d105      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x342>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	0e9b      	lsrs	r3, r3, #26
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	e00a      	b.n	8000f78 <HAL_ADC_ConfigChannel+0x358>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d106      	bne.n	8000f8a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2200      	movs	r2, #0
 8000f82:	2103      	movs	r1, #3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fb6b 	bl	8000660 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fc84 	bl	800089c <LL_ADC_IsEnabled>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 810c 	bne.w	80011b4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f7ff fc05 	bl	80007b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4aab      	ldr	r2, [pc, #684]	; (8001260 <HAL_ADC_ConfigChannel+0x640>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f040 80fd 	bne.w	80011b4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x3c2>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0e9b      	lsrs	r3, r3, #26
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	2b09      	cmp	r3, #9
 8000fd8:	bf94      	ite	ls
 8000fda:	2301      	movls	r3, #1
 8000fdc:	2300      	movhi	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	e012      	b.n	8001008 <HAL_ADC_ConfigChannel+0x3e8>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	bf94      	ite	ls
 8001002:	2301      	movls	r3, #1
 8001004:	2300      	movhi	r3, #0
 8001006:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001008:	2b00      	cmp	r3, #0
 800100a:	d064      	beq.n	80010d6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001014:	2b00      	cmp	r3, #0
 8001016:	d107      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x408>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0e9b      	lsrs	r3, r3, #26
 800101e:	3301      	adds	r3, #1
 8001020:	069b      	lsls	r3, r3, #26
 8001022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001026:	e00e      	b.n	8001046 <HAL_ADC_ConfigChannel+0x426>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3301      	adds	r3, #1
 8001040:	069b      	lsls	r3, r3, #26
 8001042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x446>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	0e9b      	lsrs	r3, r3, #26
 8001058:	3301      	adds	r3, #1
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	e010      	b.n	8001088 <HAL_ADC_ConfigChannel+0x468>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	fab3 f383 	clz	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	3301      	adds	r3, #1
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	ea42 0103 	orr.w	r1, r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10a      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x48e>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0e9b      	lsrs	r3, r3, #26
 800109e:	3301      	adds	r3, #1
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	051b      	lsls	r3, r3, #20
 80010ac:	e011      	b.n	80010d2 <HAL_ADC_ConfigChannel+0x4b2>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	3301      	adds	r3, #1
 80010c6:	f003 021f 	and.w	r2, r3, #31
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010d2:	430b      	orrs	r3, r1
 80010d4:	e069      	b.n	80011aa <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d107      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x4d2>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	0e9b      	lsrs	r3, r3, #26
 80010e8:	3301      	adds	r3, #1
 80010ea:	069b      	lsls	r3, r3, #26
 80010ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010f0:	e00e      	b.n	8001110 <HAL_ADC_ConfigChannel+0x4f0>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	61fb      	str	r3, [r7, #28]
  return result;
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	3301      	adds	r3, #1
 800110a:	069b      	lsls	r3, r3, #26
 800110c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001118:	2b00      	cmp	r3, #0
 800111a:	d109      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x510>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0e9b      	lsrs	r3, r3, #26
 8001122:	3301      	adds	r3, #1
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	e010      	b.n	8001152 <HAL_ADC_ConfigChannel+0x532>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	617b      	str	r3, [r7, #20]
  return result;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	3301      	adds	r3, #1
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2101      	movs	r1, #1
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	ea42 0103 	orr.w	r1, r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10d      	bne.n	800117e <HAL_ADC_ConfigChannel+0x55e>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0e9b      	lsrs	r3, r3, #26
 8001168:	3301      	adds	r3, #1
 800116a:	f003 021f 	and.w	r2, r3, #31
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	3b1e      	subs	r3, #30
 8001176:	051b      	lsls	r3, r3, #20
 8001178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117c:	e014      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x588>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	60fb      	str	r3, [r7, #12]
  return result;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	3301      	adds	r3, #1
 8001196:	f003 021f 	and.w	r2, r3, #31
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	3b1e      	subs	r3, #30
 80011a2:	051b      	lsls	r3, r3, #20
 80011a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011a8:	430b      	orrs	r3, r1
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	6892      	ldr	r2, [r2, #8]
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fada 	bl	8000768 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_ADC_ConfigChannel+0x644>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 8083 	beq.w	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011c2:	4829      	ldr	r0, [pc, #164]	; (8001268 <HAL_ADC_ConfigChannel+0x648>)
 80011c4:	f7ff fa08 	bl	80005d8 <LL_ADC_GetCommonPathInternalCh>
 80011c8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <HAL_ADC_ConfigChannel+0x64c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d004      	beq.n	80011e0 <HAL_ADC_ConfigChannel+0x5c0>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a25      	ldr	r2, [pc, #148]	; (8001270 <HAL_ADC_ConfigChannel+0x650>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d126      	bne.n	800122e <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d120      	bne.n	800122e <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f4:	d168      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011fe:	4619      	mov	r1, r3
 8001200:	4819      	ldr	r0, [pc, #100]	; (8001268 <HAL_ADC_ConfigChannel+0x648>)
 8001202:	f7ff f9d6 	bl	80005b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_ADC_ConfigChannel+0x654>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	099b      	lsrs	r3, r3, #6
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <HAL_ADC_ConfigChannel+0x658>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	099a      	lsrs	r2, r3, #6
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800121e:	e002      	b.n	8001226 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3b01      	subs	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800122c:	e04c      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_ADC_ConfigChannel+0x65c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d125      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x664>
 8001238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800123c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d11f      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_ADC_ConfigChannel+0x660>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d03c      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800124e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001256:	4619      	mov	r1, r3
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <HAL_ADC_ConfigChannel+0x648>)
 800125a:	f7ff f9aa 	bl	80005b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800125e:	e033      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
 8001260:	407f0000 	.word	0x407f0000
 8001264:	80080000 	.word	0x80080000
 8001268:	50000300 	.word	0x50000300
 800126c:	c3210000 	.word	0xc3210000
 8001270:	90c00010 	.word	0x90c00010
 8001274:	20000010 	.word	0x20000010
 8001278:	053e2d63 	.word	0x053e2d63
 800127c:	c7520000 	.word	0xc7520000
 8001280:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_ADC_ConfigChannel+0x6bc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11c      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800128e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_ADC_ConfigChannel+0x6c0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d011      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <HAL_ADC_ConfigChannel+0x6c4>)
 80012b0:	f7ff f97f 	bl	80005b2 <LL_ADC_SetCommonPathInternalCh>
 80012b4:	e008      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	f043 0220 	orr.w	r2, r3, #32
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80012d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3798      	adds	r7, #152	; 0x98
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	cb840000 	.word	0xcb840000
 80012e0:	50000100 	.word	0x50000100
 80012e4:	50000300 	.word	0x50000300

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff4c 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001466:	f7ff ff63 	bl	8001330 <__NVIC_GetPriorityGrouping>
 800146a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f7ff ffb3 	bl	80013dc <NVIC_EncodePriority>
 8001476:	4602      	mov	r2, r0
 8001478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff82 	bl	8001388 <__NVIC_SetPriority>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff56 	bl	800134c <__NVIC_EnableIRQ>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e054      	b.n	8001564 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7f5b      	ldrb	r3, [r3, #29]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f008 ff8a 	bl	800a3e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <HAL_CRC_Init+0xc4>)
 80014e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0218 	bic.w	r2, r2, #24
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	e00c      	b.n	8001512 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	461a      	mov	r2, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f834 	bl	8001570 <HAL_CRCEx_Polynomial_Set>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e028      	b.n	8001564 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	795b      	ldrb	r3, [r3, #5]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	e004      	b.n	8001530 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6912      	ldr	r2, [r2, #16]
 800152e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	04c11db7 	.word	0x04c11db7

08001570 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001580:	231f      	movs	r3, #31
 8001582:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001584:	bf00      	nop
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	613a      	str	r2, [r7, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b18      	cmp	r3, #24
 80015a8:	d846      	bhi.n	8001638 <HAL_CRCEx_Polynomial_Set+0xc8>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	0800163f 	.word	0x0800163f
 80015b4:	08001639 	.word	0x08001639
 80015b8:	08001639 	.word	0x08001639
 80015bc:	08001639 	.word	0x08001639
 80015c0:	08001639 	.word	0x08001639
 80015c4:	08001639 	.word	0x08001639
 80015c8:	08001639 	.word	0x08001639
 80015cc:	08001639 	.word	0x08001639
 80015d0:	0800162d 	.word	0x0800162d
 80015d4:	08001639 	.word	0x08001639
 80015d8:	08001639 	.word	0x08001639
 80015dc:	08001639 	.word	0x08001639
 80015e0:	08001639 	.word	0x08001639
 80015e4:	08001639 	.word	0x08001639
 80015e8:	08001639 	.word	0x08001639
 80015ec:	08001639 	.word	0x08001639
 80015f0:	08001621 	.word	0x08001621
 80015f4:	08001639 	.word	0x08001639
 80015f8:	08001639 	.word	0x08001639
 80015fc:	08001639 	.word	0x08001639
 8001600:	08001639 	.word	0x08001639
 8001604:	08001639 	.word	0x08001639
 8001608:	08001639 	.word	0x08001639
 800160c:	08001639 	.word	0x08001639
 8001610:	08001615 	.word	0x08001615
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b06      	cmp	r3, #6
 8001618:	d913      	bls.n	8001642 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800161e:	e010      	b.n	8001642 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b07      	cmp	r3, #7
 8001624:	d90f      	bls.n	8001646 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800162a:	e00c      	b.n	8001646 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	d90b      	bls.n	800164a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001636:	e008      	b.n	800164a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	75fb      	strb	r3, [r7, #23]
      break;
 800163c:	e006      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800163e:	bf00      	nop
 8001640:	e004      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001642:	bf00      	nop
 8001644:	e002      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001646:	bf00      	nop
 8001648:	e000      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800164a:	bf00      	nop
  }
  if (status == HAL_OK)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 0118 	bic.w	r1, r3, #24
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	430a      	orrs	r2, r1
 800166c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800166e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001670:	4618      	mov	r0, r3
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e08d      	b.n	80017aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_DMA_Init+0x138>)
 8001696:	429a      	cmp	r2, r3
 8001698:	d80f      	bhi.n	80016ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <HAL_DMA_Init+0x13c>)
 80016a2:	4413      	add	r3, r2
 80016a4:	4a45      	ldr	r2, [pc, #276]	; (80017bc <HAL_DMA_Init+0x140>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	009a      	lsls	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a42      	ldr	r2, [pc, #264]	; (80017c0 <HAL_DMA_Init+0x144>)
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
 80016b8:	e00e      	b.n	80016d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_DMA_Init+0x148>)
 80016c2:	4413      	add	r3, r2
 80016c4:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <HAL_DMA_Init+0x140>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	009a      	lsls	r2, r3, #2
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a3c      	ldr	r2, [pc, #240]	; (80017c8 <HAL_DMA_Init+0x14c>)
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f9b6 	bl	8001a9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001738:	d102      	bne.n	8001740 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001754:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <HAL_DMA_Init+0x104>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b04      	cmp	r3, #4
 8001764:	d80c      	bhi.n	8001780 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f9d6 	bl	8001b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e008      	b.n	8001792 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40020407 	.word	0x40020407
 80017b8:	bffdfff8 	.word	0xbffdfff8
 80017bc:	cccccccd 	.word	0xcccccccd
 80017c0:	40020000 	.word	0x40020000
 80017c4:	bffdfbf8 	.word	0xbffdfbf8
 80017c8:	40020400 	.word	0x40020400

080017cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_DMA_Start_IT+0x20>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e066      	b.n	80018ba <HAL_DMA_Start_IT+0xee>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d155      	bne.n	80018ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f8fb 	bl	8001a20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 020e 	orr.w	r2, r2, #14
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e00f      	b.n	8001864 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0204 	bic.w	r2, r2, #4
 8001852:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 020a 	orr.w	r2, r2, #10
 8001862:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001880:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001898:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e005      	b.n	80018b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
 80018b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2204      	movs	r2, #4
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d026      	beq.n	800193c <HAL_DMA_IRQHandler+0x7a>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d021      	beq.n	800193c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d107      	bne.n	8001916 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0204 	bic.w	r2, r2, #4
 8001914:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 021f 	and.w	r2, r3, #31
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2104      	movs	r1, #4
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	2b00      	cmp	r3, #0
 8001930:	d071      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800193a:	e06c      	b.n	8001a16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	2202      	movs	r2, #2
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d02e      	beq.n	80019ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d029      	beq.n	80019ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10b      	bne.n	8001980 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 020a 	bic.w	r2, r2, #10
 8001976:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	2102      	movs	r1, #2
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d038      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80019ac:	e033      	b.n	8001a16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	2208      	movs	r2, #8
 80019b8:	409a      	lsls	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d02a      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d025      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020e 	bic.w	r2, r2, #14
 80019da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
}
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 021f 	and.w	r2, r3, #31
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d108      	bne.n	8001a80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a7e:	e007      	b.n	8001a90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d802      	bhi.n	8001ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e001      	b.n	8001aba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ab8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3b08      	subs	r3, #8
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	009a      	lsls	r2, r3, #2
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ae6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2201      	movs	r2, #1
 8001af0:	409a      	lsls	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40020407 	.word	0x40020407
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020820 	.word	0x40020820
 8001b10:	cccccccd 	.word	0xcccccccd
 8001b14:	40020880 	.word	0x40020880

08001b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	461a      	mov	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b3a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2201      	movs	r2, #1
 8001b46:	409a      	lsls	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	1000823f 	.word	0x1000823f
 8001b5c:	40020940 	.word	0x40020940

08001b60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e147      	b.n	8001e02 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f008 fc4c 	bl	800a424 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0210 	bic.w	r2, r2, #16
 8001b9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9c:	f7fe fcea 	bl	8000574 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001ba2:	e012      	b.n	8001bca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ba4:	f7fe fce6 	bl	8000574 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b0a      	cmp	r3, #10
 8001bb0:	d90b      	bls.n	8001bca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e11b      	b.n	8001e02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d0e5      	beq.n	8001ba4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be8:	f7fe fcc4 	bl	8000574 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001bee:	e012      	b.n	8001c16 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001bf0:	f7fe fcc0 	bl	8000574 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b0a      	cmp	r3, #10
 8001bfc:	d90b      	bls.n	8001c16 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0f5      	b.n	8001e02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0e5      	beq.n	8001bf0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0202 	orr.w	r2, r2, #2
 8001c32:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a74      	ldr	r2, [pc, #464]	; (8001e0c <HAL_FDCAN_Init+0x2ac>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d103      	bne.n	8001c46 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001c3e:	4a74      	ldr	r2, [pc, #464]	; (8001e10 <HAL_FDCAN_Init+0x2b0>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7c1b      	ldrb	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d108      	bne.n	8001c60 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c5c:	619a      	str	r2, [r3, #24]
 8001c5e:	e007      	b.n	8001c70 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7c5b      	ldrb	r3, [r3, #17]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	e007      	b.n	8001c9a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c98:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7c9b      	ldrb	r3, [r3, #18]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d108      	bne.n	8001cb4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cb0:	619a      	str	r2, [r3, #24]
 8001cb2:	e007      	b.n	8001cc4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001cc2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001ce8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0210 	bic.w	r2, r2, #16
 8001cf8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d108      	bne.n	8001d14 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0204 	orr.w	r2, r2, #4
 8001d10:	619a      	str	r2, [r3, #24]
 8001d12:	e02c      	b.n	8001d6e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d028      	beq.n	8001d6e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d01c      	beq.n	8001d5e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d32:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0210 	orr.w	r2, r2, #16
 8001d42:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d110      	bne.n	8001d6e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	e007      	b.n	8001d6e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0220 	orr.w	r2, r2, #32
 8001d6c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d7e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d86:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d96:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d98:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001da2:	d115      	bne.n	8001dd0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	3b01      	subs	r3, #1
 8001db0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001db2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	3b01      	subs	r3, #1
 8001dba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001dbc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001dcc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001dce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f814 	bl	8001e14 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40006400 	.word	0x40006400
 8001e10:	40006500 	.word	0x40006500

08001e14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001e1e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e2e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e54:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e005      	b.n	8001ea2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3f3      	bcc.n	8001e96 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	4000a400 	.word	0x4000a400

08001ec0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e031      	b.n	8001f36 <HAL_FMAC_Init+0x76>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_FMAC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmac->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f008 fae0 	bl	800a4ac <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0UL;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f84c 	bl	8001f90 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f820 	bl	8001f3e <FMAC_Reset>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d10c      	bne.n	8001f1e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_RESET;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2210      	movs	r2, #16
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	22a0      	movs	r2, #160	; 0xa0
 8001f0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hfmac);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e00b      	b.n	8001f36 <HAL_FMAC_Init+0x76>
  }

  /* Update FMAC error code and FMAC peripheral state */
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
  hfmac->State = HAL_FMAC_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hfmac);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f46:	f7fe fb15 	bl	8000574 <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f5a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8001f5c:	e009      	b.n	8001f72 <FMAC_Reset+0x34>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8001f5e:	f7fe fb09 	bl	8000574 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f6c:	d901      	bls.n	8001f72 <FMAC_Reset+0x34>
    {
      return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e00a      	b.n	8001f88 <FMAC_Reset+0x4a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f807 	bl	8001fac <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f81b 	bl	8001fda <FMAC_ResetOutputStateAndDataPointers>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002016:	e15a      	b.n	80022ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 814c 	beq.w	80022c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x38>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b12      	cmp	r3, #18
 800203e:	d123      	bne.n	8002088 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	6939      	ldr	r1, [r7, #16]
 8002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d00b      	beq.n	80020dc <HAL_GPIO_Init+0xd4>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d007      	beq.n	80020dc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d0:	2b11      	cmp	r3, #17
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b12      	cmp	r3, #18
 80020da:	d130      	bne.n	800213e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002112:	2201      	movs	r2, #1
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 0201 	and.w	r2, r3, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80a6 	beq.w	80022c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217c:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_GPIO_Init+0x2e4>)
 800217e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002180:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_GPIO_Init+0x2e4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6613      	str	r3, [r2, #96]	; 0x60
 8002188:	4b58      	ldr	r3, [pc, #352]	; (80022ec <HAL_GPIO_Init+0x2e4>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002194:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_GPIO_Init+0x2e8>)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3302      	adds	r3, #2
 800219c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021be:	d01f      	beq.n	8002200 <HAL_GPIO_Init+0x1f8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a4c      	ldr	r2, [pc, #304]	; (80022f4 <HAL_GPIO_Init+0x2ec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d019      	beq.n	80021fc <HAL_GPIO_Init+0x1f4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_GPIO_Init+0x2f0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_GPIO_Init+0x1f0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_GPIO_Init+0x2f4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00d      	beq.n	80021f4 <HAL_GPIO_Init+0x1ec>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a49      	ldr	r2, [pc, #292]	; (8002300 <HAL_GPIO_Init+0x2f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <HAL_GPIO_Init+0x1e8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a48      	ldr	r2, [pc, #288]	; (8002304 <HAL_GPIO_Init+0x2fc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_GPIO_Init+0x1e4>
 80021e8:	2305      	movs	r3, #5
 80021ea:	e00a      	b.n	8002202 <HAL_GPIO_Init+0x1fa>
 80021ec:	2306      	movs	r3, #6
 80021ee:	e008      	b.n	8002202 <HAL_GPIO_Init+0x1fa>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e006      	b.n	8002202 <HAL_GPIO_Init+0x1fa>
 80021f4:	2303      	movs	r3, #3
 80021f6:	e004      	b.n	8002202 <HAL_GPIO_Init+0x1fa>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_GPIO_Init+0x1fa>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_GPIO_Init+0x1fa>
 8002200:	2300      	movs	r3, #0
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	f002 0203 	and.w	r2, r2, #3
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	4093      	lsls	r3, r2
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002212:	4937      	ldr	r1, [pc, #220]	; (80022f0 <HAL_GPIO_Init+0x2e8>)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_GPIO_Init+0x300>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002244:	4a30      	ldr	r2, [pc, #192]	; (8002308 <HAL_GPIO_Init+0x300>)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800224a:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_GPIO_Init+0x300>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800226e:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_GPIO_Init+0x300>)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_GPIO_Init+0x300>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_GPIO_Init+0x300>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_GPIO_Init+0x300>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_GPIO_Init+0x300>)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f ae9d 	bne.w	8002018 <HAL_GPIO_Init+0x10>
  }
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010000 	.word	0x40010000
 80022f4:	48000400 	.word	0x48000400
 80022f8:	48000800 	.word	0x48000800
 80022fc:	48000c00 	.word	0x48000c00
 8002300:	48001000 	.word	0x48001000
 8002304:	48001400 	.word	0x48001400
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002328:	e002      	b.n	8002330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002354:	887a      	ldrh	r2, [r7, #2]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800235a:	e002      	b.n	8002362 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e081      	b.n	8002484 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f008 f907 	bl	800a5a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2224      	movs	r2, #36	; 0x24
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d107      	bne.n	80023e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	e006      	b.n	80023f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d104      	bne.n	8002408 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002406:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	ea42 0103 	orr.w	r1, r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	021a      	lsls	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69d9      	ldr	r1, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d138      	bne.n	8002514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e032      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	d139      	bne.n	80025ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002542:	2302      	movs	r3, #2
 8002544:	e033      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2224      	movs	r2, #36	; 0x24
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d141      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ca:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d6:	d131      	bne.n	800263c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d8:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025de:	4a46      	ldr	r2, [pc, #280]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f0:	4a41      	ldr	r2, [pc, #260]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025f8:	4b40      	ldr	r3, [pc, #256]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2232      	movs	r2, #50	; 0x32
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	0c9b      	lsrs	r3, r3, #18
 800260a:	3301      	adds	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260e:	e002      	b.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3b01      	subs	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002622:	d102      	bne.n	800262a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f2      	bne.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800262a:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002636:	d158      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e057      	b.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002642:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800264c:	e04d      	b.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002654:	d141      	bne.n	80026da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d131      	bne.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800267c:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002682:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2232      	movs	r2, #50	; 0x32
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	3301      	adds	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269a:	e002      	b.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3b01      	subs	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ae:	d102      	bne.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f2      	bne.n	800269c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d112      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e011      	b.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026d8:	e007      	b.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40007000 	.word	0x40007000
 80026fc:	20000010 	.word	0x20000010
 8002700:	431bde83 	.word	0x431bde83

08002704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e308      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d075      	beq.n	800280e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002722:	4ba3      	ldr	r3, [pc, #652]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272c:	4ba0      	ldr	r3, [pc, #640]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d102      	bne.n	8002742 <HAL_RCC_OscConfig+0x3e>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d002      	beq.n	8002748 <HAL_RCC_OscConfig+0x44>
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d10b      	bne.n	8002760 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	4b99      	ldr	r3, [pc, #612]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05b      	beq.n	800280c <HAL_RCC_OscConfig+0x108>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d157      	bne.n	800280c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e2e3      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0x74>
 800276a:	4b91      	ldr	r3, [pc, #580]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a90      	ldr	r2, [pc, #576]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xb0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x98>
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a8a      	ldr	r2, [pc, #552]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a87      	ldr	r2, [pc, #540]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xb0>
 800279c:	4b84      	ldr	r3, [pc, #528]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a83      	ldr	r2, [pc, #524]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b81      	ldr	r3, [pc, #516]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a80      	ldr	r2, [pc, #512]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fd feda 	bl	8000574 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fd fed6 	bl	8000574 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e2a8      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xc0>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fd fec6 	bl	8000574 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fd fec2 	bl	8000574 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e294      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fe:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0xe8>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d075      	beq.n	8002906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002824:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d102      	bne.n	800283a <HAL_RCC_OscConfig+0x136>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d002      	beq.n	8002840 <HAL_RCC_OscConfig+0x13c>
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11f      	bne.n	8002880 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x154>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e267      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	4952      	ldr	r1, [pc, #328]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800286c:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <HAL_RCC_OscConfig+0x2b0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f008 f91f 	bl	800aab4 <HAL_InitTick>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d043      	beq.n	8002904 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e253      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a48      	ldr	r2, [pc, #288]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fd fe6e 	bl	8000574 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289c:	f7fd fe6a 	bl	8000574 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e23c      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	4939      	ldr	r1, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
 80028ce:	e01a      	b.n	8002906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d0:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a36      	ldr	r2, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80028d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fd fe4a 	bl	8000574 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e4:	f7fd fe46 	bl	8000574 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e218      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f6:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1e0>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d03c      	beq.n	800298c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01c      	beq.n	8002954 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fd fe23 	bl	8000574 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002932:	f7fd fe1f 	bl	8000574 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1f1      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ef      	beq.n	8002932 <HAL_RCC_OscConfig+0x22e>
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fd fe06 	bl	8000574 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fd fe02 	bl	8000574 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1d4      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ef      	bne.n	800296c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80ab 	beq.w	8002af0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2b4>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e005      	b.n	80029ba <HAL_RCC_OscConfig+0x2b6>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	20000000 	.word	0x20000000
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4baf      	ldr	r3, [pc, #700]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	4aae      	ldr	r2, [pc, #696]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ca:	4bac      	ldr	r3, [pc, #688]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029da:	4ba9      	ldr	r3, [pc, #676]	; (8002c80 <HAL_RCC_OscConfig+0x57c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e6:	4ba6      	ldr	r3, [pc, #664]	; (8002c80 <HAL_RCC_OscConfig+0x57c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4aa5      	ldr	r2, [pc, #660]	; (8002c80 <HAL_RCC_OscConfig+0x57c>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fd fdbf 	bl	8000574 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fd fdbb 	bl	8000574 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e18d      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0c:	4b9c      	ldr	r3, [pc, #624]	; (8002c80 <HAL_RCC_OscConfig+0x57c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d108      	bne.n	8002a32 <HAL_RCC_OscConfig+0x32e>
 8002a20:	4b96      	ldr	r3, [pc, #600]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a95      	ldr	r2, [pc, #596]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a30:	e024      	b.n	8002a7c <HAL_RCC_OscConfig+0x378>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d110      	bne.n	8002a5c <HAL_RCC_OscConfig+0x358>
 8002a3a:	4b90      	ldr	r3, [pc, #576]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	4a8e      	ldr	r2, [pc, #568]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a4a:	4b8c      	ldr	r3, [pc, #560]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	4a8a      	ldr	r2, [pc, #552]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a5a:	e00f      	b.n	8002a7c <HAL_RCC_OscConfig+0x378>
 8002a5c:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a86      	ldr	r2, [pc, #536]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a6c:	4b83      	ldr	r3, [pc, #524]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	4a82      	ldr	r2, [pc, #520]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d016      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fd fd76 	bl	8000574 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fd fd72 	bl	8000574 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e142      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ed      	beq.n	8002a8c <HAL_RCC_OscConfig+0x388>
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fd fd5f 	bl	8000574 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fd fd5b 	bl	8000574 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e12b      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ed      	bne.n	8002aba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ade:	7ffb      	ldrb	r3, [r7, #31]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d03c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01c      	beq.n	8002b3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b04:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fd fd2e 	bl	8000574 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b1c:	f7fd fd2a 	bl	8000574 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0fc      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b2e:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ef      	beq.n	8002b1c <HAL_RCC_OscConfig+0x418>
 8002b3c:	e01b      	b.n	8002b76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b44:	4a4d      	ldr	r2, [pc, #308]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fd fd11 	bl	8000574 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b56:	f7fd fd0d 	bl	8000574 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0df      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b68:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ef      	bne.n	8002b56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80d3 	beq.w	8002d26 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b80:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	f000 808d 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d15a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fd fce7 	bl	8000574 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fd fce3 	bl	8000574 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0b5      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_OscConfig+0x580>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6a11      	ldr	r1, [r2, #32]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002be2:	0212      	lsls	r2, r2, #8
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bea:	0852      	lsrs	r2, r2, #1
 8002bec:	3a01      	subs	r2, #1
 8002bee:	0552      	lsls	r2, r2, #21
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf6:	0852      	lsrs	r2, r2, #1
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	0652      	lsls	r2, r2, #25
 8002bfc:	4311      	orrs	r1, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c02:	06d2      	lsls	r2, r2, #27
 8002c04:	430a      	orrs	r2, r1
 8002c06:	491d      	ldr	r1, [pc, #116]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fd fca6 	bl	8000574 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fd fca2 	bl	8000574 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e074      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x528>
 8002c4a:	e06c      	b.n	8002d26 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_RCC_OscConfig+0x578>)
 8002c6a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fd fc7e 	bl	8000574 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7a:	e00e      	b.n	8002c9a <HAL_RCC_OscConfig+0x596>
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fd fc74 	bl	8000574 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e046      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_RCC_OscConfig+0x62c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x584>
 8002ca6:	e03e      	b.n	8002d26 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e039      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <HAL_RCC_OscConfig+0x62c>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d12c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d123      	bne.n	8002d22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d11b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d113      	bne.n	8002d22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e11e      	b.n	8002f8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b91      	ldr	r3, [pc, #580]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b8e      	ldr	r3, [pc, #568]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	498c      	ldr	r1, [pc, #560]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b8a      	ldr	r3, [pc, #552]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e106      	b.n	8002f8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d073      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d129      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d90:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0f4      	b.n	8002f8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002da0:	f000 f9d0 	bl	8003144 <RCC_GetSysClockFreqFromPLLSource>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4a7c      	ldr	r2, [pc, #496]	; (8002f9c <HAL_RCC_ClockConfig+0x268>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d93f      	bls.n	8002e2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002dae:	4b7a      	ldr	r3, [pc, #488]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d033      	beq.n	8002e2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d12f      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dce:	4b72      	ldr	r3, [pc, #456]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd6:	4a70      	ldr	r2, [pc, #448]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ddc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e024      	b.n	8002e2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dec:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0c6      	b.n	8002f8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0be      	b.n	8002f8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e0c:	f000 f8ce 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4a61      	ldr	r2, [pc, #388]	; (8002f9c <HAL_RCC_ClockConfig+0x268>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d909      	bls.n	8002e2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e22:	4a5d      	ldr	r2, [pc, #372]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4957      	ldr	r1, [pc, #348]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fd fb98 	bl	8000574 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fd fb94 	bl	8000574 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e095      	b.n	8002f8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d023      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a42      	ldr	r2, [pc, #264]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ea8:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4936      	ldr	r1, [pc, #216]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eca:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ed4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d21d      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 020f 	bic.w	r2, r3, #15
 8002eec:	4929      	ldr	r1, [pc, #164]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ef4:	f7fd fb3e 	bl	8000574 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fd fb3a 	bl	8000574 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e03b      	b.n	8002f8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_RCC_ClockConfig+0x260>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1ed      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4917      	ldr	r1, [pc, #92]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	490f      	ldr	r1, [pc, #60]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5e:	f000 f825 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f62:	4601      	mov	r1, r0
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_RCC_ClockConfig+0x264>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <HAL_RCC_ClockConfig+0x26c>)
 8002f70:	5cd3      	ldrb	r3, [r2, r3]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x270>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f007 fd96 	bl	800aab4 <HAL_InitTick>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	04c4b400 	.word	0x04c4b400
 8002fa0:	0800adb4 	.word	0x0800adb4
 8002fa4:	20000010 	.word	0x20000010
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e047      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fd0:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e03e      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d136      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003000:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 800300a:	68d2      	ldr	r2, [r2, #12]
 800300c:	0a12      	lsrs	r2, r2, #8
 800300e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	617b      	str	r3, [r7, #20]
      break;
 8003018:	e00c      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_RCC_GetSysClockFreq+0xbc>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	4a10      	ldr	r2, [pc, #64]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	0a12      	lsrs	r2, r2, #8
 8003028:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800302c:	fb02 f303 	mul.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
      break;
 8003032:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0e5b      	lsrs	r3, r3, #25
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e001      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003054:	693b      	ldr	r3, [r7, #16]
}
 8003056:	4618      	mov	r0, r3
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000010 	.word	0x20000010

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4601      	mov	r1, r0
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	0800adc4 	.word	0x0800adc4

080030b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030b8:	f7ff ffda 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030bc:	4601      	mov	r1, r0
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0adb      	lsrs	r3, r3, #11
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4a04      	ldr	r2, [pc, #16]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	0800adc4 	.word	0x0800adc4

080030e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	220f      	movs	r2, #15
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0203 	and.w	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_RCC_GetClockConfig+0x60>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 020f 	and.w	r2, r3, #15
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	40022000 	.word	0x40022000

08003144 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3301      	adds	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d10c      	bne.n	8003182 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003168:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003172:	68d2      	ldr	r2, [r2, #12]
 8003174:	0a12      	lsrs	r2, r2, #8
 8003176:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
    break;
 8003180:	e00c      	b.n	800319c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	0a12      	lsrs	r2, r2, #8
 8003190:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003194:	fb02 f303 	mul.w	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
    break;
 800319a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	0e5b      	lsrs	r3, r3, #25
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	3301      	adds	r3, #1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031b6:	687b      	ldr	r3, [r7, #4]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40021000 	.word	0x40021000
 80031c8:	007a1200 	.word	0x007a1200
 80031cc:	00f42400 	.word	0x00f42400

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d8:	2300      	movs	r3, #0
 80031da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031dc:	2300      	movs	r3, #0
 80031de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8098 	beq.w	800331e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6593      	str	r3, [r2, #88]	; 0x58
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321a:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a39      	ldr	r2, [pc, #228]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003226:	f7fd f9a5 	bl	8000574 <HAL_GetTick>
 800322a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322c:	e009      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7fd f9a1 	bl	8000574 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d902      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	74fb      	strb	r3, [r7, #19]
        break;
 8003240:	e005      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ef      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d159      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01e      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	d019      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fd f961 	bl	8000574 <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b4:	e00b      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd f95d 	bl	8000574 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d902      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	74fb      	strb	r3, [r7, #19]
            break;
 80032cc:	e006      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ec      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032f8:	e008      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	74bb      	strb	r3, [r7, #18]
 80032fe:	e005      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003300:	40021000 	.word	0x40021000
 8003304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330c:	7c7b      	ldrb	r3, [r7, #17]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4ba6      	ldr	r3, [pc, #664]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	4aa5      	ldr	r2, [pc, #660]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800332a:	4ba0      	ldr	r3, [pc, #640]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f023 0203 	bic.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	499c      	ldr	r1, [pc, #624]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800334c:	4b97      	ldr	r3, [pc, #604]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 020c 	bic.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4994      	ldr	r1, [pc, #592]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800336e:	4b8f      	ldr	r3, [pc, #572]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	498b      	ldr	r1, [pc, #556]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003390:	4b86      	ldr	r3, [pc, #536]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	4983      	ldr	r1, [pc, #524]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033b2:	4b7e      	ldr	r3, [pc, #504]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	497a      	ldr	r1, [pc, #488]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d4:	4b75      	ldr	r3, [pc, #468]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	4972      	ldr	r1, [pc, #456]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f6:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4969      	ldr	r1, [pc, #420]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4961      	ldr	r1, [pc, #388]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800343a:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	4958      	ldr	r1, [pc, #352]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d015      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	4950      	ldr	r1, [pc, #320]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347a:	d105      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003486:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003494:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	4942      	ldr	r1, [pc, #264]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b2:	d105      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b4:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a3c      	ldr	r2, [pc, #240]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034cc:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4934      	ldr	r1, [pc, #208]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ea:	d105      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003504:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	4926      	ldr	r1, [pc, #152]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a20      	ldr	r2, [pc, #128]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	4918      	ldr	r1, [pc, #96]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800355a:	d105      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003566:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003592:	d105      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e01d      	b.n	80035fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f007 f876 	bl	800a6c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fdea 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_TIM_Base_Start+0x50>)
 8003620:	4013      	ands	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b06      	cmp	r3, #6
 8003628:	d00b      	beq.n	8003642 <HAL_TIM_Base_Start+0x3a>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d007      	beq.n	8003642 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	00010007 	.word	0x00010007

0800365c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_TIM_Base_Start_IT+0x50>)
 800367c:	4013      	ands	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d00b      	beq.n	800369e <HAL_TIM_Base_Start_IT+0x42>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d007      	beq.n	800369e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	00010007 	.word	0x00010007

080036b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e01d      	b.n	80036fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f007 f870 	bl	800a7bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f000 fd6a 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d101      	bne.n	8003726 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	e106      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x22c>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10b      	bne.n	800374a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_TIM_PWM_Start_DMA+0x3a>
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0f8      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x22c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	f200 80ad 	bhi.w	80038ac <HAL_TIM_PWM_Start_DMA+0x1a4>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <HAL_TIM_PWM_Start_DMA+0x50>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	0800378d 	.word	0x0800378d
 800375c:	080038ad 	.word	0x080038ad
 8003760:	080038ad 	.word	0x080038ad
 8003764:	080038ad 	.word	0x080038ad
 8003768:	080037d5 	.word	0x080037d5
 800376c:	080038ad 	.word	0x080038ad
 8003770:	080038ad 	.word	0x080038ad
 8003774:	080038ad 	.word	0x080038ad
 8003778:	0800381d 	.word	0x0800381d
 800377c:	080038ad 	.word	0x080038ad
 8003780:	080038ad 	.word	0x080038ad
 8003784:	080038ad 	.word	0x080038ad
 8003788:	08003865 	.word	0x08003865
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	4a6a      	ldr	r2, [pc, #424]	; (800393c <HAL_TIM_PWM_Start_DMA+0x234>)
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	4a69      	ldr	r2, [pc, #420]	; (8003940 <HAL_TIM_PWM_Start_DMA+0x238>)
 800379a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	4a68      	ldr	r2, [pc, #416]	; (8003944 <HAL_TIM_PWM_Start_DMA+0x23c>)
 80037a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3334      	adds	r3, #52	; 0x34
 80037b0:	461a      	mov	r2, r3
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	f7fe f80a 	bl	80017cc <HAL_DMA_Start_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0b8      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x22c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	60da      	str	r2, [r3, #12]
      break;
 80037d2:	e06c      	b.n	80038ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	4a58      	ldr	r2, [pc, #352]	; (800393c <HAL_TIM_PWM_Start_DMA+0x234>)
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	4a57      	ldr	r2, [pc, #348]	; (8003940 <HAL_TIM_PWM_Start_DMA+0x238>)
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	4a56      	ldr	r2, [pc, #344]	; (8003944 <HAL_TIM_PWM_Start_DMA+0x23c>)
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3338      	adds	r3, #56	; 0x38
 80037f8:	461a      	mov	r2, r3
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	f7fd ffe6 	bl	80017cc <HAL_DMA_Start_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e094      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x22c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003818:	60da      	str	r2, [r3, #12]
      break;
 800381a:	e048      	b.n	80038ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	4a46      	ldr	r2, [pc, #280]	; (800393c <HAL_TIM_PWM_Start_DMA+0x234>)
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	4a45      	ldr	r2, [pc, #276]	; (8003940 <HAL_TIM_PWM_Start_DMA+0x238>)
 800382a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a44      	ldr	r2, [pc, #272]	; (8003944 <HAL_TIM_PWM_Start_DMA+0x23c>)
 8003832:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	333c      	adds	r3, #60	; 0x3c
 8003840:	461a      	mov	r2, r3
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	f7fd ffc2 	bl	80017cc <HAL_DMA_Start_IT>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e070      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x22c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003860:	60da      	str	r2, [r3, #12]
      break;
 8003862:	e024      	b.n	80038ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	4a34      	ldr	r2, [pc, #208]	; (800393c <HAL_TIM_PWM_Start_DMA+0x234>)
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	4a33      	ldr	r2, [pc, #204]	; (8003940 <HAL_TIM_PWM_Start_DMA+0x238>)
 8003872:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_TIM_PWM_Start_DMA+0x23c>)
 800387a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3340      	adds	r3, #64	; 0x40
 8003888:	461a      	mov	r2, r3
 800388a:	887b      	ldrh	r3, [r7, #2]
 800388c:	f7fd ff9e 	bl	80017cc <HAL_DMA_Start_IT>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e04c      	b.n	8003934 <HAL_TIM_PWM_Start_DMA+0x22c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038a8:	60da      	str	r2, [r3, #12]
      break;
 80038aa:	e000      	b.n	80038ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80038ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2201      	movs	r2, #1
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f8a8 	bl	8004a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_TIM_PWM_Start_DMA+0x240>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_TIM_PWM_Start_DMA+0x1e6>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a20      	ldr	r2, [pc, #128]	; (800394c <HAL_TIM_PWM_Start_DMA+0x244>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_TIM_PWM_Start_DMA+0x1e6>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_TIM_PWM_Start_DMA+0x248>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_TIM_PWM_Start_DMA+0x1e6>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_TIM_PWM_Start_DMA+0x24c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIM_PWM_Start_DMA+0x1e6>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_TIM_PWM_Start_DMA+0x250>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_PWM_Start_DMA+0x1ea>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_TIM_PWM_Start_DMA+0x1ec>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_TIM_PWM_Start_DMA+0x200>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_TIM_PWM_Start_DMA+0x254>)
 8003910:	4013      	ands	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b06      	cmp	r3, #6
 8003918:	d00b      	beq.n	8003932 <HAL_TIM_PWM_Start_DMA+0x22a>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d007      	beq.n	8003932 <HAL_TIM_PWM_Start_DMA+0x22a>
  {
    __HAL_TIM_ENABLE(htim);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	080040e9 	.word	0x080040e9
 8003940:	08004159 	.word	0x08004159
 8003944:	080040c5 	.word	0x080040c5
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40013400 	.word	0x40013400
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800
 800395c:	00010007 	.word	0x00010007

08003960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d122      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d11b      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0202 	mvn.w	r2, #2
 800398c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fb5c 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fb4e 	bl	800404c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fb5f 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0204 	mvn.w	r2, #4
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fb32 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fb24 	bl	800404c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb35 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0208 	mvn.w	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fb08 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fafa 	bl	800404c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fb0b 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0210 	mvn.w	r2, #16
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fade 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fad0 	bl	800404c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fae1 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0201 	mvn.w	r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f006 fbbe 	bl	800a260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b80      	cmp	r3, #128	; 0x80
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f001 f8ac 	bl	8004c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f001 f89f 	bl	8004c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa99 	bl	800409c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0220 	mvn.w	r2, #32
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f001 f85f 	bl	8004c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f001 f865 	bl	8004c90 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003be4:	d107      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f001 f857 	bl	8004ca4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c04:	d10f      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d107      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f001 f849 	bl	8004cb8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c34:	d10f      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f001 f83b 	bl	8004ccc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e105      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b14      	cmp	r3, #20
 8003c8e:	f200 80f0 	bhi.w	8003e72 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003c92:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003e73 	.word	0x08003e73
 8003ca0:	08003e73 	.word	0x08003e73
 8003ca4:	08003e73 	.word	0x08003e73
 8003ca8:	08003d2d 	.word	0x08003d2d
 8003cac:	08003e73 	.word	0x08003e73
 8003cb0:	08003e73 	.word	0x08003e73
 8003cb4:	08003e73 	.word	0x08003e73
 8003cb8:	08003d6f 	.word	0x08003d6f
 8003cbc:	08003e73 	.word	0x08003e73
 8003cc0:	08003e73 	.word	0x08003e73
 8003cc4:	08003e73 	.word	0x08003e73
 8003cc8:	08003daf 	.word	0x08003daf
 8003ccc:	08003e73 	.word	0x08003e73
 8003cd0:	08003e73 	.word	0x08003e73
 8003cd4:	08003e73 	.word	0x08003e73
 8003cd8:	08003df1 	.word	0x08003df1
 8003cdc:	08003e73 	.word	0x08003e73
 8003ce0:	08003e73 	.word	0x08003e73
 8003ce4:	08003e73 	.word	0x08003e73
 8003ce8:	08003e31 	.word	0x08003e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 faf8 	bl	80042e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0208 	orr.w	r2, r2, #8
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	619a      	str	r2, [r3, #24]
      break;
 8003d2a:	e0a3      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fb68 	bl	8004408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e082      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fbd1 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0208 	orr.w	r2, r2, #8
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
      break;
 8003dac:	e062      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fc39 	bl	800462c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	61da      	str	r2, [r3, #28]
      break;
 8003dee:	e041      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fca2 	bl	8004740 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e2e:	e021      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fce6 	bl	8004808 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003e72:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop

08003e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIM_ConfigClockSource+0x18>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e0c3      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x1a0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b70      	cmp	r3, #112	; 0x70
 8003ee2:	d038      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0xc6>
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d815      	bhi.n	8003f14 <HAL_TIM_ConfigClockSource+0x84>
 8003ee8:	2b30      	cmp	r3, #48	; 0x30
 8003eea:	f000 808e 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x17a>
 8003eee:	2b30      	cmp	r3, #48	; 0x30
 8003ef0:	d809      	bhi.n	8003f06 <HAL_TIM_ConfigClockSource+0x76>
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	f000 8089 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x17a>
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	f000 8086 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x17a>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8083 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f04:	e08b      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003f06:	2b50      	cmp	r3, #80	; 0x50
 8003f08:	d04f      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x11a>
 8003f0a:	2b60      	cmp	r3, #96	; 0x60
 8003f0c:	d05d      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x13a>
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d06b      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8003f12:	e084      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003f14:	4a48      	ldr	r2, [pc, #288]	; (8004038 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d077      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x17a>
 8003f1a:	4a47      	ldr	r2, [pc, #284]	; (8004038 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d809      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0xa4>
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f24:	d02e      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xf4>
 8003f26:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f2a:	d06e      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x17a>
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d074      	beq.n	800401c <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8003f32:	e074      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003f34:	4a41      	ldr	r2, [pc, #260]	; (800403c <HAL_TIM_ConfigClockSource+0x1ac>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d067      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x17a>
 8003f3a:	4a40      	ldr	r2, [pc, #256]	; (800403c <HAL_TIM_ConfigClockSource+0x1ac>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d803      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0xb8>
 8003f40:	4a3f      	ldr	r2, [pc, #252]	; (8004040 <HAL_TIM_ConfigClockSource+0x1b0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d061      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003f46:	e06a      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8003f48:	4a3e      	ldr	r2, [pc, #248]	; (8004044 <HAL_TIM_ConfigClockSource+0x1b4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d05d      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x17a>
 8003f4e:	4a3e      	ldr	r2, [pc, #248]	; (8004048 <HAL_TIM_ConfigClockSource+0x1b8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d05a      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003f54:	e063      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f000 fd31 	bl	80049cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	609a      	str	r2, [r3, #8]
      break;
 8003f82:	e04c      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f000 fd1a 	bl	80049cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa6:	609a      	str	r2, [r3, #8]
      break;
 8003fa8:	e039      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 fc8c 	bl	80048d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2150      	movs	r1, #80	; 0x50
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fce5 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e029      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 fcab 	bl	8004932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2160      	movs	r1, #96	; 0x60
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fcd5 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e019      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 fc6c 	bl	80048d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fcc5 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 8004008:	e009      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f000 fcbc 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 800401a:	e000      	b.n	800401e <HAL_TIM_ConfigClockSource+0x18e>
      break;
 800401c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	00100020 	.word	0x00100020
 800403c:	00100040 	.word	0x00100040
 8004040:	00100030 	.word	0x00100030
 8004044:	00100060 	.word	0x00100060
 8004048:	00100070 	.word	0x00100070

0800404c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff ffe8 	bl	80040b0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d103      	bne.n	8004110 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	771a      	strb	r2, [r3, #28]
 800410e:	e019      	b.n	8004144 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d103      	bne.n	8004122 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	771a      	strb	r2, [r3, #28]
 8004120:	e010      	b.n	8004144 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d103      	bne.n	8004134 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2204      	movs	r2, #4
 8004130:	771a      	strb	r2, [r3, #28]
 8004132:	e007      	b.n	8004144 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	429a      	cmp	r2, r3
 800413c:	d102      	bne.n	8004144 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2208      	movs	r2, #8
 8004142:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ff95 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d103      	bne.n	8004180 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	771a      	strb	r2, [r3, #28]
 800417e:	e019      	b.n	80041b4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d103      	bne.n	8004192 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2202      	movs	r2, #2
 800418e:	771a      	strb	r2, [r3, #28]
 8004190:	e010      	b.n	80041b4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d103      	bne.n	80041a4 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2204      	movs	r2, #4
 80041a0:	771a      	strb	r2, [r3, #28]
 80041a2:	e007      	b.n	80041b4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d102      	bne.n	80041b4 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2208      	movs	r2, #8
 80041b2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff ff67 	bl	8004088 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a3c      	ldr	r2, [pc, #240]	; (80042cc <TIM_Base_SetConfig+0x104>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00f      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e6:	d00b      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a39      	ldr	r2, [pc, #228]	; (80042d0 <TIM_Base_SetConfig+0x108>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a38      	ldr	r2, [pc, #224]	; (80042d4 <TIM_Base_SetConfig+0x10c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a37      	ldr	r2, [pc, #220]	; (80042d8 <TIM_Base_SetConfig+0x110>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <TIM_Base_SetConfig+0x104>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01b      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d017      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2a      	ldr	r2, [pc, #168]	; (80042d0 <TIM_Base_SetConfig+0x108>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a29      	ldr	r2, [pc, #164]	; (80042d4 <TIM_Base_SetConfig+0x10c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a28      	ldr	r2, [pc, #160]	; (80042d8 <TIM_Base_SetConfig+0x110>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a27      	ldr	r2, [pc, #156]	; (80042dc <TIM_Base_SetConfig+0x114>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <TIM_Base_SetConfig+0x118>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <TIM_Base_SetConfig+0x11c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a10      	ldr	r2, [pc, #64]	; (80042cc <TIM_Base_SetConfig+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00f      	beq.n	80042b0 <TIM_Base_SetConfig+0xe8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <TIM_Base_SetConfig+0x110>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_Base_SetConfig+0xe8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a10      	ldr	r2, [pc, #64]	; (80042dc <TIM_Base_SetConfig+0x114>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_Base_SetConfig+0xe8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <TIM_Base_SetConfig+0x118>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_Base_SetConfig+0xe8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <TIM_Base_SetConfig+0x11c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d103      	bne.n	80042b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	615a      	str	r2, [r3, #20]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800

080042e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 0302 	bic.w	r3, r3, #2
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <TIM_OC1_SetConfig+0x10c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00f      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <TIM_OC1_SetConfig+0x110>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <TIM_OC1_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a29      	ldr	r2, [pc, #164]	; (8004400 <TIM_OC1_SetConfig+0x118>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC1_SetConfig+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a28      	ldr	r2, [pc, #160]	; (8004404 <TIM_OC1_SetConfig+0x11c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0308 	bic.w	r3, r3, #8
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <TIM_OC1_SetConfig+0x10c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <TIM_OC1_SetConfig+0x110>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <TIM_OC1_SetConfig+0x114>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <TIM_OC1_SetConfig+0x118>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC1_SetConfig+0xc2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <TIM_OC1_SetConfig+0x11c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40013400 	.word	0x40013400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800

08004408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0320 	bic.w	r3, r3, #32
 8004456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a28      	ldr	r2, [pc, #160]	; (8004508 <TIM_OC2_SetConfig+0x100>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC2_SetConfig+0x6c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <TIM_OC2_SetConfig+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10d      	bne.n	8004490 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <TIM_OC2_SetConfig+0x100>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <TIM_OC2_SetConfig+0x104>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <TIM_OC2_SetConfig+0x108>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <TIM_OC2_SetConfig+0x10c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC2_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a19      	ldr	r2, [pc, #100]	; (8004518 <TIM_OC2_SetConfig+0x110>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d113      	bne.n	80044e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40013400 	.word	0x40013400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a27      	ldr	r2, [pc, #156]	; (8004618 <TIM_OC3_SetConfig+0xfc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC3_SetConfig+0x6a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <TIM_OC3_SetConfig+0x100>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10d      	bne.n	80045a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800458c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <TIM_OC3_SetConfig+0xfc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <TIM_OC3_SetConfig+0x100>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <TIM_OC3_SetConfig+0x104>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <TIM_OC3_SetConfig+0x108>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_OC3_SetConfig+0xae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <TIM_OC3_SetConfig+0x10c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d113      	bne.n	80045f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40013400 	.word	0x40013400
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800

0800462c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a28      	ldr	r2, [pc, #160]	; (800472c <TIM_OC4_SetConfig+0x100>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_OC4_SetConfig+0x6c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a27      	ldr	r2, [pc, #156]	; (8004730 <TIM_OC4_SetConfig+0x104>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10d      	bne.n	80046b4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800469e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	031b      	lsls	r3, r3, #12
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a1d      	ldr	r2, [pc, #116]	; (800472c <TIM_OC4_SetConfig+0x100>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00f      	beq.n	80046dc <TIM_OC4_SetConfig+0xb0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <TIM_OC4_SetConfig+0x104>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_OC4_SetConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <TIM_OC4_SetConfig+0x108>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_OC4_SetConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <TIM_OC4_SetConfig+0x10c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_OC4_SetConfig+0xb0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a19      	ldr	r2, [pc, #100]	; (800473c <TIM_OC4_SetConfig+0x110>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d113      	bne.n	8004704 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	019b      	lsls	r3, r3, #6
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <TIM_OC5_SetConfig+0xb4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00f      	beq.n	80047ba <TIM_OC5_SetConfig+0x7a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <TIM_OC5_SetConfig+0xb8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00b      	beq.n	80047ba <TIM_OC5_SetConfig+0x7a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <TIM_OC5_SetConfig+0xbc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d007      	beq.n	80047ba <TIM_OC5_SetConfig+0x7a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <TIM_OC5_SetConfig+0xc0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d003      	beq.n	80047ba <TIM_OC5_SetConfig+0x7a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a13      	ldr	r2, [pc, #76]	; (8004804 <TIM_OC5_SetConfig+0xc4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d109      	bne.n	80047ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	621a      	str	r2, [r3, #32]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40013400 	.word	0x40013400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40014400 	.word	0x40014400
 8004804:	40014800 	.word	0x40014800

08004808 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800484e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	051b      	lsls	r3, r3, #20
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <TIM_OC6_SetConfig+0xb8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00f      	beq.n	8004884 <TIM_OC6_SetConfig+0x7c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <TIM_OC6_SetConfig+0xbc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00b      	beq.n	8004884 <TIM_OC6_SetConfig+0x7c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <TIM_OC6_SetConfig+0xc0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <TIM_OC6_SetConfig+0x7c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a15      	ldr	r2, [pc, #84]	; (80048cc <TIM_OC6_SetConfig+0xc4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_OC6_SetConfig+0x7c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <TIM_OC6_SetConfig+0xc8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d109      	bne.n	8004898 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40013400 	.word	0x40013400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800

080048d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0201 	bic.w	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 030a 	bic.w	r3, r3, #10
 8004910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004932:	b480      	push	{r7}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f023 0210 	bic.w	r2, r3, #16
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800495c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	031b      	lsls	r3, r3, #12
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800496e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f043 0307 	orr.w	r3, r3, #7
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	021a      	lsls	r2, r3, #8
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2201      	movs	r2, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1a      	ldr	r2, [r3, #32]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	401a      	ands	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e047      	b.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40013400 	.word	0x40013400

08004b14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e087      	b.n	8004c40 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d106      	bne.n	8004bcc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d126      	bne.n	8004c2e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	051b      	lsls	r3, r3, #20
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a0d      	ldr	r2, [pc, #52]	; (8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d106      	bne.n	8004c2e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400

08004c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e042      	b.n	8004d78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f005 fe05 	bl	800a914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2224      	movs	r2, #36	; 0x24
 8004d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f924 	bl	8004f70 <UART_SetConfig>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e022      	b.n	8004d78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 fad2 	bl	80062e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fb59 	bl	8006428 <UART_CheckIdleState>
 8004d76:	4603      	mov	r3, r0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e04a      	b.n	8004e28 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f005 fdb5 	bl	800a914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8d4 	bl	8004f70 <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e02a      	b.n	8004e28 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 fa82 	bl	80062e4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004dfe:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0208 	orr.w	r2, r2, #8
 8004e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 fb01 	bl	8006428 <UART_CheckIdleState>
 8004e26:	4603      	mov	r3, r0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d168      	bne.n	8004f1a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Transmit_DMA+0x24>
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e061      	b.n	8004f1c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Transmit_DMA+0x36>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e05a      	b.n	8004f1c <HAL_UART_Transmit_DMA+0xec>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2221      	movs	r2, #33	; 0x21
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02c      	beq.n	8004ef6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <HAL_UART_Transmit_DMA+0xf4>)
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_UART_Transmit_DMA+0xf8>)
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <HAL_UART_Transmit_DMA+0xfc>)
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb8:	2200      	movs	r2, #0
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3328      	adds	r3, #40	; 0x28
 8004ecc:	461a      	mov	r2, r3
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	f7fc fc7c 	bl	80017cc <HAL_DMA_Start_IT>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2210      	movs	r2, #16
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e012      	b.n	8004f1c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2240      	movs	r2, #64	; 0x40
 8004efc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f14:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e000      	b.n	8004f1c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	080065cf 	.word	0x080065cf
 8004f28:	08006623 	.word	0x08006623
 8004f2c:	0800663f 	.word	0x0800663f

08004f30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	0000      	movs	r0, r0
	...

08004f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f70:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f74:	b08a      	sub	sp, #40	; 0x28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4ba4      	ldr	r3, [pc, #656]	; (8005240 <UART_SetConfig+0x2d0>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a99      	ldr	r2, [pc, #612]	; (8005244 <UART_SetConfig+0x2d4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ff6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005000:	430b      	orrs	r3, r1
 8005002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	f023 010f 	bic.w	r1, r3, #15
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a8a      	ldr	r2, [pc, #552]	; (8005248 <UART_SetConfig+0x2d8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d126      	bne.n	8005072 <UART_SetConfig+0x102>
 8005024:	4b89      	ldr	r3, [pc, #548]	; (800524c <UART_SetConfig+0x2dc>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d81a      	bhi.n	8005068 <UART_SetConfig+0xf8>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <UART_SetConfig+0xc8>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005049 	.word	0x08005049
 800503c:	08005059 	.word	0x08005059
 8005040:	08005051 	.word	0x08005051
 8005044:	08005061 	.word	0x08005061
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e0d6      	b.n	80051fe <UART_SetConfig+0x28e>
 8005050:	2302      	movs	r3, #2
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e0d2      	b.n	80051fe <UART_SetConfig+0x28e>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505e:	e0ce      	b.n	80051fe <UART_SetConfig+0x28e>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005066:	e0ca      	b.n	80051fe <UART_SetConfig+0x28e>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	bf00      	nop
 8005070:	e0c5      	b.n	80051fe <UART_SetConfig+0x28e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a76      	ldr	r2, [pc, #472]	; (8005250 <UART_SetConfig+0x2e0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d138      	bne.n	80050ee <UART_SetConfig+0x17e>
 800507c:	4b73      	ldr	r3, [pc, #460]	; (800524c <UART_SetConfig+0x2dc>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b0c      	cmp	r3, #12
 8005088:	d82c      	bhi.n	80050e4 <UART_SetConfig+0x174>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x120>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050c5 	.word	0x080050c5
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050e5 	.word	0x080050e5
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080050e5 	.word	0x080050e5
 80050a8:	080050e5 	.word	0x080050e5
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	080050e5 	.word	0x080050e5
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050dd 	.word	0x080050dd
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e098      	b.n	80051fe <UART_SetConfig+0x28e>
 80050cc:	2302      	movs	r3, #2
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e094      	b.n	80051fe <UART_SetConfig+0x28e>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e090      	b.n	80051fe <UART_SetConfig+0x28e>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e08c      	b.n	80051fe <UART_SetConfig+0x28e>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	bf00      	nop
 80050ec:	e087      	b.n	80051fe <UART_SetConfig+0x28e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a58      	ldr	r2, [pc, #352]	; (8005254 <UART_SetConfig+0x2e4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d125      	bne.n	8005144 <UART_SetConfig+0x1d4>
 80050f8:	4b54      	ldr	r3, [pc, #336]	; (800524c <UART_SetConfig+0x2dc>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005102:	2b10      	cmp	r3, #16
 8005104:	d011      	beq.n	800512a <UART_SetConfig+0x1ba>
 8005106:	2b10      	cmp	r3, #16
 8005108:	d802      	bhi.n	8005110 <UART_SetConfig+0x1a0>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <UART_SetConfig+0x1aa>
 800510e:	e014      	b.n	800513a <UART_SetConfig+0x1ca>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d006      	beq.n	8005122 <UART_SetConfig+0x1b2>
 8005114:	2b30      	cmp	r3, #48	; 0x30
 8005116:	d00c      	beq.n	8005132 <UART_SetConfig+0x1c2>
 8005118:	e00f      	b.n	800513a <UART_SetConfig+0x1ca>
 800511a:	2300      	movs	r3, #0
 800511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005120:	e06d      	b.n	80051fe <UART_SetConfig+0x28e>
 8005122:	2302      	movs	r3, #2
 8005124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005128:	e069      	b.n	80051fe <UART_SetConfig+0x28e>
 800512a:	2304      	movs	r3, #4
 800512c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005130:	e065      	b.n	80051fe <UART_SetConfig+0x28e>
 8005132:	2308      	movs	r3, #8
 8005134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005138:	e061      	b.n	80051fe <UART_SetConfig+0x28e>
 800513a:	2310      	movs	r3, #16
 800513c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005140:	bf00      	nop
 8005142:	e05c      	b.n	80051fe <UART_SetConfig+0x28e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a43      	ldr	r2, [pc, #268]	; (8005258 <UART_SetConfig+0x2e8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d125      	bne.n	800519a <UART_SetConfig+0x22a>
 800514e:	4b3f      	ldr	r3, [pc, #252]	; (800524c <UART_SetConfig+0x2dc>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d011      	beq.n	8005180 <UART_SetConfig+0x210>
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d802      	bhi.n	8005166 <UART_SetConfig+0x1f6>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <UART_SetConfig+0x200>
 8005164:	e014      	b.n	8005190 <UART_SetConfig+0x220>
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d006      	beq.n	8005178 <UART_SetConfig+0x208>
 800516a:	2bc0      	cmp	r3, #192	; 0xc0
 800516c:	d00c      	beq.n	8005188 <UART_SetConfig+0x218>
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x220>
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005176:	e042      	b.n	80051fe <UART_SetConfig+0x28e>
 8005178:	2302      	movs	r3, #2
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e03e      	b.n	80051fe <UART_SetConfig+0x28e>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e03a      	b.n	80051fe <UART_SetConfig+0x28e>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e036      	b.n	80051fe <UART_SetConfig+0x28e>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	bf00      	nop
 8005198:	e031      	b.n	80051fe <UART_SetConfig+0x28e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a29      	ldr	r2, [pc, #164]	; (8005244 <UART_SetConfig+0x2d4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d129      	bne.n	80051f8 <UART_SetConfig+0x288>
 80051a4:	4b29      	ldr	r3, [pc, #164]	; (800524c <UART_SetConfig+0x2dc>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d014      	beq.n	80051de <UART_SetConfig+0x26e>
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d802      	bhi.n	80051c0 <UART_SetConfig+0x250>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <UART_SetConfig+0x25e>
 80051be:	e016      	b.n	80051ee <UART_SetConfig+0x27e>
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c4:	d007      	beq.n	80051d6 <UART_SetConfig+0x266>
 80051c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ca:	d00c      	beq.n	80051e6 <UART_SetConfig+0x276>
 80051cc:	e00f      	b.n	80051ee <UART_SetConfig+0x27e>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d4:	e013      	b.n	80051fe <UART_SetConfig+0x28e>
 80051d6:	2302      	movs	r3, #2
 80051d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051dc:	e00f      	b.n	80051fe <UART_SetConfig+0x28e>
 80051de:	2304      	movs	r3, #4
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e4:	e00b      	b.n	80051fe <UART_SetConfig+0x28e>
 80051e6:	2308      	movs	r3, #8
 80051e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ec:	e007      	b.n	80051fe <UART_SetConfig+0x28e>
 80051ee:	2310      	movs	r3, #16
 80051f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f4:	bf00      	nop
 80051f6:	e002      	b.n	80051fe <UART_SetConfig+0x28e>
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a10      	ldr	r2, [pc, #64]	; (8005244 <UART_SetConfig+0x2d4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	f040 842e 	bne.w	8005a66 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800520a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800520e:	2b08      	cmp	r3, #8
 8005210:	f200 8169 	bhi.w	80054e6 <UART_SetConfig+0x576>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0x2ac>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	0800525d 	.word	0x0800525d
 8005220:	080054e7 	.word	0x080054e7
 8005224:	080052ff 	.word	0x080052ff
 8005228:	080054e7 	.word	0x080054e7
 800522c:	08005397 	.word	0x08005397
 8005230:	080054e7 	.word	0x080054e7
 8005234:	080054e7 	.word	0x080054e7
 8005238:	080054e7 	.word	0x080054e7
 800523c:	08005439 	.word	0x08005439
 8005240:	cfff69f3 	.word	0xcfff69f3
 8005244:	40008000 	.word	0x40008000
 8005248:	40013800 	.word	0x40013800
 800524c:	40021000 	.word	0x40021000
 8005250:	40004400 	.word	0x40004400
 8005254:	40004800 	.word	0x40004800
 8005258:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800525c:	f7fd ff14 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8005260:	4602      	mov	r2, r0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d044      	beq.n	80052f4 <UART_SetConfig+0x384>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b01      	cmp	r3, #1
 8005270:	d03e      	beq.n	80052f0 <UART_SetConfig+0x380>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b02      	cmp	r3, #2
 8005278:	d038      	beq.n	80052ec <UART_SetConfig+0x37c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b03      	cmp	r3, #3
 8005280:	d032      	beq.n	80052e8 <UART_SetConfig+0x378>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b04      	cmp	r3, #4
 8005288:	d02c      	beq.n	80052e4 <UART_SetConfig+0x374>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b05      	cmp	r3, #5
 8005290:	d026      	beq.n	80052e0 <UART_SetConfig+0x370>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b06      	cmp	r3, #6
 8005298:	d020      	beq.n	80052dc <UART_SetConfig+0x36c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b07      	cmp	r3, #7
 80052a0:	d01a      	beq.n	80052d8 <UART_SetConfig+0x368>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d014      	beq.n	80052d4 <UART_SetConfig+0x364>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2b09      	cmp	r3, #9
 80052b0:	d00e      	beq.n	80052d0 <UART_SetConfig+0x360>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b0a      	cmp	r3, #10
 80052b8:	d008      	beq.n	80052cc <UART_SetConfig+0x35c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b0b      	cmp	r3, #11
 80052c0:	d102      	bne.n	80052c8 <UART_SetConfig+0x358>
 80052c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c6:	e016      	b.n	80052f6 <UART_SetConfig+0x386>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e014      	b.n	80052f6 <UART_SetConfig+0x386>
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	e012      	b.n	80052f6 <UART_SetConfig+0x386>
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	e010      	b.n	80052f6 <UART_SetConfig+0x386>
 80052d4:	2320      	movs	r3, #32
 80052d6:	e00e      	b.n	80052f6 <UART_SetConfig+0x386>
 80052d8:	2310      	movs	r3, #16
 80052da:	e00c      	b.n	80052f6 <UART_SetConfig+0x386>
 80052dc:	230c      	movs	r3, #12
 80052de:	e00a      	b.n	80052f6 <UART_SetConfig+0x386>
 80052e0:	230a      	movs	r3, #10
 80052e2:	e008      	b.n	80052f6 <UART_SetConfig+0x386>
 80052e4:	2308      	movs	r3, #8
 80052e6:	e006      	b.n	80052f6 <UART_SetConfig+0x386>
 80052e8:	2306      	movs	r3, #6
 80052ea:	e004      	b.n	80052f6 <UART_SetConfig+0x386>
 80052ec:	2304      	movs	r3, #4
 80052ee:	e002      	b.n	80052f6 <UART_SetConfig+0x386>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e000      	b.n	80052f6 <UART_SetConfig+0x386>
 80052f4:	2301      	movs	r3, #1
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	617b      	str	r3, [r7, #20]
        break;
 80052fc:	e0f6      	b.n	80054ec <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d044      	beq.n	8005390 <UART_SetConfig+0x420>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b01      	cmp	r3, #1
 800530c:	d03e      	beq.n	800538c <UART_SetConfig+0x41c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b02      	cmp	r3, #2
 8005314:	d038      	beq.n	8005388 <UART_SetConfig+0x418>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b03      	cmp	r3, #3
 800531c:	d032      	beq.n	8005384 <UART_SetConfig+0x414>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b04      	cmp	r3, #4
 8005324:	d02c      	beq.n	8005380 <UART_SetConfig+0x410>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b05      	cmp	r3, #5
 800532c:	d026      	beq.n	800537c <UART_SetConfig+0x40c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b06      	cmp	r3, #6
 8005334:	d020      	beq.n	8005378 <UART_SetConfig+0x408>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	2b07      	cmp	r3, #7
 800533c:	d01a      	beq.n	8005374 <UART_SetConfig+0x404>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b08      	cmp	r3, #8
 8005344:	d014      	beq.n	8005370 <UART_SetConfig+0x400>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	2b09      	cmp	r3, #9
 800534c:	d00e      	beq.n	800536c <UART_SetConfig+0x3fc>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b0a      	cmp	r3, #10
 8005354:	d008      	beq.n	8005368 <UART_SetConfig+0x3f8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b0b      	cmp	r3, #11
 800535c:	d102      	bne.n	8005364 <UART_SetConfig+0x3f4>
 800535e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005362:	e016      	b.n	8005392 <UART_SetConfig+0x422>
 8005364:	4ba1      	ldr	r3, [pc, #644]	; (80055ec <UART_SetConfig+0x67c>)
 8005366:	e014      	b.n	8005392 <UART_SetConfig+0x422>
 8005368:	4ba1      	ldr	r3, [pc, #644]	; (80055f0 <UART_SetConfig+0x680>)
 800536a:	e012      	b.n	8005392 <UART_SetConfig+0x422>
 800536c:	4ba1      	ldr	r3, [pc, #644]	; (80055f4 <UART_SetConfig+0x684>)
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x422>
 8005370:	4ba1      	ldr	r3, [pc, #644]	; (80055f8 <UART_SetConfig+0x688>)
 8005372:	e00e      	b.n	8005392 <UART_SetConfig+0x422>
 8005374:	4ba1      	ldr	r3, [pc, #644]	; (80055fc <UART_SetConfig+0x68c>)
 8005376:	e00c      	b.n	8005392 <UART_SetConfig+0x422>
 8005378:	4ba1      	ldr	r3, [pc, #644]	; (8005600 <UART_SetConfig+0x690>)
 800537a:	e00a      	b.n	8005392 <UART_SetConfig+0x422>
 800537c:	4ba1      	ldr	r3, [pc, #644]	; (8005604 <UART_SetConfig+0x694>)
 800537e:	e008      	b.n	8005392 <UART_SetConfig+0x422>
 8005380:	4ba1      	ldr	r3, [pc, #644]	; (8005608 <UART_SetConfig+0x698>)
 8005382:	e006      	b.n	8005392 <UART_SetConfig+0x422>
 8005384:	4ba1      	ldr	r3, [pc, #644]	; (800560c <UART_SetConfig+0x69c>)
 8005386:	e004      	b.n	8005392 <UART_SetConfig+0x422>
 8005388:	4ba1      	ldr	r3, [pc, #644]	; (8005610 <UART_SetConfig+0x6a0>)
 800538a:	e002      	b.n	8005392 <UART_SetConfig+0x422>
 800538c:	4ba1      	ldr	r3, [pc, #644]	; (8005614 <UART_SetConfig+0x6a4>)
 800538e:	e000      	b.n	8005392 <UART_SetConfig+0x422>
 8005390:	4b96      	ldr	r3, [pc, #600]	; (80055ec <UART_SetConfig+0x67c>)
 8005392:	617b      	str	r3, [r7, #20]
        break;
 8005394:	e0aa      	b.n	80054ec <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005396:	f7fd fe09 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 800539a:	4602      	mov	r2, r0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d044      	beq.n	800542e <UART_SetConfig+0x4be>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d03e      	beq.n	800542a <UART_SetConfig+0x4ba>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d038      	beq.n	8005426 <UART_SetConfig+0x4b6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d032      	beq.n	8005422 <UART_SetConfig+0x4b2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d02c      	beq.n	800541e <UART_SetConfig+0x4ae>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d026      	beq.n	800541a <UART_SetConfig+0x4aa>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d020      	beq.n	8005416 <UART_SetConfig+0x4a6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b07      	cmp	r3, #7
 80053da:	d01a      	beq.n	8005412 <UART_SetConfig+0x4a2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d014      	beq.n	800540e <UART_SetConfig+0x49e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b09      	cmp	r3, #9
 80053ea:	d00e      	beq.n	800540a <UART_SetConfig+0x49a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2b0a      	cmp	r3, #10
 80053f2:	d008      	beq.n	8005406 <UART_SetConfig+0x496>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b0b      	cmp	r3, #11
 80053fa:	d102      	bne.n	8005402 <UART_SetConfig+0x492>
 80053fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005400:	e016      	b.n	8005430 <UART_SetConfig+0x4c0>
 8005402:	2301      	movs	r3, #1
 8005404:	e014      	b.n	8005430 <UART_SetConfig+0x4c0>
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	e012      	b.n	8005430 <UART_SetConfig+0x4c0>
 800540a:	2340      	movs	r3, #64	; 0x40
 800540c:	e010      	b.n	8005430 <UART_SetConfig+0x4c0>
 800540e:	2320      	movs	r3, #32
 8005410:	e00e      	b.n	8005430 <UART_SetConfig+0x4c0>
 8005412:	2310      	movs	r3, #16
 8005414:	e00c      	b.n	8005430 <UART_SetConfig+0x4c0>
 8005416:	230c      	movs	r3, #12
 8005418:	e00a      	b.n	8005430 <UART_SetConfig+0x4c0>
 800541a:	230a      	movs	r3, #10
 800541c:	e008      	b.n	8005430 <UART_SetConfig+0x4c0>
 800541e:	2308      	movs	r3, #8
 8005420:	e006      	b.n	8005430 <UART_SetConfig+0x4c0>
 8005422:	2306      	movs	r3, #6
 8005424:	e004      	b.n	8005430 <UART_SetConfig+0x4c0>
 8005426:	2304      	movs	r3, #4
 8005428:	e002      	b.n	8005430 <UART_SetConfig+0x4c0>
 800542a:	2302      	movs	r3, #2
 800542c:	e000      	b.n	8005430 <UART_SetConfig+0x4c0>
 800542e:	2301      	movs	r3, #1
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
        break;
 8005436:	e059      	b.n	80054ec <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d04e      	beq.n	80054de <UART_SetConfig+0x56e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b01      	cmp	r3, #1
 8005446:	d047      	beq.n	80054d8 <UART_SetConfig+0x568>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b02      	cmp	r3, #2
 800544e:	d040      	beq.n	80054d2 <UART_SetConfig+0x562>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	2b03      	cmp	r3, #3
 8005456:	d039      	beq.n	80054cc <UART_SetConfig+0x55c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b04      	cmp	r3, #4
 800545e:	d032      	beq.n	80054c6 <UART_SetConfig+0x556>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b05      	cmp	r3, #5
 8005466:	d02b      	beq.n	80054c0 <UART_SetConfig+0x550>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b06      	cmp	r3, #6
 800546e:	d024      	beq.n	80054ba <UART_SetConfig+0x54a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	2b07      	cmp	r3, #7
 8005476:	d01d      	beq.n	80054b4 <UART_SetConfig+0x544>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	2b08      	cmp	r3, #8
 800547e:	d016      	beq.n	80054ae <UART_SetConfig+0x53e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	2b09      	cmp	r3, #9
 8005486:	d00f      	beq.n	80054a8 <UART_SetConfig+0x538>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	2b0a      	cmp	r3, #10
 800548e:	d008      	beq.n	80054a2 <UART_SetConfig+0x532>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	2b0b      	cmp	r3, #11
 8005496:	d101      	bne.n	800549c <UART_SetConfig+0x52c>
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	e022      	b.n	80054e2 <UART_SetConfig+0x572>
 800549c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a0:	e01f      	b.n	80054e2 <UART_SetConfig+0x572>
 80054a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a6:	e01c      	b.n	80054e2 <UART_SetConfig+0x572>
 80054a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ac:	e019      	b.n	80054e2 <UART_SetConfig+0x572>
 80054ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b2:	e016      	b.n	80054e2 <UART_SetConfig+0x572>
 80054b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054b8:	e013      	b.n	80054e2 <UART_SetConfig+0x572>
 80054ba:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80054be:	e010      	b.n	80054e2 <UART_SetConfig+0x572>
 80054c0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80054c4:	e00d      	b.n	80054e2 <UART_SetConfig+0x572>
 80054c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ca:	e00a      	b.n	80054e2 <UART_SetConfig+0x572>
 80054cc:	f241 5355 	movw	r3, #5461	; 0x1555
 80054d0:	e007      	b.n	80054e2 <UART_SetConfig+0x572>
 80054d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054d6:	e004      	b.n	80054e2 <UART_SetConfig+0x572>
 80054d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054dc:	e001      	b.n	80054e2 <UART_SetConfig+0x572>
 80054de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e2:	617b      	str	r3, [r7, #20]
        break;
 80054e4:	e002      	b.n	80054ec <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	76fb      	strb	r3, [r7, #27]
        break;
 80054ea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 86cd 	beq.w	800628e <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	429a      	cmp	r2, r3
 8005502:	d305      	bcc.n	8005510 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	d903      	bls.n	8005518 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	76fb      	strb	r3, [r7, #27]
 8005514:	f000 bebb 	b.w	800628e <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8005518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800551c:	2b08      	cmp	r3, #8
 800551e:	f200 828d 	bhi.w	8005a3c <UART_SetConfig+0xacc>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0x5b8>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005a3d 	.word	0x08005a3d
 8005530:	080056b7 	.word	0x080056b7
 8005534:	08005a3d 	.word	0x08005a3d
 8005538:	080057ad 	.word	0x080057ad
 800553c:	08005a3d 	.word	0x08005a3d
 8005540:	08005a3d 	.word	0x08005a3d
 8005544:	08005a3d 	.word	0x08005a3d
 8005548:	080058eb 	.word	0x080058eb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800554c:	f7fd fd9c 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8005550:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4618      	mov	r0, r3
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d07d      	beq.n	800565e <UART_SetConfig+0x6ee>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b01      	cmp	r3, #1
 8005568:	d074      	beq.n	8005654 <UART_SetConfig+0x6e4>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b02      	cmp	r3, #2
 8005570:	d06b      	beq.n	800564a <UART_SetConfig+0x6da>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b03      	cmp	r3, #3
 8005578:	d062      	beq.n	8005640 <UART_SetConfig+0x6d0>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b04      	cmp	r3, #4
 8005580:	d059      	beq.n	8005636 <UART_SetConfig+0x6c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b05      	cmp	r3, #5
 8005588:	d050      	beq.n	800562c <UART_SetConfig+0x6bc>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b06      	cmp	r3, #6
 8005590:	d047      	beq.n	8005622 <UART_SetConfig+0x6b2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b07      	cmp	r3, #7
 8005598:	d03e      	beq.n	8005618 <UART_SetConfig+0x6a8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d01f      	beq.n	80055e2 <UART_SetConfig+0x672>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b09      	cmp	r3, #9
 80055a8:	d016      	beq.n	80055d8 <UART_SetConfig+0x668>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b0a      	cmp	r3, #10
 80055b0:	d00d      	beq.n	80055ce <UART_SetConfig+0x65e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b0b      	cmp	r3, #11
 80055b8:	d104      	bne.n	80055c4 <UART_SetConfig+0x654>
 80055ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055be:	f04f 0400 	mov.w	r4, #0
 80055c2:	e050      	b.n	8005666 <UART_SetConfig+0x6f6>
 80055c4:	f04f 0301 	mov.w	r3, #1
 80055c8:	f04f 0400 	mov.w	r4, #0
 80055cc:	e04b      	b.n	8005666 <UART_SetConfig+0x6f6>
 80055ce:	f04f 0380 	mov.w	r3, #128	; 0x80
 80055d2:	f04f 0400 	mov.w	r4, #0
 80055d6:	e046      	b.n	8005666 <UART_SetConfig+0x6f6>
 80055d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	e041      	b.n	8005666 <UART_SetConfig+0x6f6>
 80055e2:	f04f 0320 	mov.w	r3, #32
 80055e6:	f04f 0400 	mov.w	r4, #0
 80055ea:	e03c      	b.n	8005666 <UART_SetConfig+0x6f6>
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	0001e848 	.word	0x0001e848
 80055f4:	0003d090 	.word	0x0003d090
 80055f8:	0007a120 	.word	0x0007a120
 80055fc:	000f4240 	.word	0x000f4240
 8005600:	00145855 	.word	0x00145855
 8005604:	00186a00 	.word	0x00186a00
 8005608:	001e8480 	.word	0x001e8480
 800560c:	0028b0aa 	.word	0x0028b0aa
 8005610:	003d0900 	.word	0x003d0900
 8005614:	007a1200 	.word	0x007a1200
 8005618:	f04f 0310 	mov.w	r3, #16
 800561c:	f04f 0400 	mov.w	r4, #0
 8005620:	e021      	b.n	8005666 <UART_SetConfig+0x6f6>
 8005622:	f04f 030c 	mov.w	r3, #12
 8005626:	f04f 0400 	mov.w	r4, #0
 800562a:	e01c      	b.n	8005666 <UART_SetConfig+0x6f6>
 800562c:	f04f 030a 	mov.w	r3, #10
 8005630:	f04f 0400 	mov.w	r4, #0
 8005634:	e017      	b.n	8005666 <UART_SetConfig+0x6f6>
 8005636:	f04f 0308 	mov.w	r3, #8
 800563a:	f04f 0400 	mov.w	r4, #0
 800563e:	e012      	b.n	8005666 <UART_SetConfig+0x6f6>
 8005640:	f04f 0306 	mov.w	r3, #6
 8005644:	f04f 0400 	mov.w	r4, #0
 8005648:	e00d      	b.n	8005666 <UART_SetConfig+0x6f6>
 800564a:	f04f 0304 	mov.w	r3, #4
 800564e:	f04f 0400 	mov.w	r4, #0
 8005652:	e008      	b.n	8005666 <UART_SetConfig+0x6f6>
 8005654:	f04f 0302 	mov.w	r3, #2
 8005658:	f04f 0400 	mov.w	r4, #0
 800565c:	e003      	b.n	8005666 <UART_SetConfig+0x6f6>
 800565e:	f04f 0301 	mov.w	r3, #1
 8005662:	f04f 0400 	mov.w	r4, #0
 8005666:	461a      	mov	r2, r3
 8005668:	4623      	mov	r3, r4
 800566a:	f7fa fdd9 	bl	8000220 <__aeabi_uldivmod>
 800566e:	4603      	mov	r3, r0
 8005670:	460c      	mov	r4, r1
 8005672:	4619      	mov	r1, r3
 8005674:	4622      	mov	r2, r4
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	f04f 0400 	mov.w	r4, #0
 800567e:	0214      	lsls	r4, r2, #8
 8005680:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005684:	020b      	lsls	r3, r1, #8
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6852      	ldr	r2, [r2, #4]
 800568a:	0852      	lsrs	r2, r2, #1
 800568c:	4611      	mov	r1, r2
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	eb13 0b01 	adds.w	fp, r3, r1
 8005696:	eb44 0c02 	adc.w	ip, r4, r2
 800569a:	4658      	mov	r0, fp
 800569c:	4661      	mov	r1, ip
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f04f 0400 	mov.w	r4, #0
 80056a6:	461a      	mov	r2, r3
 80056a8:	4623      	mov	r3, r4
 80056aa:	f7fa fdb9 	bl	8000220 <__aeabi_uldivmod>
 80056ae:	4603      	mov	r3, r0
 80056b0:	460c      	mov	r4, r1
 80056b2:	61fb      	str	r3, [r7, #28]
            break;
 80056b4:	e1c5      	b.n	8005a42 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d05b      	beq.n	8005776 <UART_SetConfig+0x806>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d053      	beq.n	800576e <UART_SetConfig+0x7fe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d04b      	beq.n	8005766 <UART_SetConfig+0x7f6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d043      	beq.n	800575e <UART_SetConfig+0x7ee>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d03b      	beq.n	8005756 <UART_SetConfig+0x7e6>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d033      	beq.n	800574e <UART_SetConfig+0x7de>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d02b      	beq.n	8005746 <UART_SetConfig+0x7d6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b07      	cmp	r3, #7
 80056f4:	d023      	beq.n	800573e <UART_SetConfig+0x7ce>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d01b      	beq.n	8005736 <UART_SetConfig+0x7c6>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b09      	cmp	r3, #9
 8005704:	d013      	beq.n	800572e <UART_SetConfig+0x7be>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b0a      	cmp	r3, #10
 800570c:	d00b      	beq.n	8005726 <UART_SetConfig+0x7b6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b0b      	cmp	r3, #11
 8005714:	d103      	bne.n	800571e <UART_SetConfig+0x7ae>
 8005716:	4bae      	ldr	r3, [pc, #696]	; (80059d0 <UART_SetConfig+0xa60>)
 8005718:	f04f 0400 	mov.w	r4, #0
 800571c:	e02e      	b.n	800577c <UART_SetConfig+0x80c>
 800571e:	4bad      	ldr	r3, [pc, #692]	; (80059d4 <UART_SetConfig+0xa64>)
 8005720:	f04f 0400 	mov.w	r4, #0
 8005724:	e02a      	b.n	800577c <UART_SetConfig+0x80c>
 8005726:	4bac      	ldr	r3, [pc, #688]	; (80059d8 <UART_SetConfig+0xa68>)
 8005728:	f04f 0400 	mov.w	r4, #0
 800572c:	e026      	b.n	800577c <UART_SetConfig+0x80c>
 800572e:	4bab      	ldr	r3, [pc, #684]	; (80059dc <UART_SetConfig+0xa6c>)
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	e022      	b.n	800577c <UART_SetConfig+0x80c>
 8005736:	4baa      	ldr	r3, [pc, #680]	; (80059e0 <UART_SetConfig+0xa70>)
 8005738:	f04f 0400 	mov.w	r4, #0
 800573c:	e01e      	b.n	800577c <UART_SetConfig+0x80c>
 800573e:	4ba9      	ldr	r3, [pc, #676]	; (80059e4 <UART_SetConfig+0xa74>)
 8005740:	f04f 0400 	mov.w	r4, #0
 8005744:	e01a      	b.n	800577c <UART_SetConfig+0x80c>
 8005746:	a49e      	add	r4, pc, #632	; (adr r4, 80059c0 <UART_SetConfig+0xa50>)
 8005748:	e9d4 3400 	ldrd	r3, r4, [r4]
 800574c:	e016      	b.n	800577c <UART_SetConfig+0x80c>
 800574e:	4ba6      	ldr	r3, [pc, #664]	; (80059e8 <UART_SetConfig+0xa78>)
 8005750:	f04f 0400 	mov.w	r4, #0
 8005754:	e012      	b.n	800577c <UART_SetConfig+0x80c>
 8005756:	4ba5      	ldr	r3, [pc, #660]	; (80059ec <UART_SetConfig+0xa7c>)
 8005758:	f04f 0400 	mov.w	r4, #0
 800575c:	e00e      	b.n	800577c <UART_SetConfig+0x80c>
 800575e:	a49a      	add	r4, pc, #616	; (adr r4, 80059c8 <UART_SetConfig+0xa58>)
 8005760:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005764:	e00a      	b.n	800577c <UART_SetConfig+0x80c>
 8005766:	4ba2      	ldr	r3, [pc, #648]	; (80059f0 <UART_SetConfig+0xa80>)
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	e006      	b.n	800577c <UART_SetConfig+0x80c>
 800576e:	4ba1      	ldr	r3, [pc, #644]	; (80059f4 <UART_SetConfig+0xa84>)
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	e002      	b.n	800577c <UART_SetConfig+0x80c>
 8005776:	4b97      	ldr	r3, [pc, #604]	; (80059d4 <UART_SetConfig+0xa64>)
 8005778:	f04f 0400 	mov.w	r4, #0
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6852      	ldr	r2, [r2, #4]
 8005780:	0852      	lsrs	r2, r2, #1
 8005782:	4611      	mov	r1, r2
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	eb13 0b01 	adds.w	fp, r3, r1
 800578c:	eb44 0c02 	adc.w	ip, r4, r2
 8005790:	4658      	mov	r0, fp
 8005792:	4661      	mov	r1, ip
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f04f 0400 	mov.w	r4, #0
 800579c:	461a      	mov	r2, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	f7fa fd3e 	bl	8000220 <__aeabi_uldivmod>
 80057a4:	4603      	mov	r3, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	61fb      	str	r3, [r7, #28]
            break;
 80057aa:	e14a      	b.n	8005a42 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80057ac:	f7fd fbfe 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 80057b0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f04f 0100 	mov.w	r1, #0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d067      	beq.n	8005892 <UART_SetConfig+0x922>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d05e      	beq.n	8005888 <UART_SetConfig+0x918>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d055      	beq.n	800587e <UART_SetConfig+0x90e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d04c      	beq.n	8005874 <UART_SetConfig+0x904>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d043      	beq.n	800586a <UART_SetConfig+0x8fa>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d03a      	beq.n	8005860 <UART_SetConfig+0x8f0>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d031      	beq.n	8005856 <UART_SetConfig+0x8e6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b07      	cmp	r3, #7
 80057f8:	d028      	beq.n	800584c <UART_SetConfig+0x8dc>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d01f      	beq.n	8005842 <UART_SetConfig+0x8d2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	2b09      	cmp	r3, #9
 8005808:	d016      	beq.n	8005838 <UART_SetConfig+0x8c8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b0a      	cmp	r3, #10
 8005810:	d00d      	beq.n	800582e <UART_SetConfig+0x8be>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b0b      	cmp	r3, #11
 8005818:	d104      	bne.n	8005824 <UART_SetConfig+0x8b4>
 800581a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	e03a      	b.n	800589a <UART_SetConfig+0x92a>
 8005824:	f04f 0301 	mov.w	r3, #1
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	e035      	b.n	800589a <UART_SetConfig+0x92a>
 800582e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	e030      	b.n	800589a <UART_SetConfig+0x92a>
 8005838:	f04f 0340 	mov.w	r3, #64	; 0x40
 800583c:	f04f 0400 	mov.w	r4, #0
 8005840:	e02b      	b.n	800589a <UART_SetConfig+0x92a>
 8005842:	f04f 0320 	mov.w	r3, #32
 8005846:	f04f 0400 	mov.w	r4, #0
 800584a:	e026      	b.n	800589a <UART_SetConfig+0x92a>
 800584c:	f04f 0310 	mov.w	r3, #16
 8005850:	f04f 0400 	mov.w	r4, #0
 8005854:	e021      	b.n	800589a <UART_SetConfig+0x92a>
 8005856:	f04f 030c 	mov.w	r3, #12
 800585a:	f04f 0400 	mov.w	r4, #0
 800585e:	e01c      	b.n	800589a <UART_SetConfig+0x92a>
 8005860:	f04f 030a 	mov.w	r3, #10
 8005864:	f04f 0400 	mov.w	r4, #0
 8005868:	e017      	b.n	800589a <UART_SetConfig+0x92a>
 800586a:	f04f 0308 	mov.w	r3, #8
 800586e:	f04f 0400 	mov.w	r4, #0
 8005872:	e012      	b.n	800589a <UART_SetConfig+0x92a>
 8005874:	f04f 0306 	mov.w	r3, #6
 8005878:	f04f 0400 	mov.w	r4, #0
 800587c:	e00d      	b.n	800589a <UART_SetConfig+0x92a>
 800587e:	f04f 0304 	mov.w	r3, #4
 8005882:	f04f 0400 	mov.w	r4, #0
 8005886:	e008      	b.n	800589a <UART_SetConfig+0x92a>
 8005888:	f04f 0302 	mov.w	r3, #2
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	e003      	b.n	800589a <UART_SetConfig+0x92a>
 8005892:	f04f 0301 	mov.w	r3, #1
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	461a      	mov	r2, r3
 800589c:	4623      	mov	r3, r4
 800589e:	f7fa fcbf 	bl	8000220 <__aeabi_uldivmod>
 80058a2:	4603      	mov	r3, r0
 80058a4:	460c      	mov	r4, r1
 80058a6:	4619      	mov	r1, r3
 80058a8:	4622      	mov	r2, r4
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	f04f 0400 	mov.w	r4, #0
 80058b2:	0214      	lsls	r4, r2, #8
 80058b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058b8:	020b      	lsls	r3, r1, #8
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6852      	ldr	r2, [r2, #4]
 80058be:	0852      	lsrs	r2, r2, #1
 80058c0:	4611      	mov	r1, r2
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	eb13 0b01 	adds.w	fp, r3, r1
 80058ca:	eb44 0c02 	adc.w	ip, r4, r2
 80058ce:	4658      	mov	r0, fp
 80058d0:	4661      	mov	r1, ip
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f04f 0400 	mov.w	r4, #0
 80058da:	461a      	mov	r2, r3
 80058dc:	4623      	mov	r3, r4
 80058de:	f7fa fc9f 	bl	8000220 <__aeabi_uldivmod>
 80058e2:	4603      	mov	r3, r0
 80058e4:	460c      	mov	r4, r1
 80058e6:	61fb      	str	r3, [r7, #28]
            break;
 80058e8:	e0ab      	b.n	8005a42 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8088 	beq.w	8005a04 <UART_SetConfig+0xa94>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d05b      	beq.n	80059b4 <UART_SetConfig+0xa44>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2b02      	cmp	r3, #2
 8005902:	d052      	beq.n	80059aa <UART_SetConfig+0xa3a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b03      	cmp	r3, #3
 800590a:	d04a      	beq.n	80059a2 <UART_SetConfig+0xa32>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b04      	cmp	r3, #4
 8005912:	d041      	beq.n	8005998 <UART_SetConfig+0xa28>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b05      	cmp	r3, #5
 800591a:	d039      	beq.n	8005990 <UART_SetConfig+0xa20>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2b06      	cmp	r3, #6
 8005922:	d031      	beq.n	8005988 <UART_SetConfig+0xa18>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b07      	cmp	r3, #7
 800592a:	d028      	beq.n	800597e <UART_SetConfig+0xa0e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b08      	cmp	r3, #8
 8005932:	d01f      	beq.n	8005974 <UART_SetConfig+0xa04>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2b09      	cmp	r3, #9
 800593a:	d016      	beq.n	800596a <UART_SetConfig+0x9fa>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2b0a      	cmp	r3, #10
 8005942:	d00d      	beq.n	8005960 <UART_SetConfig+0x9f0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b0b      	cmp	r3, #11
 800594a:	d104      	bne.n	8005956 <UART_SetConfig+0x9e6>
 800594c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005950:	f04f 0400 	mov.w	r4, #0
 8005954:	e05a      	b.n	8005a0c <UART_SetConfig+0xa9c>
 8005956:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800595a:	f04f 0400 	mov.w	r4, #0
 800595e:	e055      	b.n	8005a0c <UART_SetConfig+0xa9c>
 8005960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	e050      	b.n	8005a0c <UART_SetConfig+0xa9c>
 800596a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800596e:	f04f 0400 	mov.w	r4, #0
 8005972:	e04b      	b.n	8005a0c <UART_SetConfig+0xa9c>
 8005974:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005978:	f04f 0400 	mov.w	r4, #0
 800597c:	e046      	b.n	8005a0c <UART_SetConfig+0xa9c>
 800597e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005982:	f04f 0400 	mov.w	r4, #0
 8005986:	e041      	b.n	8005a0c <UART_SetConfig+0xa9c>
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <UART_SetConfig+0xa88>)
 800598a:	f04f 0400 	mov.w	r4, #0
 800598e:	e03d      	b.n	8005a0c <UART_SetConfig+0xa9c>
 8005990:	4b1a      	ldr	r3, [pc, #104]	; (80059fc <UART_SetConfig+0xa8c>)
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	e039      	b.n	8005a0c <UART_SetConfig+0xa9c>
 8005998:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800599c:	f04f 0400 	mov.w	r4, #0
 80059a0:	e034      	b.n	8005a0c <UART_SetConfig+0xa9c>
 80059a2:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <UART_SetConfig+0xa90>)
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	e030      	b.n	8005a0c <UART_SetConfig+0xa9c>
 80059aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059ae:	f04f 0400 	mov.w	r4, #0
 80059b2:	e02b      	b.n	8005a0c <UART_SetConfig+0xa9c>
 80059b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059b8:	f04f 0400 	mov.w	r4, #0
 80059bc:	e026      	b.n	8005a0c <UART_SetConfig+0xa9c>
 80059be:	bf00      	nop
 80059c0:	14585500 	.word	0x14585500
 80059c4:	00000000 	.word	0x00000000
 80059c8:	28b0aa00 	.word	0x28b0aa00
 80059cc:	00000000 	.word	0x00000000
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	f4240000 	.word	0xf4240000
 80059d8:	01e84800 	.word	0x01e84800
 80059dc:	03d09000 	.word	0x03d09000
 80059e0:	07a12000 	.word	0x07a12000
 80059e4:	0f424000 	.word	0x0f424000
 80059e8:	186a0000 	.word	0x186a0000
 80059ec:	1e848000 	.word	0x1e848000
 80059f0:	3d090000 	.word	0x3d090000
 80059f4:	7a120000 	.word	0x7a120000
 80059f8:	000aaa00 	.word	0x000aaa00
 80059fc:	000ccc00 	.word	0x000ccc00
 8005a00:	00155500 	.word	0x00155500
 8005a04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a08:	f04f 0400 	mov.w	r4, #0
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6852      	ldr	r2, [r2, #4]
 8005a10:	0852      	lsrs	r2, r2, #1
 8005a12:	4611      	mov	r1, r2
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	eb13 0b01 	adds.w	fp, r3, r1
 8005a1c:	eb44 0c02 	adc.w	ip, r4, r2
 8005a20:	4658      	mov	r0, fp
 8005a22:	4661      	mov	r1, ip
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f04f 0400 	mov.w	r4, #0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4623      	mov	r3, r4
 8005a30:	f7fa fbf6 	bl	8000220 <__aeabi_uldivmod>
 8005a34:	4603      	mov	r3, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	61fb      	str	r3, [r7, #28]
            break;
 8005a3a:	e002      	b.n	8005a42 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	76fb      	strb	r3, [r7, #27]
            break;
 8005a40:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a48:	d309      	bcc.n	8005a5e <UART_SetConfig+0xaee>
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a50:	d205      	bcs.n	8005a5e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	60da      	str	r2, [r3, #12]
 8005a5a:	f000 bc18 	b.w	800628e <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	76fb      	strb	r3, [r7, #27]
 8005a62:	f000 bc14 	b.w	800628e <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6e:	f040 8204 	bne.w	8005e7a <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8005a72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	f200 81df 	bhi.w	8005e3a <UART_SetConfig+0xeca>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <UART_SetConfig+0xb14>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005b61 	.word	0x08005b61
 8005a8c:	08005c19 	.word	0x08005c19
 8005a90:	08005e3b 	.word	0x08005e3b
 8005a94:	08005cc1 	.word	0x08005cc1
 8005a98:	08005e3b 	.word	0x08005e3b
 8005a9c:	08005e3b 	.word	0x08005e3b
 8005aa0:	08005e3b 	.word	0x08005e3b
 8005aa4:	08005d79 	.word	0x08005d79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fd faee 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8005aac:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d044      	beq.n	8005b40 <UART_SetConfig+0xbd0>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d03e      	beq.n	8005b3c <UART_SetConfig+0xbcc>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d038      	beq.n	8005b38 <UART_SetConfig+0xbc8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d032      	beq.n	8005b34 <UART_SetConfig+0xbc4>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d02c      	beq.n	8005b30 <UART_SetConfig+0xbc0>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d026      	beq.n	8005b2c <UART_SetConfig+0xbbc>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d020      	beq.n	8005b28 <UART_SetConfig+0xbb8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	d01a      	beq.n	8005b24 <UART_SetConfig+0xbb4>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d014      	beq.n	8005b20 <UART_SetConfig+0xbb0>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b09      	cmp	r3, #9
 8005afc:	d00e      	beq.n	8005b1c <UART_SetConfig+0xbac>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	d008      	beq.n	8005b18 <UART_SetConfig+0xba8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b0b      	cmp	r3, #11
 8005b0c:	d102      	bne.n	8005b14 <UART_SetConfig+0xba4>
 8005b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b12:	e016      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	e012      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	e010      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b20:	2320      	movs	r3, #32
 8005b22:	e00e      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b24:	2310      	movs	r3, #16
 8005b26:	e00c      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	e00a      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b2c:	230a      	movs	r3, #10
 8005b2e:	e008      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b30:	2308      	movs	r3, #8
 8005b32:	e006      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b34:	2306      	movs	r3, #6
 8005b36:	e004      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	e002      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e000      	b.n	8005b42 <UART_SetConfig+0xbd2>
 8005b40:	2301      	movs	r3, #1
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	005a      	lsls	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	61fb      	str	r3, [r7, #28]
        break;
 8005b5e:	e16f      	b.n	8005e40 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b60:	f7fd faa8 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8005b64:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d044      	beq.n	8005bf8 <UART_SetConfig+0xc88>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d03e      	beq.n	8005bf4 <UART_SetConfig+0xc84>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d038      	beq.n	8005bf0 <UART_SetConfig+0xc80>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d032      	beq.n	8005bec <UART_SetConfig+0xc7c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d02c      	beq.n	8005be8 <UART_SetConfig+0xc78>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d026      	beq.n	8005be4 <UART_SetConfig+0xc74>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d020      	beq.n	8005be0 <UART_SetConfig+0xc70>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b07      	cmp	r3, #7
 8005ba4:	d01a      	beq.n	8005bdc <UART_SetConfig+0xc6c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	d014      	beq.n	8005bd8 <UART_SetConfig+0xc68>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b09      	cmp	r3, #9
 8005bb4:	d00e      	beq.n	8005bd4 <UART_SetConfig+0xc64>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b0a      	cmp	r3, #10
 8005bbc:	d008      	beq.n	8005bd0 <UART_SetConfig+0xc60>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b0b      	cmp	r3, #11
 8005bc4:	d102      	bne.n	8005bcc <UART_SetConfig+0xc5c>
 8005bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bca:	e016      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e014      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	e012      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bd4:	2340      	movs	r3, #64	; 0x40
 8005bd6:	e010      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bd8:	2320      	movs	r3, #32
 8005bda:	e00e      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	e00c      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005be0:	230c      	movs	r3, #12
 8005be2:	e00a      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005be4:	230a      	movs	r3, #10
 8005be6:	e008      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005be8:	2308      	movs	r3, #8
 8005bea:	e006      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bec:	2306      	movs	r3, #6
 8005bee:	e004      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e002      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e000      	b.n	8005bfa <UART_SetConfig+0xc8a>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	005a      	lsls	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	441a      	add	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	61fb      	str	r3, [r7, #28]
        break;
 8005c16:	e113      	b.n	8005e40 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d043      	beq.n	8005ca8 <UART_SetConfig+0xd38>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d03d      	beq.n	8005ca4 <UART_SetConfig+0xd34>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d037      	beq.n	8005ca0 <UART_SetConfig+0xd30>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d031      	beq.n	8005c9c <UART_SetConfig+0xd2c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d02b      	beq.n	8005c98 <UART_SetConfig+0xd28>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	2b05      	cmp	r3, #5
 8005c46:	d025      	beq.n	8005c94 <UART_SetConfig+0xd24>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	2b06      	cmp	r3, #6
 8005c4e:	d01f      	beq.n	8005c90 <UART_SetConfig+0xd20>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b07      	cmp	r3, #7
 8005c56:	d019      	beq.n	8005c8c <UART_SetConfig+0xd1c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d013      	beq.n	8005c88 <UART_SetConfig+0xd18>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b09      	cmp	r3, #9
 8005c66:	d00d      	beq.n	8005c84 <UART_SetConfig+0xd14>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b0a      	cmp	r3, #10
 8005c6e:	d007      	beq.n	8005c80 <UART_SetConfig+0xd10>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b0b      	cmp	r3, #11
 8005c76:	d101      	bne.n	8005c7c <UART_SetConfig+0xd0c>
 8005c78:	4b8d      	ldr	r3, [pc, #564]	; (8005eb0 <UART_SetConfig+0xf40>)
 8005c7a:	e016      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c7c:	4b8d      	ldr	r3, [pc, #564]	; (8005eb4 <UART_SetConfig+0xf44>)
 8005c7e:	e014      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c80:	4b8d      	ldr	r3, [pc, #564]	; (8005eb8 <UART_SetConfig+0xf48>)
 8005c82:	e012      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c84:	4b8d      	ldr	r3, [pc, #564]	; (8005ebc <UART_SetConfig+0xf4c>)
 8005c86:	e010      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c88:	4b8d      	ldr	r3, [pc, #564]	; (8005ec0 <UART_SetConfig+0xf50>)
 8005c8a:	e00e      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c8c:	4b8d      	ldr	r3, [pc, #564]	; (8005ec4 <UART_SetConfig+0xf54>)
 8005c8e:	e00c      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c90:	4b8d      	ldr	r3, [pc, #564]	; (8005ec8 <UART_SetConfig+0xf58>)
 8005c92:	e00a      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c94:	4b8d      	ldr	r3, [pc, #564]	; (8005ecc <UART_SetConfig+0xf5c>)
 8005c96:	e008      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c98:	4b8d      	ldr	r3, [pc, #564]	; (8005ed0 <UART_SetConfig+0xf60>)
 8005c9a:	e006      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005c9c:	4b8d      	ldr	r3, [pc, #564]	; (8005ed4 <UART_SetConfig+0xf64>)
 8005c9e:	e004      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005ca0:	4b8d      	ldr	r3, [pc, #564]	; (8005ed8 <UART_SetConfig+0xf68>)
 8005ca2:	e002      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005ca4:	4b8d      	ldr	r3, [pc, #564]	; (8005edc <UART_SetConfig+0xf6c>)
 8005ca6:	e000      	b.n	8005caa <UART_SetConfig+0xd3a>
 8005ca8:	4b82      	ldr	r3, [pc, #520]	; (8005eb4 <UART_SetConfig+0xf44>)
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6852      	ldr	r2, [r2, #4]
 8005cae:	0852      	lsrs	r2, r2, #1
 8005cb0:	441a      	add	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	61fb      	str	r3, [r7, #28]
        break;
 8005cbe:	e0bf      	b.n	8005e40 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc0:	f7fd f974 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8005cc4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d044      	beq.n	8005d58 <UART_SetConfig+0xde8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d03e      	beq.n	8005d54 <UART_SetConfig+0xde4>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d038      	beq.n	8005d50 <UART_SetConfig+0xde0>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d032      	beq.n	8005d4c <UART_SetConfig+0xddc>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d02c      	beq.n	8005d48 <UART_SetConfig+0xdd8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d026      	beq.n	8005d44 <UART_SetConfig+0xdd4>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d020      	beq.n	8005d40 <UART_SetConfig+0xdd0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b07      	cmp	r3, #7
 8005d04:	d01a      	beq.n	8005d3c <UART_SetConfig+0xdcc>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d014      	beq.n	8005d38 <UART_SetConfig+0xdc8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b09      	cmp	r3, #9
 8005d14:	d00e      	beq.n	8005d34 <UART_SetConfig+0xdc4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b0a      	cmp	r3, #10
 8005d1c:	d008      	beq.n	8005d30 <UART_SetConfig+0xdc0>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b0b      	cmp	r3, #11
 8005d24:	d102      	bne.n	8005d2c <UART_SetConfig+0xdbc>
 8005d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d2a:	e016      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e014      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	e012      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d34:	2340      	movs	r3, #64	; 0x40
 8005d36:	e010      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d38:	2320      	movs	r3, #32
 8005d3a:	e00e      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	e00c      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d40:	230c      	movs	r3, #12
 8005d42:	e00a      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d44:	230a      	movs	r3, #10
 8005d46:	e008      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	e006      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d4c:	2306      	movs	r3, #6
 8005d4e:	e004      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d50:	2304      	movs	r3, #4
 8005d52:	e002      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e000      	b.n	8005d5a <UART_SetConfig+0xdea>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	005a      	lsls	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	441a      	add	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	61fb      	str	r3, [r7, #28]
        break;
 8005d76:	e063      	b.n	8005e40 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d04f      	beq.n	8005e20 <UART_SetConfig+0xeb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d048      	beq.n	8005e1a <UART_SetConfig+0xeaa>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d041      	beq.n	8005e14 <UART_SetConfig+0xea4>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d03a      	beq.n	8005e0e <UART_SetConfig+0xe9e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d033      	beq.n	8005e08 <UART_SetConfig+0xe98>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	2b05      	cmp	r3, #5
 8005da6:	d02c      	beq.n	8005e02 <UART_SetConfig+0xe92>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b06      	cmp	r3, #6
 8005dae:	d025      	beq.n	8005dfc <UART_SetConfig+0xe8c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b07      	cmp	r3, #7
 8005db6:	d01e      	beq.n	8005df6 <UART_SetConfig+0xe86>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d017      	beq.n	8005df0 <UART_SetConfig+0xe80>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d010      	beq.n	8005dea <UART_SetConfig+0xe7a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b0a      	cmp	r3, #10
 8005dce:	d009      	beq.n	8005de4 <UART_SetConfig+0xe74>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b0b      	cmp	r3, #11
 8005dd6:	d102      	bne.n	8005dde <UART_SetConfig+0xe6e>
 8005dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ddc:	e022      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005de2:	e01f      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de8:	e01c      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dee:	e019      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005df4:	e016      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dfa:	e013      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005dfc:	f241 5354 	movw	r3, #5460	; 0x1554
 8005e00:	e010      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005e02:	f641 1398 	movw	r3, #6552	; 0x1998
 8005e06:	e00d      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e0c:	e00a      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005e0e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005e12:	e007      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e18:	e004      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1e:	e001      	b.n	8005e24 <UART_SetConfig+0xeb4>
 8005e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6852      	ldr	r2, [r2, #4]
 8005e28:	0852      	lsrs	r2, r2, #1
 8005e2a:	441a      	add	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	61fb      	str	r3, [r7, #28]
        break;
 8005e38:	e002      	b.n	8005e40 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	76fb      	strb	r3, [r7, #27]
        break;
 8005e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b0f      	cmp	r3, #15
 8005e44:	d916      	bls.n	8005e74 <UART_SetConfig+0xf04>
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d212      	bcs.n	8005e74 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f023 030f 	bic.w	r3, r3, #15
 8005e56:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	89fb      	ldrh	r3, [r7, #14]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	89fa      	ldrh	r2, [r7, #14]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	e20c      	b.n	800628e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	76fb      	strb	r3, [r7, #27]
 8005e78:	e209      	b.n	800628e <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	f200 81f4 	bhi.w	800626c <UART_SetConfig+0x12fc>
 8005e84:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0xf1c>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005ee1 	.word	0x08005ee1
 8005e90:	08005f97 	.word	0x08005f97
 8005e94:	0800604d 	.word	0x0800604d
 8005e98:	0800626d 	.word	0x0800626d
 8005e9c:	080060f7 	.word	0x080060f7
 8005ea0:	0800626d 	.word	0x0800626d
 8005ea4:	0800626d 	.word	0x0800626d
 8005ea8:	0800626d 	.word	0x0800626d
 8005eac:	080061ad 	.word	0x080061ad
 8005eb0:	0001e848 	.word	0x0001e848
 8005eb4:	01e84800 	.word	0x01e84800
 8005eb8:	0003d090 	.word	0x0003d090
 8005ebc:	0007a120 	.word	0x0007a120
 8005ec0:	000f4240 	.word	0x000f4240
 8005ec4:	001e8480 	.word	0x001e8480
 8005ec8:	0028b0aa 	.word	0x0028b0aa
 8005ecc:	0030d400 	.word	0x0030d400
 8005ed0:	003d0900 	.word	0x003d0900
 8005ed4:	00516154 	.word	0x00516154
 8005ed8:	007a1200 	.word	0x007a1200
 8005edc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f7fd f8d2 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8005ee4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d044      	beq.n	8005f78 <UART_SetConfig+0x1008>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d03e      	beq.n	8005f74 <UART_SetConfig+0x1004>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d038      	beq.n	8005f70 <UART_SetConfig+0x1000>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d032      	beq.n	8005f6c <UART_SetConfig+0xffc>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d02c      	beq.n	8005f68 <UART_SetConfig+0xff8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d026      	beq.n	8005f64 <UART_SetConfig+0xff4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b06      	cmp	r3, #6
 8005f1c:	d020      	beq.n	8005f60 <UART_SetConfig+0xff0>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b07      	cmp	r3, #7
 8005f24:	d01a      	beq.n	8005f5c <UART_SetConfig+0xfec>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d014      	beq.n	8005f58 <UART_SetConfig+0xfe8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b09      	cmp	r3, #9
 8005f34:	d00e      	beq.n	8005f54 <UART_SetConfig+0xfe4>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	2b0a      	cmp	r3, #10
 8005f3c:	d008      	beq.n	8005f50 <UART_SetConfig+0xfe0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b0b      	cmp	r3, #11
 8005f44:	d102      	bne.n	8005f4c <UART_SetConfig+0xfdc>
 8005f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f4a:	e016      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e014      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	e012      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	e010      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f58:	2320      	movs	r3, #32
 8005f5a:	e00e      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	e00c      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f60:	230c      	movs	r3, #12
 8005f62:	e00a      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f64:	230a      	movs	r3, #10
 8005f66:	e008      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	e006      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f6c:	2306      	movs	r3, #6
 8005f6e:	e004      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f70:	2304      	movs	r3, #4
 8005f72:	e002      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e000      	b.n	8005f7a <UART_SetConfig+0x100a>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	441a      	add	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	61fb      	str	r3, [r7, #28]
        break;
 8005f94:	e16d      	b.n	8006272 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f96:	f7fd f88d 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8005f9a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d044      	beq.n	800602e <UART_SetConfig+0x10be>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d03e      	beq.n	800602a <UART_SetConfig+0x10ba>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d038      	beq.n	8006026 <UART_SetConfig+0x10b6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d032      	beq.n	8006022 <UART_SetConfig+0x10b2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d02c      	beq.n	800601e <UART_SetConfig+0x10ae>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d026      	beq.n	800601a <UART_SetConfig+0x10aa>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b06      	cmp	r3, #6
 8005fd2:	d020      	beq.n	8006016 <UART_SetConfig+0x10a6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b07      	cmp	r3, #7
 8005fda:	d01a      	beq.n	8006012 <UART_SetConfig+0x10a2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d014      	beq.n	800600e <UART_SetConfig+0x109e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b09      	cmp	r3, #9
 8005fea:	d00e      	beq.n	800600a <UART_SetConfig+0x109a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b0a      	cmp	r3, #10
 8005ff2:	d008      	beq.n	8006006 <UART_SetConfig+0x1096>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b0b      	cmp	r3, #11
 8005ffa:	d102      	bne.n	8006002 <UART_SetConfig+0x1092>
 8005ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006000:	e016      	b.n	8006030 <UART_SetConfig+0x10c0>
 8006002:	2301      	movs	r3, #1
 8006004:	e014      	b.n	8006030 <UART_SetConfig+0x10c0>
 8006006:	2380      	movs	r3, #128	; 0x80
 8006008:	e012      	b.n	8006030 <UART_SetConfig+0x10c0>
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	e010      	b.n	8006030 <UART_SetConfig+0x10c0>
 800600e:	2320      	movs	r3, #32
 8006010:	e00e      	b.n	8006030 <UART_SetConfig+0x10c0>
 8006012:	2310      	movs	r3, #16
 8006014:	e00c      	b.n	8006030 <UART_SetConfig+0x10c0>
 8006016:	230c      	movs	r3, #12
 8006018:	e00a      	b.n	8006030 <UART_SetConfig+0x10c0>
 800601a:	230a      	movs	r3, #10
 800601c:	e008      	b.n	8006030 <UART_SetConfig+0x10c0>
 800601e:	2308      	movs	r3, #8
 8006020:	e006      	b.n	8006030 <UART_SetConfig+0x10c0>
 8006022:	2306      	movs	r3, #6
 8006024:	e004      	b.n	8006030 <UART_SetConfig+0x10c0>
 8006026:	2304      	movs	r3, #4
 8006028:	e002      	b.n	8006030 <UART_SetConfig+0x10c0>
 800602a:	2302      	movs	r3, #2
 800602c:	e000      	b.n	8006030 <UART_SetConfig+0x10c0>
 800602e:	2301      	movs	r3, #1
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	fbb2 f2f3 	udiv	r2, r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	441a      	add	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	fbb2 f3f3 	udiv	r3, r2, r3
 8006046:	b29b      	uxth	r3, r3
 8006048:	61fb      	str	r3, [r7, #28]
        break;
 800604a:	e112      	b.n	8006272 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d044      	beq.n	80060de <UART_SetConfig+0x116e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2b01      	cmp	r3, #1
 800605a:	d03e      	beq.n	80060da <UART_SetConfig+0x116a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	2b02      	cmp	r3, #2
 8006062:	d038      	beq.n	80060d6 <UART_SetConfig+0x1166>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b03      	cmp	r3, #3
 800606a:	d032      	beq.n	80060d2 <UART_SetConfig+0x1162>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b04      	cmp	r3, #4
 8006072:	d02c      	beq.n	80060ce <UART_SetConfig+0x115e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b05      	cmp	r3, #5
 800607a:	d026      	beq.n	80060ca <UART_SetConfig+0x115a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b06      	cmp	r3, #6
 8006082:	d020      	beq.n	80060c6 <UART_SetConfig+0x1156>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b07      	cmp	r3, #7
 800608a:	d01a      	beq.n	80060c2 <UART_SetConfig+0x1152>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b08      	cmp	r3, #8
 8006092:	d014      	beq.n	80060be <UART_SetConfig+0x114e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b09      	cmp	r3, #9
 800609a:	d00e      	beq.n	80060ba <UART_SetConfig+0x114a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2b0a      	cmp	r3, #10
 80060a2:	d008      	beq.n	80060b6 <UART_SetConfig+0x1146>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b0b      	cmp	r3, #11
 80060aa:	d102      	bne.n	80060b2 <UART_SetConfig+0x1142>
 80060ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 80060b0:	e016      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060b2:	4b81      	ldr	r3, [pc, #516]	; (80062b8 <UART_SetConfig+0x1348>)
 80060b4:	e014      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060b6:	4b81      	ldr	r3, [pc, #516]	; (80062bc <UART_SetConfig+0x134c>)
 80060b8:	e012      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060ba:	4b81      	ldr	r3, [pc, #516]	; (80062c0 <UART_SetConfig+0x1350>)
 80060bc:	e010      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060be:	4b81      	ldr	r3, [pc, #516]	; (80062c4 <UART_SetConfig+0x1354>)
 80060c0:	e00e      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060c2:	4b81      	ldr	r3, [pc, #516]	; (80062c8 <UART_SetConfig+0x1358>)
 80060c4:	e00c      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060c6:	4b81      	ldr	r3, [pc, #516]	; (80062cc <UART_SetConfig+0x135c>)
 80060c8:	e00a      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060ca:	4b81      	ldr	r3, [pc, #516]	; (80062d0 <UART_SetConfig+0x1360>)
 80060cc:	e008      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060ce:	4b81      	ldr	r3, [pc, #516]	; (80062d4 <UART_SetConfig+0x1364>)
 80060d0:	e006      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060d2:	4b81      	ldr	r3, [pc, #516]	; (80062d8 <UART_SetConfig+0x1368>)
 80060d4:	e004      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060d6:	4b81      	ldr	r3, [pc, #516]	; (80062dc <UART_SetConfig+0x136c>)
 80060d8:	e002      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060da:	4b81      	ldr	r3, [pc, #516]	; (80062e0 <UART_SetConfig+0x1370>)
 80060dc:	e000      	b.n	80060e0 <UART_SetConfig+0x1170>
 80060de:	4b76      	ldr	r3, [pc, #472]	; (80062b8 <UART_SetConfig+0x1348>)
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6852      	ldr	r2, [r2, #4]
 80060e4:	0852      	lsrs	r2, r2, #1
 80060e6:	441a      	add	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	61fb      	str	r3, [r7, #28]
        break;
 80060f4:	e0bd      	b.n	8006272 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f6:	f7fc ff59 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 80060fa:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	d044      	beq.n	800618e <UART_SetConfig+0x121e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b01      	cmp	r3, #1
 800610a:	d03e      	beq.n	800618a <UART_SetConfig+0x121a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b02      	cmp	r3, #2
 8006112:	d038      	beq.n	8006186 <UART_SetConfig+0x1216>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b03      	cmp	r3, #3
 800611a:	d032      	beq.n	8006182 <UART_SetConfig+0x1212>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b04      	cmp	r3, #4
 8006122:	d02c      	beq.n	800617e <UART_SetConfig+0x120e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b05      	cmp	r3, #5
 800612a:	d026      	beq.n	800617a <UART_SetConfig+0x120a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b06      	cmp	r3, #6
 8006132:	d020      	beq.n	8006176 <UART_SetConfig+0x1206>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	2b07      	cmp	r3, #7
 800613a:	d01a      	beq.n	8006172 <UART_SetConfig+0x1202>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b08      	cmp	r3, #8
 8006142:	d014      	beq.n	800616e <UART_SetConfig+0x11fe>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	2b09      	cmp	r3, #9
 800614a:	d00e      	beq.n	800616a <UART_SetConfig+0x11fa>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	2b0a      	cmp	r3, #10
 8006152:	d008      	beq.n	8006166 <UART_SetConfig+0x11f6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b0b      	cmp	r3, #11
 800615a:	d102      	bne.n	8006162 <UART_SetConfig+0x11f2>
 800615c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006160:	e016      	b.n	8006190 <UART_SetConfig+0x1220>
 8006162:	2301      	movs	r3, #1
 8006164:	e014      	b.n	8006190 <UART_SetConfig+0x1220>
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	e012      	b.n	8006190 <UART_SetConfig+0x1220>
 800616a:	2340      	movs	r3, #64	; 0x40
 800616c:	e010      	b.n	8006190 <UART_SetConfig+0x1220>
 800616e:	2320      	movs	r3, #32
 8006170:	e00e      	b.n	8006190 <UART_SetConfig+0x1220>
 8006172:	2310      	movs	r3, #16
 8006174:	e00c      	b.n	8006190 <UART_SetConfig+0x1220>
 8006176:	230c      	movs	r3, #12
 8006178:	e00a      	b.n	8006190 <UART_SetConfig+0x1220>
 800617a:	230a      	movs	r3, #10
 800617c:	e008      	b.n	8006190 <UART_SetConfig+0x1220>
 800617e:	2308      	movs	r3, #8
 8006180:	e006      	b.n	8006190 <UART_SetConfig+0x1220>
 8006182:	2306      	movs	r3, #6
 8006184:	e004      	b.n	8006190 <UART_SetConfig+0x1220>
 8006186:	2304      	movs	r3, #4
 8006188:	e002      	b.n	8006190 <UART_SetConfig+0x1220>
 800618a:	2302      	movs	r3, #2
 800618c:	e000      	b.n	8006190 <UART_SetConfig+0x1220>
 800618e:	2301      	movs	r3, #1
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	fbb2 f2f3 	udiv	r2, r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	441a      	add	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	61fb      	str	r3, [r7, #28]
        break;
 80061aa:	e062      	b.n	8006272 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d04e      	beq.n	8006252 <UART_SetConfig+0x12e2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d047      	beq.n	800624c <UART_SetConfig+0x12dc>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d040      	beq.n	8006246 <UART_SetConfig+0x12d6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d039      	beq.n	8006240 <UART_SetConfig+0x12d0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d032      	beq.n	800623a <UART_SetConfig+0x12ca>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b05      	cmp	r3, #5
 80061da:	d02b      	beq.n	8006234 <UART_SetConfig+0x12c4>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b06      	cmp	r3, #6
 80061e2:	d024      	beq.n	800622e <UART_SetConfig+0x12be>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	2b07      	cmp	r3, #7
 80061ea:	d01d      	beq.n	8006228 <UART_SetConfig+0x12b8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d016      	beq.n	8006222 <UART_SetConfig+0x12b2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	d00f      	beq.n	800621c <UART_SetConfig+0x12ac>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2b0a      	cmp	r3, #10
 8006202:	d008      	beq.n	8006216 <UART_SetConfig+0x12a6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2b0b      	cmp	r3, #11
 800620a:	d101      	bne.n	8006210 <UART_SetConfig+0x12a0>
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	e022      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006214:	e01f      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800621a:	e01c      	b.n	8006256 <UART_SetConfig+0x12e6>
 800621c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006220:	e019      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006226:	e016      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800622c:	e013      	b.n	8006256 <UART_SetConfig+0x12e6>
 800622e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006232:	e010      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006234:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006238:	e00d      	b.n	8006256 <UART_SetConfig+0x12e6>
 800623a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800623e:	e00a      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006240:	f241 5355 	movw	r3, #5461	; 0x1555
 8006244:	e007      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800624a:	e004      	b.n	8006256 <UART_SetConfig+0x12e6>
 800624c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006250:	e001      	b.n	8006256 <UART_SetConfig+0x12e6>
 8006252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6852      	ldr	r2, [r2, #4]
 800625a:	0852      	lsrs	r2, r2, #1
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	b29b      	uxth	r3, r3
 8006268:	61fb      	str	r3, [r7, #28]
        break;
 800626a:	e002      	b.n	8006272 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	76fb      	strb	r3, [r7, #27]
        break;
 8006270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	2b0f      	cmp	r3, #15
 8006276:	d908      	bls.n	800628a <UART_SetConfig+0x131a>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627e:	d204      	bcs.n	800628a <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	60da      	str	r2, [r3, #12]
 8006288:	e001      	b.n	800628e <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80062aa:	7efb      	ldrb	r3, [r7, #27]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3728      	adds	r7, #40	; 0x28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80062b6:	bf00      	nop
 80062b8:	00f42400 	.word	0x00f42400
 80062bc:	0001e848 	.word	0x0001e848
 80062c0:	0003d090 	.word	0x0003d090
 80062c4:	0007a120 	.word	0x0007a120
 80062c8:	000f4240 	.word	0x000f4240
 80062cc:	00145855 	.word	0x00145855
 80062d0:	00186a00 	.word	0x00186a00
 80062d4:	001e8480 	.word	0x001e8480
 80062d8:	0028b0aa 	.word	0x0028b0aa
 80062dc:	003d0900 	.word	0x003d0900
 80062e0:	007a1200 	.word	0x007a1200

080062e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01a      	beq.n	80063fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e2:	d10a      	bne.n	80063fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
  }
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af02      	add	r7, sp, #8
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006438:	f7fa f89c 	bl	8000574 <HAL_GetTick>
 800643c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b08      	cmp	r3, #8
 800644a:	d10e      	bne.n	800646a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f82c 	bl	80064b8 <UART_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e022      	b.n	80064b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b04      	cmp	r3, #4
 8006476:	d10e      	bne.n	8006496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f816 	bl	80064b8 <UART_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e00c      	b.n	80064b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c8:	e02c      	b.n	8006524 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d028      	beq.n	8006524 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d2:	f7fa f84f 	bl	8000574 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11d      	bne.n	8006524 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2220      	movs	r2, #32
 8006514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e00f      	b.n	8006544 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4013      	ands	r3, r2
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	bf0c      	ite	eq
 8006534:	2301      	moveq	r3, #1
 8006536:	2300      	movne	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	429a      	cmp	r2, r3
 8006540:	d0c3      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006562:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006572:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800659e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d114      	bne.n	8006614 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006600:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006610:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006612:	e002      	b.n	800661a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7fe fc8b 	bl	8004f30 <HAL_UART_TxCpltCallback>
}
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7fe fc87 	bl	8004f44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006652:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d109      	bne.n	800667e <UART_DMAError+0x40>
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b21      	cmp	r3, #33	; 0x21
 800666e:	d106      	bne.n	800667e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006678:	6978      	ldr	r0, [r7, #20]
 800667a:	f7ff ff67 	bl	800654c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d109      	bne.n	80066a0 <UART_DMAError+0x62>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b22      	cmp	r3, #34	; 0x22
 8006690:	d106      	bne.n	80066a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2200      	movs	r2, #0
 8006696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800669a:	6978      	ldr	r0, [r7, #20]
 800669c:	f7ff ff74 	bl	8006588 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a6:	f043 0210 	orr.w	r2, r3, #16
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b0:	6978      	ldr	r0, [r7, #20]
 80066b2:	f7fe fc51 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_UARTEx_EnableFifoMode+0x16>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e02b      	b.n	800672c <HAL_UARTEx_EnableFifoMode+0x6e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2224      	movs	r2, #36	; 0x24
 80066e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006702:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800670a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8c3 	bl	80068a0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_UARTEx_DisableFifoMode+0x16>
 8006746:	2302      	movs	r3, #2
 8006748:	e027      	b.n	800679a <HAL_UARTEx_DisableFifoMode+0x66>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2224      	movs	r2, #36	; 0x24
 8006756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0201 	bic.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e02d      	b.n	800681a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2224      	movs	r2, #36	; 0x24
 80067ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f850 	bl	80068a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006836:	2302      	movs	r3, #2
 8006838:	e02d      	b.n	8006896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2224      	movs	r2, #36	; 0x24
 8006846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f812 	bl	80068a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b089      	sub	sp, #36	; 0x24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80068a8:	4a2f      	ldr	r2, [pc, #188]	; (8006968 <UARTEx_SetNbDataToProcess+0xc8>)
 80068aa:	f107 0314 	add.w	r3, r7, #20
 80068ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068b2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80068b6:	4a2d      	ldr	r2, [pc, #180]	; (800696c <UARTEx_SetNbDataToProcess+0xcc>)
 80068b8:	f107 030c 	add.w	r3, r7, #12
 80068bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068c0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d108      	bne.n	80068de <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068dc:	e03d      	b.n	800695a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068de:	2308      	movs	r3, #8
 80068e0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068e2:	2308      	movs	r3, #8
 80068e4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	0e5b      	lsrs	r3, r3, #25
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	0f5b      	lsrs	r3, r3, #29
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006906:	7fbb      	ldrb	r3, [r7, #30]
 8006908:	7f3a      	ldrb	r2, [r7, #28]
 800690a:	f107 0120 	add.w	r1, r7, #32
 800690e:	440a      	add	r2, r1
 8006910:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006914:	fb02 f303 	mul.w	r3, r2, r3
 8006918:	7f3a      	ldrb	r2, [r7, #28]
 800691a:	f107 0120 	add.w	r1, r7, #32
 800691e:	440a      	add	r2, r1
 8006920:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006924:	fb93 f3f2 	sdiv	r3, r3, r2
 8006928:	b29a      	uxth	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006930:	7ffb      	ldrb	r3, [r7, #31]
 8006932:	7f7a      	ldrb	r2, [r7, #29]
 8006934:	f107 0120 	add.w	r1, r7, #32
 8006938:	440a      	add	r2, r1
 800693a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	7f7a      	ldrb	r2, [r7, #29]
 8006944:	f107 0120 	add.w	r1, r7, #32
 8006948:	440a      	add	r2, r1
 800694a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800694e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800695a:	bf00      	nop
 800695c:	3724      	adds	r7, #36	; 0x24
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	0800ad58 	.word	0x0800ad58
 800696c:	0800ad60 	.word	0x0800ad60

08006970 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006976:	f3ef 8305 	mrs	r3, IPSR
 800697a:	60bb      	str	r3, [r7, #8]
  return(result);
 800697c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10f      	bne.n	80069a2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006982:	f3ef 8310 	mrs	r3, PRIMASK
 8006986:	607b      	str	r3, [r7, #4]
  return(result);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <osKernelInitialize+0x32>
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <osKernelInitialize+0x64>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d109      	bne.n	80069aa <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006996:	f3ef 8311 	mrs	r3, BASEPRI
 800699a:	603b      	str	r3, [r7, #0]
  return(result);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80069a2:	f06f 0305 	mvn.w	r3, #5
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	e00c      	b.n	80069c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069aa:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <osKernelInitialize+0x64>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <osKernelInitialize+0x64>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	e002      	b.n	80069c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000030 	.word	0x20000030

080069d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069de:	f3ef 8305 	mrs	r3, IPSR
 80069e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80069e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ea:	f3ef 8310 	mrs	r3, PRIMASK
 80069ee:	607b      	str	r3, [r7, #4]
  return(result);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <osKernelStart+0x32>
 80069f6:	4b11      	ldr	r3, [pc, #68]	; (8006a3c <osKernelStart+0x64>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d109      	bne.n	8006a12 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006a02:	603b      	str	r3, [r7, #0]
  return(result);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a0a:	f06f 0305 	mvn.w	r3, #5
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e00e      	b.n	8006a30 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <osKernelStart+0x64>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d107      	bne.n	8006a2a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <osKernelStart+0x64>)
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006a20:	f001 f904 	bl	8007c2c <vTaskStartScheduler>
      stat = osOK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e002      	b.n	8006a30 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a30:	68fb      	ldr	r3, [r7, #12]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000030 	.word	0x20000030

08006a40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b092      	sub	sp, #72	; 0x48
 8006a44:	af04      	add	r7, sp, #16
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a50:	f3ef 8305 	mrs	r3, IPSR
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 8094 	bne.w	8006b86 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a62:	623b      	str	r3, [r7, #32]
  return(result);
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 808d 	bne.w	8006b86 <osThreadNew+0x146>
 8006a6c:	4b48      	ldr	r3, [pc, #288]	; (8006b90 <osThreadNew+0x150>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d106      	bne.n	8006a82 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a74:	f3ef 8311 	mrs	r3, BASEPRI
 8006a78:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 8082 	bne.w	8006b86 <osThreadNew+0x146>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d07e      	beq.n	8006b86 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006a8c:	2318      	movs	r3, #24
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006a90:	2300      	movs	r3, #0
 8006a92:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006a94:	f107 031b 	add.w	r3, r7, #27
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d045      	beq.n	8006b32 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <osThreadNew+0x74>
        name = attr->name;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <osThreadNew+0x9a>
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	2b38      	cmp	r3, #56	; 0x38
 8006acc:	d805      	bhi.n	8006ada <osThreadNew+0x9a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <osThreadNew+0x9e>
        return (NULL);
 8006ada:	2300      	movs	r3, #0
 8006adc:	e054      	b.n	8006b88 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	089b      	lsrs	r3, r3, #2
 8006aec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <osThreadNew+0xd4>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b5b      	cmp	r3, #91	; 0x5b
 8006afc:	d90a      	bls.n	8006b14 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d006      	beq.n	8006b14 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <osThreadNew+0xd4>
        mem = 1;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b12:	e010      	b.n	8006b36 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10c      	bne.n	8006b36 <osThreadNew+0xf6>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d108      	bne.n	8006b36 <osThreadNew+0xf6>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <osThreadNew+0xf6>
          mem = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b30:	e001      	b.n	8006b36 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d110      	bne.n	8006b5e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b44:	9202      	str	r2, [sp, #8]
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fea2 	bl	800789c <xTaskCreateStatic>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e013      	b.n	8006b86 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d110      	bne.n	8006b86 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f107 0314 	add.w	r3, r7, #20
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fee9 	bl	800794e <xTaskCreate>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d001      	beq.n	8006b86 <osThreadNew+0x146>
          hTask = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b86:	697b      	ldr	r3, [r7, #20]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3738      	adds	r7, #56	; 0x38
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000030 	.word	0x20000030

08006b94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9c:	f3ef 8305 	mrs	r3, IPSR
 8006ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8006ba2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10f      	bne.n	8006bc8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bac:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <osDelay+0x34>
 8006bb4:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <osDelay+0x58>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d109      	bne.n	8006bd0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <osDelay+0x3c>
    stat = osErrorISR;
 8006bc8:	f06f 0305 	mvn.w	r3, #5
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	e007      	b.n	8006be0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fff2 	bl	8007bc4 <vTaskDelay>
    }
  }

  return (stat);
 8006be0:	697b      	ldr	r3, [r7, #20]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000030 	.word	0x20000030

08006bf0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f002 f8cf 	bl	8008d9c <pvTimerGetTimerID>
 8006bfe:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	6852      	ldr	r2, [r2, #4]
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4798      	blx	r3
  }
}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	; 0x38
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c30:	f3ef 8305 	mrs	r3, IPSR
 8006c34:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c36:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d16a      	bne.n	8006d12 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c40:	617b      	str	r3, [r7, #20]
  return(result);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d164      	bne.n	8006d12 <osTimerNew+0xf6>
 8006c48:	4b34      	ldr	r3, [pc, #208]	; (8006d1c <osTimerNew+0x100>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d105      	bne.n	8006c5c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c50:	f3ef 8311 	mrs	r3, BASEPRI
 8006c54:	613b      	str	r3, [r7, #16]
  return(result);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d15a      	bne.n	8006d12 <osTimerNew+0xf6>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d057      	beq.n	8006d12 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006c62:	2008      	movs	r0, #8
 8006c64:	f002 fafc 	bl	8009260 <pvPortMalloc>
 8006c68:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d050      	beq.n	8006d12 <osTimerNew+0xf6>
      callb->func = func;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006c7c:	7afb      	ldrb	r3, [r7, #11]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <osTimerNew+0x6c>
        reload = pdFALSE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
 8006c86:	e001      	b.n	8006c8c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8006c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c90:	623b      	str	r3, [r7, #32]
      name = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01c      	beq.n	8006cd6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <osTimerNew+0x8e>
          name = attr->name;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d006      	beq.n	8006cc0 <osTimerNew+0xa4>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b2f      	cmp	r3, #47	; 0x2f
 8006cb8:	d902      	bls.n	8006cc0 <osTimerNew+0xa4>
          mem = 1;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	623b      	str	r3, [r7, #32]
 8006cbe:	e00c      	b.n	8006cda <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d108      	bne.n	8006cda <osTimerNew+0xbe>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <osTimerNew+0xbe>
            mem = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	623b      	str	r3, [r7, #32]
 8006cd4:	e001      	b.n	8006cda <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10c      	bne.n	8006cfa <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <osTimerNew+0x104>)
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cee:	2101      	movs	r1, #1
 8006cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf2:	f001 fd24 	bl	800873e <xTimerCreateStatic>
 8006cf6:	62b8      	str	r0, [r7, #40]	; 0x28
 8006cf8:	e00b      	b.n	8006d12 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d108      	bne.n	8006d12 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <osTimerNew+0x104>)
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d08:	2101      	movs	r1, #1
 8006d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d0c:	f001 fcf6 	bl	80086fc <xTimerCreate>
 8006d10:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3730      	adds	r7, #48	; 0x30
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000030 	.word	0x20000030
 8006d20:	08006bf1 	.word	0x08006bf1

08006d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a07      	ldr	r2, [pc, #28]	; (8006d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4a06      	ldr	r2, [pc, #24]	; (8006d54 <vApplicationGetIdleTaskMemory+0x30>)
 8006d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2280      	movs	r2, #128	; 0x80
 8006d40:	601a      	str	r2, [r3, #0]
}
 8006d42:	bf00      	nop
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000034 	.word	0x20000034
 8006d54:	20000090 	.word	0x20000090

08006d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4a07      	ldr	r2, [pc, #28]	; (8006d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	4a06      	ldr	r2, [pc, #24]	; (8006d88 <vApplicationGetTimerTaskMemory+0x30>)
 8006d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d76:	601a      	str	r2, [r3, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	20000290 	.word	0x20000290
 8006d88:	200002ec 	.word	0x200002ec

08006d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f103 0208 	add.w	r2, r3, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f04f 32ff 	mov.w	r2, #4294967295
 8006da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f103 0208 	add.w	r2, r3, #8
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f103 0208 	add.w	r2, r3, #8
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d103      	bne.n	8006e4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e00c      	b.n	8006e68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3308      	adds	r3, #8
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e002      	b.n	8006e5c <vListInsert+0x2e>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d2f6      	bcs.n	8006e56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6892      	ldr	r2, [r2, #8]
 8006eb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6852      	ldr	r2, [r2, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d103      	bne.n	8006ed4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	1e5a      	subs	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	e7fe      	b.n	8006f1a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006f1c:	f002 f886 	bl	800902c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	22ff      	movs	r2, #255	; 0xff
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	22ff      	movs	r2, #255	; 0xff
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d114      	bne.n	8006f9c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01a      	beq.n	8006fb0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3310      	adds	r3, #16
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 f8da 	bl	8008138 <xTaskRemoveFromEventList>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d012      	beq.n	8006fb0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <xQueueGenericReset+0xcc>)
 8006f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	e009      	b.n	8006fb0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3310      	adds	r3, #16
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff fef3 	bl	8006d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3324      	adds	r3, #36	; 0x24
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff feee 	bl	8006d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fb0:	f002 f86a 	bl	8009088 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fb4:	2301      	movs	r3, #1
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08e      	sub	sp, #56	; 0x38
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <xQueueGenericCreateStatic+0x28>
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fea:	e7fe      	b.n	8006fea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <xQueueGenericCreateStatic+0x42>
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
 8007004:	e7fe      	b.n	8007004 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <xQueueGenericCreateStatic+0x4e>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <xQueueGenericCreateStatic+0x52>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueGenericCreateStatic+0x54>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <xQueueGenericCreateStatic+0x6c>
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	623b      	str	r3, [r7, #32]
 800702e:	e7fe      	b.n	800702e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <xQueueGenericCreateStatic+0x78>
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <xQueueGenericCreateStatic+0x7c>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <xQueueGenericCreateStatic+0x7e>
 8007040:	2300      	movs	r3, #0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <xQueueGenericCreateStatic+0x96>
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	e7fe      	b.n	8007058 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800705a:	2350      	movs	r3, #80	; 0x50
 800705c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b50      	cmp	r3, #80	; 0x50
 8007062:	d009      	beq.n	8007078 <xQueueGenericCreateStatic+0xb4>
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	e7fe      	b.n	8007076 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800708a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	4613      	mov	r3, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f805 	bl	80070a8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3730      	adds	r7, #48	; 0x30
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e002      	b.n	80070ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070d6:	2101      	movs	r1, #1
 80070d8:	69b8      	ldr	r0, [r7, #24]
 80070da:	f7ff ff0b 	bl	8006ef4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08e      	sub	sp, #56	; 0x38
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070fe:	2300      	movs	r3, #0
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <xQueueGenericSend+0x30>
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28
 800711e:	e7fe      	b.n	800711e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <xQueueGenericSend+0x3e>
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <xQueueGenericSend+0x42>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <xQueueGenericSend+0x44>
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <xQueueGenericSend+0x5c>
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
 800714a:	e7fe      	b.n	800714a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d103      	bne.n	800715a <xQueueGenericSend+0x6a>
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <xQueueGenericSend+0x6e>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <xQueueGenericSend+0x70>
 800715e:	2300      	movs	r3, #0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <xQueueGenericSend+0x88>
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	623b      	str	r3, [r7, #32]
 8007176:	e7fe      	b.n	8007176 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007178:	f001 f99a 	bl	80084b0 <xTaskGetSchedulerState>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <xQueueGenericSend+0x98>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <xQueueGenericSend+0x9c>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <xQueueGenericSend+0x9e>
 800718c:	2300      	movs	r3, #0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <xQueueGenericSend+0xb6>
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	e7fe      	b.n	80071a4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071a6:	f001 ff41 	bl	800902c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d302      	bcc.n	80071bc <xQueueGenericSend+0xcc>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d129      	bne.n	8007210 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071c2:	f000 f9ff 	bl	80075c4 <prvCopyDataToQueue>
 80071c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d010      	beq.n	80071f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	3324      	adds	r3, #36	; 0x24
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 ffaf 	bl	8008138 <xTaskRemoveFromEventList>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d013      	beq.n	8007208 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071e0:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <xQueueGenericSend+0x1f0>)
 80071e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	e00a      	b.n	8007208 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071f8:	4b39      	ldr	r3, [pc, #228]	; (80072e0 <xQueueGenericSend+0x1f0>)
 80071fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007208:	f001 ff3e 	bl	8009088 <vPortExitCritical>
				return pdPASS;
 800720c:	2301      	movs	r3, #1
 800720e:	e063      	b.n	80072d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d103      	bne.n	800721e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007216:	f001 ff37 	bl	8009088 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800721a:	2300      	movs	r3, #0
 800721c:	e05c      	b.n	80072d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800721e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007224:	f107 0314 	add.w	r3, r7, #20
 8007228:	4618      	mov	r0, r3
 800722a:	f000 ffe7 	bl	80081fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007232:	f001 ff29 	bl	8009088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007236:	f000 fd5d 	bl	8007cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800723a:	f001 fef7 	bl	800902c <vPortEnterCritical>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007244:	b25b      	sxtb	r3, r3
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d103      	bne.n	8007254 <xQueueGenericSend+0x164>
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800725a:	b25b      	sxtb	r3, r3
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d103      	bne.n	800726a <xQueueGenericSend+0x17a>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800726a:	f001 ff0d 	bl	8009088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800726e:	1d3a      	adds	r2, r7, #4
 8007270:	f107 0314 	add.w	r3, r7, #20
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f000 ffd6 	bl	8008228 <xTaskCheckForTimeOut>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d124      	bne.n	80072cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007284:	f000 fa96 	bl	80077b4 <prvIsQueueFull>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d018      	beq.n	80072c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	3310      	adds	r3, #16
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f000 ff00 	bl	800809c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800729c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800729e:	f000 fa21 	bl	80076e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072a2:	f000 fd35 	bl	8007d10 <xTaskResumeAll>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f47f af7c 	bne.w	80071a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80072ae:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <xQueueGenericSend+0x1f0>)
 80072b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	e772      	b.n	80071a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072c2:	f000 fa0f 	bl	80076e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072c6:	f000 fd23 	bl	8007d10 <xTaskResumeAll>
 80072ca:	e76c      	b.n	80071a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ce:	f000 fa09 	bl	80076e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072d2:	f000 fd1d 	bl	8007d10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072d6:	2300      	movs	r3, #0
		}
	}
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3738      	adds	r7, #56	; 0x38
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08e      	sub	sp, #56	; 0x38
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <xQueueGenericSendFromISR+0x2c>
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
 800730e:	e7fe      	b.n	800730e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <xQueueGenericSendFromISR+0x3a>
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <xQueueGenericSendFromISR+0x3e>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <xQueueGenericSendFromISR+0x40>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <xQueueGenericSendFromISR+0x58>
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	623b      	str	r3, [r7, #32]
 800733a:	e7fe      	b.n	800733a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d103      	bne.n	800734a <xQueueGenericSendFromISR+0x66>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <xQueueGenericSendFromISR+0x6a>
 800734a:	2301      	movs	r3, #1
 800734c:	e000      	b.n	8007350 <xQueueGenericSendFromISR+0x6c>
 800734e:	2300      	movs	r3, #0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <xQueueGenericSendFromISR+0x84>
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	e7fe      	b.n	8007366 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007368:	f001 ff3c 	bl	80091e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800736c:	f3ef 8211 	mrs	r2, BASEPRI
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	61ba      	str	r2, [r7, #24]
 8007382:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007384:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007390:	429a      	cmp	r2, r3
 8007392:	d302      	bcc.n	800739a <xQueueGenericSendFromISR+0xb6>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d12c      	bne.n	80073f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073aa:	f000 f90b 	bl	80075c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d112      	bne.n	80073de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d016      	beq.n	80073ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	3324      	adds	r3, #36	; 0x24
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 feb7 	bl	8008138 <xTaskRemoveFromEventList>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00e      	beq.n	80073ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e007      	b.n	80073ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073e2:	3301      	adds	r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	b25a      	sxtb	r2, r3
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073ee:	2301      	movs	r3, #1
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073f2:	e001      	b.n	80073f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007404:	4618      	mov	r0, r3
 8007406:	3738      	adds	r7, #56	; 0x38
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08c      	sub	sp, #48	; 0x30
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007418:	2300      	movs	r3, #0
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <xQueueReceive+0x2e>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	623b      	str	r3, [r7, #32]
 8007438:	e7fe      	b.n	8007438 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d103      	bne.n	8007448 <xQueueReceive+0x3c>
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <xQueueReceive+0x40>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <xQueueReceive+0x42>
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <xQueueReceive+0x5a>
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e7fe      	b.n	8007464 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007466:	f001 f823 	bl	80084b0 <xTaskGetSchedulerState>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <xQueueReceive+0x6a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <xQueueReceive+0x6e>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <xQueueReceive+0x70>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d109      	bne.n	8007494 <xQueueReceive+0x88>
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	e7fe      	b.n	8007492 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007494:	f001 fdca 	bl	800902c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01f      	beq.n	80074e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a8:	f000 f8f6 	bl	8007698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00f      	beq.n	80074dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	3310      	adds	r3, #16
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fe39 	bl	8008138 <xTaskRemoveFromEventList>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d007      	beq.n	80074dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074cc:	4b3c      	ldr	r3, [pc, #240]	; (80075c0 <xQueueReceive+0x1b4>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074dc:	f001 fdd4 	bl	8009088 <vPortExitCritical>
				return pdPASS;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e069      	b.n	80075b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074ea:	f001 fdcd 	bl	8009088 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e062      	b.n	80075b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074f8:	f107 0310 	add.w	r3, r7, #16
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fe7d 	bl	80081fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007502:	2301      	movs	r3, #1
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007506:	f001 fdbf 	bl	8009088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800750a:	f000 fbf3 	bl	8007cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800750e:	f001 fd8d 	bl	800902c <vPortEnterCritical>
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007518:	b25b      	sxtb	r3, r3
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d103      	bne.n	8007528 <xQueueReceive+0x11c>
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800752e:	b25b      	sxtb	r3, r3
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d103      	bne.n	800753e <xQueueReceive+0x132>
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800753e:	f001 fda3 	bl	8009088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007542:	1d3a      	adds	r2, r7, #4
 8007544:	f107 0310 	add.w	r3, r7, #16
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fe6c 	bl	8008228 <xTaskCheckForTimeOut>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d123      	bne.n	800759e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	f000 f916 	bl	8007788 <prvIsQueueEmpty>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d017      	beq.n	8007592 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	3324      	adds	r3, #36	; 0x24
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fd96 	bl	800809c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007572:	f000 f8b7 	bl	80076e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007576:	f000 fbcb 	bl	8007d10 <xTaskResumeAll>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d189      	bne.n	8007494 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <xQueueReceive+0x1b4>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	e780      	b.n	8007494 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007594:	f000 f8a6 	bl	80076e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007598:	f000 fbba 	bl	8007d10 <xTaskResumeAll>
 800759c:	e77a      	b.n	8007494 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800759e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a0:	f000 f8a0 	bl	80076e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075a4:	f000 fbb4 	bl	8007d10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075aa:	f000 f8ed 	bl	8007788 <prvIsQueueEmpty>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f43f af6f 	beq.w	8007494 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3730      	adds	r7, #48	; 0x30
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10d      	bne.n	80075fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d14d      	bne.n	8007686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 ff7c 	bl	80084ec <xTaskPriorityDisinherit>
 80075f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	e043      	b.n	8007686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d119      	bne.n	8007638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6898      	ldr	r0, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	461a      	mov	r2, r3
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	f003 fb82 	bl	800ad18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	441a      	add	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d32b      	bcc.n	8007686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	609a      	str	r2, [r3, #8]
 8007636:	e026      	b.n	8007686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68d8      	ldr	r0, [r3, #12]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	461a      	mov	r2, r3
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	f003 fb68 	bl	800ad18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	425b      	negs	r3, r3
 8007652:	441a      	add	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d207      	bcs.n	8007674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	425b      	negs	r3, r3
 800766e:	441a      	add	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d105      	bne.n	8007686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3b01      	subs	r3, #1
 8007684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800768e:	697b      	ldr	r3, [r7, #20]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d018      	beq.n	80076dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	441a      	add	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d303      	bcc.n	80076cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68d9      	ldr	r1, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	461a      	mov	r2, r3
 80076d6:	6838      	ldr	r0, [r7, #0]
 80076d8:	f003 fb1e 	bl	800ad18 <memcpy>
	}
}
 80076dc:	bf00      	nop
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076ec:	f001 fc9e 	bl	800902c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076f8:	e011      	b.n	800771e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d012      	beq.n	8007728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3324      	adds	r3, #36	; 0x24
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fd16 	bl	8008138 <xTaskRemoveFromEventList>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007712:	f000 fde9 	bl	80082e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	3b01      	subs	r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800771e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dce9      	bgt.n	80076fa <prvUnlockQueue+0x16>
 8007726:	e000      	b.n	800772a <prvUnlockQueue+0x46>
					break;
 8007728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	22ff      	movs	r2, #255	; 0xff
 800772e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007732:	f001 fca9 	bl	8009088 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007736:	f001 fc79 	bl	800902c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007742:	e011      	b.n	8007768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d012      	beq.n	8007772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3310      	adds	r3, #16
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fcf1 	bl	8008138 <xTaskRemoveFromEventList>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800775c:	f000 fdc4 	bl	80082e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	3b01      	subs	r3, #1
 8007764:	b2db      	uxtb	r3, r3
 8007766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	dce9      	bgt.n	8007744 <prvUnlockQueue+0x60>
 8007770:	e000      	b.n	8007774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	22ff      	movs	r2, #255	; 0xff
 8007778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800777c:	f001 fc84 	bl	8009088 <vPortExitCritical>
}
 8007780:	bf00      	nop
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007790:	f001 fc4c 	bl	800902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800779c:	2301      	movs	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	e001      	b.n	80077a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077a6:	f001 fc6f 	bl	8009088 <vPortExitCritical>

	return xReturn;
 80077aa:	68fb      	ldr	r3, [r7, #12]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077bc:	f001 fc36 	bl	800902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d102      	bne.n	80077d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e001      	b.n	80077d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077d6:	f001 fc57 	bl	8009088 <vPortExitCritical>

	return xReturn;
 80077da:	68fb      	ldr	r3, [r7, #12]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	e014      	b.n	800781e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077f4:	4a0e      	ldr	r2, [pc, #56]	; (8007830 <vQueueAddToRegistry+0x4c>)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007800:	490b      	ldr	r1, [pc, #44]	; (8007830 <vQueueAddToRegistry+0x4c>)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800780a:	4a09      	ldr	r2, [pc, #36]	; (8007830 <vQueueAddToRegistry+0x4c>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	4413      	add	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007816:	e005      	b.n	8007824 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b07      	cmp	r3, #7
 8007822:	d9e7      	bls.n	80077f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	2000193c 	.word	0x2000193c

08007834 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007844:	f001 fbf2 	bl	800902c <vPortEnterCritical>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800784e:	b25b      	sxtb	r3, r3
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007854:	d103      	bne.n	800785e <vQueueWaitForMessageRestricted+0x2a>
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007864:	b25b      	sxtb	r3, r3
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786a:	d103      	bne.n	8007874 <vQueueWaitForMessageRestricted+0x40>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007874:	f001 fc08 	bl	8009088 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	3324      	adds	r3, #36	; 0x24
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fc2b 	bl	80080e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800788e:	6978      	ldr	r0, [r7, #20]
 8007890:	f7ff ff28 	bl	80076e4 <prvUnlockQueue>
	}
 8007894:	bf00      	nop
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08e      	sub	sp, #56	; 0x38
 80078a0:	af04      	add	r7, sp, #16
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d109      	bne.n	80078c4 <xTaskCreateStatic+0x28>
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	623b      	str	r3, [r7, #32]
 80078c2:	e7fe      	b.n	80078c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <xTaskCreateStatic+0x42>
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	e7fe      	b.n	80078dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078de:	235c      	movs	r3, #92	; 0x5c
 80078e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b5c      	cmp	r3, #92	; 0x5c
 80078e6:	d009      	beq.n	80078fc <xTaskCreateStatic+0x60>
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	e7fe      	b.n	80078fa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01e      	beq.n	8007940 <xTaskCreateStatic+0xa4>
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01b      	beq.n	8007940 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007910:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	2202      	movs	r2, #2
 8007916:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800791a:	2300      	movs	r3, #0
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	f107 0314 	add.w	r3, r7, #20
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 f850 	bl	80079d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800793a:	f000 f8d3 	bl	8007ae4 <prvAddNewTaskToReadyList>
 800793e:	e001      	b.n	8007944 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007944:	697b      	ldr	r3, [r7, #20]
	}
 8007946:	4618      	mov	r0, r3
 8007948:	3728      	adds	r7, #40	; 0x28
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800794e:	b580      	push	{r7, lr}
 8007950:	b08c      	sub	sp, #48	; 0x30
 8007952:	af04      	add	r7, sp, #16
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4618      	mov	r0, r3
 8007964:	f001 fc7c 	bl	8009260 <pvPortMalloc>
 8007968:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00e      	beq.n	800798e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007970:	205c      	movs	r0, #92	; 0x5c
 8007972:	f001 fc75 	bl	8009260 <pvPortMalloc>
 8007976:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	631a      	str	r2, [r3, #48]	; 0x30
 8007984:	e005      	b.n	8007992 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007986:	6978      	ldr	r0, [r7, #20]
 8007988:	f001 fd2c 	bl	80093e4 <vPortFree>
 800798c:	e001      	b.n	8007992 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	2300      	movs	r3, #0
 80079a4:	9303      	str	r3, [sp, #12]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	9302      	str	r3, [sp, #8]
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 f80e 	bl	80079d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079bc:	69f8      	ldr	r0, [r7, #28]
 80079be:	f000 f891 	bl	8007ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079c2:	2301      	movs	r3, #1
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	e002      	b.n	80079ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079c8:	f04f 33ff 	mov.w	r3, #4294967295
 80079cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079ce:	69bb      	ldr	r3, [r7, #24]
	}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	461a      	mov	r2, r3
 80079f0:	21a5      	movs	r1, #165	; 0xa5
 80079f2:	f003 f99c 	bl	800ad2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a00:	3b01      	subs	r3, #1
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <prvInitialiseNewTask+0x56>
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e7fe      	b.n	8007a2c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e012      	b.n	8007a5a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	7819      	ldrb	r1, [r3, #0]
 8007a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	3334      	adds	r3, #52	; 0x34
 8007a44:	460a      	mov	r2, r1
 8007a46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d006      	beq.n	8007a62 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	3301      	adds	r3, #1
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	2b0f      	cmp	r3, #15
 8007a5e:	d9e9      	bls.n	8007a34 <prvInitialiseNewTask+0x5c>
 8007a60:	e000      	b.n	8007a64 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007a62:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	2b37      	cmp	r3, #55	; 0x37
 8007a70:	d901      	bls.n	8007a76 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a72:	2337      	movs	r3, #55	; 0x37
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	2200      	movs	r2, #0
 8007a86:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff f99d 	bl	8006dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	3318      	adds	r3, #24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff f998 	bl	8006dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	69b8      	ldr	r0, [r7, #24]
 8007ac6:	f001 f989 	bl	8008ddc <pxPortInitialiseStack>
 8007aca:	4602      	mov	r2, r0
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ada:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007adc:	bf00      	nop
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007aec:	f001 fa9e 	bl	800902c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007af0:	4b2d      	ldr	r3, [pc, #180]	; (8007ba8 <prvAddNewTaskToReadyList+0xc4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a2c      	ldr	r2, [pc, #176]	; (8007ba8 <prvAddNewTaskToReadyList+0xc4>)
 8007af8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007afa:	4b2c      	ldr	r3, [pc, #176]	; (8007bac <prvAddNewTaskToReadyList+0xc8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b02:	4a2a      	ldr	r2, [pc, #168]	; (8007bac <prvAddNewTaskToReadyList+0xc8>)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b08:	4b27      	ldr	r3, [pc, #156]	; (8007ba8 <prvAddNewTaskToReadyList+0xc4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d110      	bne.n	8007b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b10:	f000 fc0e 	bl	8008330 <prvInitialiseTaskLists>
 8007b14:	e00d      	b.n	8007b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b16:	4b26      	ldr	r3, [pc, #152]	; (8007bb0 <prvAddNewTaskToReadyList+0xcc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b1e:	4b23      	ldr	r3, [pc, #140]	; (8007bac <prvAddNewTaskToReadyList+0xc8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d802      	bhi.n	8007b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b2c:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <prvAddNewTaskToReadyList+0xc8>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b32:	4b20      	ldr	r3, [pc, #128]	; (8007bb4 <prvAddNewTaskToReadyList+0xd0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3301      	adds	r3, #1
 8007b38:	4a1e      	ldr	r2, [pc, #120]	; (8007bb4 <prvAddNewTaskToReadyList+0xd0>)
 8007b3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <prvAddNewTaskToReadyList+0xd0>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <prvAddNewTaskToReadyList+0xd4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d903      	bls.n	8007b58 <prvAddNewTaskToReadyList+0x74>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <prvAddNewTaskToReadyList+0xd4>)
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a15      	ldr	r2, [pc, #84]	; (8007bbc <prvAddNewTaskToReadyList+0xd8>)
 8007b66:	441a      	add	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f7ff f939 	bl	8006de6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b74:	f001 fa88 	bl	8009088 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b78:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <prvAddNewTaskToReadyList+0xcc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00e      	beq.n	8007b9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <prvAddNewTaskToReadyList+0xc8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d207      	bcs.n	8007b9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <prvAddNewTaskToReadyList+0xdc>)
 8007b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000bc0 	.word	0x20000bc0
 8007bac:	200006ec 	.word	0x200006ec
 8007bb0:	20000bcc 	.word	0x20000bcc
 8007bb4:	20000bdc 	.word	0x20000bdc
 8007bb8:	20000bc8 	.word	0x20000bc8
 8007bbc:	200006f0 	.word	0x200006f0
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d016      	beq.n	8007c04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bd6:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <vTaskDelay+0x60>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <vTaskDelay+0x2e>
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	60bb      	str	r3, [r7, #8]
 8007bf0:	e7fe      	b.n	8007bf0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007bf2:	f000 f87f 	bl	8007cf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fce3 	bl	80085c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bfe:	f000 f887 	bl	8007d10 <xTaskResumeAll>
 8007c02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007c0a:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <vTaskDelay+0x64>)
 8007c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000be8 	.word	0x20000be8
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	; 0x28
 8007c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c3a:	463a      	mov	r2, r7
 8007c3c:	1d39      	adds	r1, r7, #4
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff f86e 	bl	8006d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	9202      	str	r2, [sp, #8]
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	2300      	movs	r3, #0
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	2300      	movs	r3, #0
 8007c58:	460a      	mov	r2, r1
 8007c5a:	4920      	ldr	r1, [pc, #128]	; (8007cdc <vTaskStartScheduler+0xb0>)
 8007c5c:	4820      	ldr	r0, [pc, #128]	; (8007ce0 <vTaskStartScheduler+0xb4>)
 8007c5e:	f7ff fe1d 	bl	800789c <xTaskCreateStatic>
 8007c62:	4602      	mov	r2, r0
 8007c64:	4b1f      	ldr	r3, [pc, #124]	; (8007ce4 <vTaskStartScheduler+0xb8>)
 8007c66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c68:	4b1e      	ldr	r3, [pc, #120]	; (8007ce4 <vTaskStartScheduler+0xb8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c70:	2301      	movs	r3, #1
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	e001      	b.n	8007c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d102      	bne.n	8007c86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c80:	f000 fcf4 	bl	800866c <xTimerCreateTimerTask>
 8007c84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d115      	bne.n	8007cb8 <vTaskStartScheduler+0x8c>
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <vTaskStartScheduler+0xbc>)
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ca6:	4b11      	ldr	r3, [pc, #68]	; (8007cec <vTaskStartScheduler+0xc0>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007cac:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <vTaskStartScheduler+0xc4>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cb2:	f001 f91d 	bl	8008ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cb6:	e00d      	b.n	8007cd4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d109      	bne.n	8007cd4 <vTaskStartScheduler+0xa8>
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e7fe      	b.n	8007cd2 <vTaskStartScheduler+0xa6>
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	0800ad68 	.word	0x0800ad68
 8007ce0:	08008301 	.word	0x08008301
 8007ce4:	20000be4 	.word	0x20000be4
 8007ce8:	20000be0 	.word	0x20000be0
 8007cec:	20000bcc 	.word	0x20000bcc
 8007cf0:	20000bc4 	.word	0x20000bc4

08007cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007cf8:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <vTaskSuspendAll+0x18>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	4a03      	ldr	r2, [pc, #12]	; (8007d0c <vTaskSuspendAll+0x18>)
 8007d00:	6013      	str	r3, [r2, #0]
}
 8007d02:	bf00      	nop
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	20000be8 	.word	0x20000be8

08007d10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d1e:	4b41      	ldr	r3, [pc, #260]	; (8007e24 <xTaskResumeAll+0x114>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d109      	bne.n	8007d3a <xTaskResumeAll+0x2a>
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	e7fe      	b.n	8007d38 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d3a:	f001 f977 	bl	800902c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d3e:	4b39      	ldr	r3, [pc, #228]	; (8007e24 <xTaskResumeAll+0x114>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	4a37      	ldr	r2, [pc, #220]	; (8007e24 <xTaskResumeAll+0x114>)
 8007d46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d48:	4b36      	ldr	r3, [pc, #216]	; (8007e24 <xTaskResumeAll+0x114>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d162      	bne.n	8007e16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d50:	4b35      	ldr	r3, [pc, #212]	; (8007e28 <xTaskResumeAll+0x118>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d05e      	beq.n	8007e16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d58:	e02f      	b.n	8007dba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d5a:	4b34      	ldr	r3, [pc, #208]	; (8007e2c <xTaskResumeAll+0x11c>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3318      	adds	r3, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff f89a 	bl	8006ea0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff f895 	bl	8006ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	; (8007e30 <xTaskResumeAll+0x120>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d903      	bls.n	8007d8a <xTaskResumeAll+0x7a>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	4a2a      	ldr	r2, [pc, #168]	; (8007e30 <xTaskResumeAll+0x120>)
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4a27      	ldr	r2, [pc, #156]	; (8007e34 <xTaskResumeAll+0x124>)
 8007d98:	441a      	add	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7ff f820 	bl	8006de6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007daa:	4b23      	ldr	r3, [pc, #140]	; (8007e38 <xTaskResumeAll+0x128>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d302      	bcc.n	8007dba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007db4:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <xTaskResumeAll+0x12c>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dba:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <xTaskResumeAll+0x11c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1cb      	bne.n	8007d5a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dc8:	f000 fb4c 	bl	8008464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007dcc:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <xTaskResumeAll+0x130>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d010      	beq.n	8007dfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dd8:	f000 f846 	bl	8007e68 <xTaskIncrementTick>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007de2:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <xTaskResumeAll+0x12c>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1f1      	bne.n	8007dd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007df4:	4b12      	ldr	r3, [pc, #72]	; (8007e40 <xTaskResumeAll+0x130>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dfa:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <xTaskResumeAll+0x12c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <xTaskResumeAll+0x134>)
 8007e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e16:	f001 f937 	bl	8009088 <vPortExitCritical>

	return xAlreadyYielded;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000be8 	.word	0x20000be8
 8007e28:	20000bc0 	.word	0x20000bc0
 8007e2c:	20000b80 	.word	0x20000b80
 8007e30:	20000bc8 	.word	0x20000bc8
 8007e34:	200006f0 	.word	0x200006f0
 8007e38:	200006ec 	.word	0x200006ec
 8007e3c:	20000bd4 	.word	0x20000bd4
 8007e40:	20000bd0 	.word	0x20000bd0
 8007e44:	e000ed04 	.word	0xe000ed04

08007e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <xTaskGetTickCount+0x1c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e54:	687b      	ldr	r3, [r7, #4]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000bc4 	.word	0x20000bc4

08007e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b51      	ldr	r3, [pc, #324]	; (8007fb8 <xTaskIncrementTick+0x150>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 808d 	bne.w	8007f96 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e7c:	4b4f      	ldr	r3, [pc, #316]	; (8007fbc <xTaskIncrementTick+0x154>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e84:	4a4d      	ldr	r2, [pc, #308]	; (8007fbc <xTaskIncrementTick+0x154>)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11f      	bne.n	8007ed0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e90:	4b4b      	ldr	r3, [pc, #300]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <xTaskIncrementTick+0x46>
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	e7fe      	b.n	8007eac <xTaskIncrementTick+0x44>
 8007eae:	4b44      	ldr	r3, [pc, #272]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	4b43      	ldr	r3, [pc, #268]	; (8007fc4 <xTaskIncrementTick+0x15c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a41      	ldr	r2, [pc, #260]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007eba:	6013      	str	r3, [r2, #0]
 8007ebc:	4a41      	ldr	r2, [pc, #260]	; (8007fc4 <xTaskIncrementTick+0x15c>)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	4b41      	ldr	r3, [pc, #260]	; (8007fc8 <xTaskIncrementTick+0x160>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	4a3f      	ldr	r2, [pc, #252]	; (8007fc8 <xTaskIncrementTick+0x160>)
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	f000 faca 	bl	8008464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ed0:	4b3e      	ldr	r3, [pc, #248]	; (8007fcc <xTaskIncrementTick+0x164>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d34e      	bcc.n	8007f78 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eda:	4b39      	ldr	r3, [pc, #228]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <xTaskIncrementTick+0x80>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <xTaskIncrementTick+0x82>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eee:	4b37      	ldr	r3, [pc, #220]	; (8007fcc <xTaskIncrementTick+0x164>)
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	601a      	str	r2, [r3, #0]
					break;
 8007ef6:	e03f      	b.n	8007f78 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ef8:	4b31      	ldr	r3, [pc, #196]	; (8007fc0 <xTaskIncrementTick+0x158>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d203      	bcs.n	8007f18 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f10:	4a2e      	ldr	r2, [pc, #184]	; (8007fcc <xTaskIncrementTick+0x164>)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6013      	str	r3, [r2, #0]
						break;
 8007f16:	e02f      	b.n	8007f78 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe ffbf 	bl	8006ea0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d004      	beq.n	8007f34 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	3318      	adds	r3, #24
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe ffb6 	bl	8006ea0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f38:	4b25      	ldr	r3, [pc, #148]	; (8007fd0 <xTaskIncrementTick+0x168>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d903      	bls.n	8007f48 <xTaskIncrementTick+0xe0>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a22      	ldr	r2, [pc, #136]	; (8007fd0 <xTaskIncrementTick+0x168>)
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4a1f      	ldr	r2, [pc, #124]	; (8007fd4 <xTaskIncrementTick+0x16c>)
 8007f56:	441a      	add	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f7fe ff41 	bl	8006de6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4b1b      	ldr	r3, [pc, #108]	; (8007fd8 <xTaskIncrementTick+0x170>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d3b3      	bcc.n	8007eda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007f72:	2301      	movs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f76:	e7b0      	b.n	8007eda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f78:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <xTaskIncrementTick+0x170>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7e:	4915      	ldr	r1, [pc, #84]	; (8007fd4 <xTaskIncrementTick+0x16c>)
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d907      	bls.n	8007fa0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007f90:	2301      	movs	r3, #1
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	e004      	b.n	8007fa0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f96:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <xTaskIncrementTick+0x174>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	4a0f      	ldr	r2, [pc, #60]	; (8007fdc <xTaskIncrementTick+0x174>)
 8007f9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <xTaskIncrementTick+0x178>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007fac:	697b      	ldr	r3, [r7, #20]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000be8 	.word	0x20000be8
 8007fbc:	20000bc4 	.word	0x20000bc4
 8007fc0:	20000b78 	.word	0x20000b78
 8007fc4:	20000b7c 	.word	0x20000b7c
 8007fc8:	20000bd8 	.word	0x20000bd8
 8007fcc:	20000be0 	.word	0x20000be0
 8007fd0:	20000bc8 	.word	0x20000bc8
 8007fd4:	200006f0 	.word	0x200006f0
 8007fd8:	200006ec 	.word	0x200006ec
 8007fdc:	20000bd0 	.word	0x20000bd0
 8007fe0:	20000bd4 	.word	0x20000bd4

08007fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fea:	4b27      	ldr	r3, [pc, #156]	; (8008088 <vTaskSwitchContext+0xa4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ff2:	4b26      	ldr	r3, [pc, #152]	; (800808c <vTaskSwitchContext+0xa8>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ff8:	e040      	b.n	800807c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <vTaskSwitchContext+0xa8>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008000:	4b23      	ldr	r3, [pc, #140]	; (8008090 <vTaskSwitchContext+0xac>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e00f      	b.n	8008028 <vTaskSwitchContext+0x44>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <vTaskSwitchContext+0x3e>
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	e7fe      	b.n	8008020 <vTaskSwitchContext+0x3c>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3b01      	subs	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	491a      	ldr	r1, [pc, #104]	; (8008094 <vTaskSwitchContext+0xb0>)
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4613      	mov	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0e5      	beq.n	8008008 <vTaskSwitchContext+0x24>
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4a13      	ldr	r2, [pc, #76]	; (8008094 <vTaskSwitchContext+0xb0>)
 8008048:	4413      	add	r3, r2
 800804a:	60bb      	str	r3, [r7, #8]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	605a      	str	r2, [r3, #4]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	3308      	adds	r3, #8
 800805e:	429a      	cmp	r2, r3
 8008060:	d104      	bne.n	800806c <vTaskSwitchContext+0x88>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	605a      	str	r2, [r3, #4]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <vTaskSwitchContext+0xb4>)
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	4a06      	ldr	r2, [pc, #24]	; (8008090 <vTaskSwitchContext+0xac>)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6013      	str	r3, [r2, #0]
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	20000be8 	.word	0x20000be8
 800808c:	20000bd4 	.word	0x20000bd4
 8008090:	20000bc8 	.word	0x20000bc8
 8008094:	200006f0 	.word	0x200006f0
 8008098:	200006ec 	.word	0x200006ec

0800809c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d109      	bne.n	80080c0 <vTaskPlaceOnEventList+0x24>
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	e7fe      	b.n	80080be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <vTaskPlaceOnEventList+0x44>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3318      	adds	r3, #24
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7fe feb0 	bl	8006e2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080ce:	2101      	movs	r1, #1
 80080d0:	6838      	ldr	r0, [r7, #0]
 80080d2:	f000 fa77 	bl	80085c4 <prvAddCurrentTaskToDelayedList>
}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200006ec 	.word	0x200006ec

080080e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d109      	bne.n	800810a <vTaskPlaceOnEventListRestricted+0x26>
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e7fe      	b.n	8008108 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800810a:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <vTaskPlaceOnEventListRestricted+0x50>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3318      	adds	r3, #24
 8008110:	4619      	mov	r1, r3
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7fe fe67 	bl	8006de6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800811e:	f04f 33ff 	mov.w	r3, #4294967295
 8008122:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	68b8      	ldr	r0, [r7, #8]
 8008128:	f000 fa4c 	bl	80085c4 <prvAddCurrentTaskToDelayedList>
	}
 800812c:	bf00      	nop
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	200006ec 	.word	0x200006ec

08008138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <xTaskRemoveFromEventList+0x2a>
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	e7fe      	b.n	8008160 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3318      	adds	r3, #24
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fe9a 	bl	8006ea0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800816c:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <xTaskRemoveFromEventList+0xac>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11d      	bne.n	80081b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	3304      	adds	r3, #4
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fe91 	bl	8006ea0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008182:	4b19      	ldr	r3, [pc, #100]	; (80081e8 <xTaskRemoveFromEventList+0xb0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d903      	bls.n	8008192 <xTaskRemoveFromEventList+0x5a>
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	4a16      	ldr	r2, [pc, #88]	; (80081e8 <xTaskRemoveFromEventList+0xb0>)
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <xTaskRemoveFromEventList+0xb4>)
 80081a0:	441a      	add	r2, r3
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f7fe fe1c 	bl	8006de6 <vListInsertEnd>
 80081ae:	e005      	b.n	80081bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	3318      	adds	r3, #24
 80081b4:	4619      	mov	r1, r3
 80081b6:	480e      	ldr	r0, [pc, #56]	; (80081f0 <xTaskRemoveFromEventList+0xb8>)
 80081b8:	f7fe fe15 	bl	8006de6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <xTaskRemoveFromEventList+0xbc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d905      	bls.n	80081d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081ce:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <xTaskRemoveFromEventList+0xc0>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e001      	b.n	80081da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80081da:	697b      	ldr	r3, [r7, #20]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20000be8 	.word	0x20000be8
 80081e8:	20000bc8 	.word	0x20000bc8
 80081ec:	200006f0 	.word	0x200006f0
 80081f0:	20000b80 	.word	0x20000b80
 80081f4:	200006ec 	.word	0x200006ec
 80081f8:	20000bd4 	.word	0x20000bd4

080081fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008204:	4b06      	ldr	r3, [pc, #24]	; (8008220 <vTaskInternalSetTimeOutState+0x24>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800820c:	4b05      	ldr	r3, [pc, #20]	; (8008224 <vTaskInternalSetTimeOutState+0x28>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	605a      	str	r2, [r3, #4]
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	20000bd8 	.word	0x20000bd8
 8008224:	20000bc4 	.word	0x20000bc4

08008228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d109      	bne.n	800824c <xTaskCheckForTimeOut+0x24>
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	613b      	str	r3, [r7, #16]
 800824a:	e7fe      	b.n	800824a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <xTaskCheckForTimeOut+0x3e>
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e7fe      	b.n	8008264 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008266:	f000 fee1 	bl	800902c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800826a:	4b1d      	ldr	r3, [pc, #116]	; (80082e0 <xTaskCheckForTimeOut+0xb8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d102      	bne.n	800828a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008284:	2300      	movs	r3, #0
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	e023      	b.n	80082d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4b15      	ldr	r3, [pc, #84]	; (80082e4 <xTaskCheckForTimeOut+0xbc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d007      	beq.n	80082a6 <xTaskCheckForTimeOut+0x7e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	429a      	cmp	r2, r3
 800829e:	d302      	bcc.n	80082a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	61fb      	str	r3, [r7, #28]
 80082a4:	e015      	b.n	80082d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d20b      	bcs.n	80082c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ff9d 	bl	80081fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	e004      	b.n	80082d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082ce:	2301      	movs	r3, #1
 80082d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082d2:	f000 fed9 	bl	8009088 <vPortExitCritical>

	return xReturn;
 80082d6:	69fb      	ldr	r3, [r7, #28]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20000bc4 	.word	0x20000bc4
 80082e4:	20000bd8 	.word	0x20000bd8

080082e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082ec:	4b03      	ldr	r3, [pc, #12]	; (80082fc <vTaskMissedYield+0x14>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000bd4 	.word	0x20000bd4

08008300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008308:	f000 f852 	bl	80083b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <prvIdleTask+0x28>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d9f9      	bls.n	8008308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <prvIdleTask+0x2c>)
 8008316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008324:	e7f0      	b.n	8008308 <prvIdleTask+0x8>
 8008326:	bf00      	nop
 8008328:	200006f0 	.word	0x200006f0
 800832c:	e000ed04 	.word	0xe000ed04

08008330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008336:	2300      	movs	r3, #0
 8008338:	607b      	str	r3, [r7, #4]
 800833a:	e00c      	b.n	8008356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4a12      	ldr	r2, [pc, #72]	; (8008390 <prvInitialiseTaskLists+0x60>)
 8008348:	4413      	add	r3, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fd1e 	bl	8006d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3301      	adds	r3, #1
 8008354:	607b      	str	r3, [r7, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b37      	cmp	r3, #55	; 0x37
 800835a:	d9ef      	bls.n	800833c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800835c:	480d      	ldr	r0, [pc, #52]	; (8008394 <prvInitialiseTaskLists+0x64>)
 800835e:	f7fe fd15 	bl	8006d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008362:	480d      	ldr	r0, [pc, #52]	; (8008398 <prvInitialiseTaskLists+0x68>)
 8008364:	f7fe fd12 	bl	8006d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008368:	480c      	ldr	r0, [pc, #48]	; (800839c <prvInitialiseTaskLists+0x6c>)
 800836a:	f7fe fd0f 	bl	8006d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800836e:	480c      	ldr	r0, [pc, #48]	; (80083a0 <prvInitialiseTaskLists+0x70>)
 8008370:	f7fe fd0c 	bl	8006d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008374:	480b      	ldr	r0, [pc, #44]	; (80083a4 <prvInitialiseTaskLists+0x74>)
 8008376:	f7fe fd09 	bl	8006d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <prvInitialiseTaskLists+0x78>)
 800837c:	4a05      	ldr	r2, [pc, #20]	; (8008394 <prvInitialiseTaskLists+0x64>)
 800837e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008380:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <prvInitialiseTaskLists+0x7c>)
 8008382:	4a05      	ldr	r2, [pc, #20]	; (8008398 <prvInitialiseTaskLists+0x68>)
 8008384:	601a      	str	r2, [r3, #0]
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	200006f0 	.word	0x200006f0
 8008394:	20000b50 	.word	0x20000b50
 8008398:	20000b64 	.word	0x20000b64
 800839c:	20000b80 	.word	0x20000b80
 80083a0:	20000b94 	.word	0x20000b94
 80083a4:	20000bac 	.word	0x20000bac
 80083a8:	20000b78 	.word	0x20000b78
 80083ac:	20000b7c 	.word	0x20000b7c

080083b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083b6:	e019      	b.n	80083ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083b8:	f000 fe38 	bl	800902c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <prvCheckTasksWaitingTermination+0x4c>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fd69 	bl	8006ea0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083ce:	4b0c      	ldr	r3, [pc, #48]	; (8008400 <prvCheckTasksWaitingTermination+0x50>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	4a0a      	ldr	r2, [pc, #40]	; (8008400 <prvCheckTasksWaitingTermination+0x50>)
 80083d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <prvCheckTasksWaitingTermination+0x54>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4a09      	ldr	r2, [pc, #36]	; (8008404 <prvCheckTasksWaitingTermination+0x54>)
 80083e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083e2:	f000 fe51 	bl	8009088 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f80e 	bl	8008408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <prvCheckTasksWaitingTermination+0x54>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e1      	bne.n	80083b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000b94 	.word	0x20000b94
 8008400:	20000bc0 	.word	0x20000bc0
 8008404:	20000ba8 	.word	0x20000ba8

08008408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008416:	2b00      	cmp	r3, #0
 8008418:	d108      	bne.n	800842c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841e:	4618      	mov	r0, r3
 8008420:	f000 ffe0 	bl	80093e4 <vPortFree>
				vPortFree( pxTCB );
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 ffdd 	bl	80093e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800842a:	e017      	b.n	800845c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008432:	2b01      	cmp	r3, #1
 8008434:	d103      	bne.n	800843e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 ffd4 	bl	80093e4 <vPortFree>
	}
 800843c:	e00e      	b.n	800845c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008444:	2b02      	cmp	r3, #2
 8008446:	d009      	beq.n	800845c <prvDeleteTCB+0x54>
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	e7fe      	b.n	800845a <prvDeleteTCB+0x52>
	}
 800845c:	bf00      	nop
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800846a:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <prvResetNextTaskUnblockTime+0x44>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <prvResetNextTaskUnblockTime+0x14>
 8008474:	2301      	movs	r3, #1
 8008476:	e000      	b.n	800847a <prvResetNextTaskUnblockTime+0x16>
 8008478:	2300      	movs	r3, #0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800847e:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <prvResetNextTaskUnblockTime+0x48>)
 8008480:	f04f 32ff 	mov.w	r2, #4294967295
 8008484:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008486:	e008      	b.n	800849a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <prvResetNextTaskUnblockTime+0x44>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	4a05      	ldr	r2, [pc, #20]	; (80084ac <prvResetNextTaskUnblockTime+0x48>)
 8008498:	6013      	str	r3, [r2, #0]
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000b78 	.word	0x20000b78
 80084ac:	20000be0 	.word	0x20000be0

080084b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <xTaskGetSchedulerState+0x34>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084be:	2301      	movs	r3, #1
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	e008      	b.n	80084d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <xTaskGetSchedulerState+0x38>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084cc:	2302      	movs	r3, #2
 80084ce:	607b      	str	r3, [r7, #4]
 80084d0:	e001      	b.n	80084d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084d2:	2300      	movs	r3, #0
 80084d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084d6:	687b      	ldr	r3, [r7, #4]
	}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	20000bcc 	.word	0x20000bcc
 80084e8:	20000be8 	.word	0x20000be8

080084ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d054      	beq.n	80085ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008502:	4b2d      	ldr	r3, [pc, #180]	; (80085b8 <xTaskPriorityDisinherit+0xcc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	429a      	cmp	r2, r3
 800850a:	d009      	beq.n	8008520 <xTaskPriorityDisinherit+0x34>
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e7fe      	b.n	800851e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008524:	2b00      	cmp	r3, #0
 8008526:	d109      	bne.n	800853c <xTaskPriorityDisinherit+0x50>
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	e7fe      	b.n	800853a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008540:	1e5a      	subs	r2, r3, #1
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854e:	429a      	cmp	r2, r3
 8008550:	d02c      	beq.n	80085ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008556:	2b00      	cmp	r3, #0
 8008558:	d128      	bne.n	80085ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	3304      	adds	r3, #4
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe fc9e 	bl	8006ea0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <xTaskPriorityDisinherit+0xd0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d903      	bls.n	800858c <xTaskPriorityDisinherit+0xa0>
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008588:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <xTaskPriorityDisinherit+0xd0>)
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4a09      	ldr	r2, [pc, #36]	; (80085c0 <xTaskPriorityDisinherit+0xd4>)
 800859a:	441a      	add	r2, r3
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	3304      	adds	r3, #4
 80085a0:	4619      	mov	r1, r3
 80085a2:	4610      	mov	r0, r2
 80085a4:	f7fe fc1f 	bl	8006de6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085ac:	697b      	ldr	r3, [r7, #20]
	}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200006ec 	.word	0x200006ec
 80085bc:	20000bc8 	.word	0x20000bc8
 80085c0:	200006f0 	.word	0x200006f0

080085c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085ce:	4b21      	ldr	r3, [pc, #132]	; (8008654 <prvAddCurrentTaskToDelayedList+0x90>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085d4:	4b20      	ldr	r3, [pc, #128]	; (8008658 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3304      	adds	r3, #4
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fc60 	bl	8006ea0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d10a      	bne.n	80085fe <prvAddCurrentTaskToDelayedList+0x3a>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ee:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <prvAddCurrentTaskToDelayedList+0x94>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4819      	ldr	r0, [pc, #100]	; (800865c <prvAddCurrentTaskToDelayedList+0x98>)
 80085f8:	f7fe fbf5 	bl	8006de6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085fc:	e026      	b.n	800864c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4413      	add	r3, r2
 8008604:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <prvAddCurrentTaskToDelayedList+0x94>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	429a      	cmp	r2, r3
 8008614:	d209      	bcs.n	800862a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008616:	4b12      	ldr	r3, [pc, #72]	; (8008660 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <prvAddCurrentTaskToDelayedList+0x94>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe fc03 	bl	8006e2e <vListInsert>
}
 8008628:	e010      	b.n	800864c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800862a:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <prvAddCurrentTaskToDelayedList+0xa0>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <prvAddCurrentTaskToDelayedList+0x94>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3304      	adds	r3, #4
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	f7fe fbf9 	bl	8006e2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <prvAddCurrentTaskToDelayedList+0xa4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	429a      	cmp	r2, r3
 8008644:	d202      	bcs.n	800864c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008646:	4a08      	ldr	r2, [pc, #32]	; (8008668 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	6013      	str	r3, [r2, #0]
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000bc4 	.word	0x20000bc4
 8008658:	200006ec 	.word	0x200006ec
 800865c:	20000bac 	.word	0x20000bac
 8008660:	20000b7c 	.word	0x20000b7c
 8008664:	20000b78 	.word	0x20000b78
 8008668:	20000be0 	.word	0x20000be0

0800866c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008672:	2300      	movs	r3, #0
 8008674:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008676:	f000 fb51 	bl	8008d1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800867a:	4b1c      	ldr	r3, [pc, #112]	; (80086ec <xTimerCreateTimerTask+0x80>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d021      	beq.n	80086c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800868a:	1d3a      	adds	r2, r7, #4
 800868c:	f107 0108 	add.w	r1, r7, #8
 8008690:	f107 030c 	add.w	r3, r7, #12
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fb5f 	bl	8006d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	9202      	str	r2, [sp, #8]
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	2302      	movs	r3, #2
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	2300      	movs	r3, #0
 80086aa:	460a      	mov	r2, r1
 80086ac:	4910      	ldr	r1, [pc, #64]	; (80086f0 <xTimerCreateTimerTask+0x84>)
 80086ae:	4811      	ldr	r0, [pc, #68]	; (80086f4 <xTimerCreateTimerTask+0x88>)
 80086b0:	f7ff f8f4 	bl	800789c <xTaskCreateStatic>
 80086b4:	4602      	mov	r2, r0
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <xTimerCreateTimerTask+0x8c>)
 80086b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086ba:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <xTimerCreateTimerTask+0x8c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086c2:	2301      	movs	r3, #1
 80086c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <xTimerCreateTimerTask+0x74>
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	e7fe      	b.n	80086de <xTimerCreateTimerTask+0x72>
	return xReturn;
 80086e0:	697b      	ldr	r3, [r7, #20]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000c1c 	.word	0x20000c1c
 80086f0:	0800ad70 	.word	0x0800ad70
 80086f4:	08008931 	.word	0x08008931
 80086f8:	20000c20 	.word	0x20000c20

080086fc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af02      	add	r7, sp, #8
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800870a:	2030      	movs	r0, #48	; 0x30
 800870c:	f000 fda8 	bl	8009260 <pvPortMalloc>
 8008710:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00d      	beq.n	8008734 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f844 	bl	80087b4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008734:	697b      	ldr	r3, [r7, #20]
	}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800873e:	b580      	push	{r7, lr}
 8008740:	b08a      	sub	sp, #40	; 0x28
 8008742:	af02      	add	r7, sp, #8
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800874c:	2330      	movs	r3, #48	; 0x30
 800874e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2b30      	cmp	r3, #48	; 0x30
 8008754:	d009      	beq.n	800876a <xTimerCreateStatic+0x2c>
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	e7fe      	b.n	8008768 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d109      	bne.n	8008784 <xTimerCreateStatic+0x46>
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	e7fe      	b.n	8008782 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	68b9      	ldr	r1, [r7, #8]
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 f809 	bl	80087b4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80087aa:	69fb      	ldr	r3, [r7, #28]
	}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d109      	bne.n	80087dc <prvInitialiseNewTimer+0x28>
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e7fe      	b.n	80087da <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d015      	beq.n	800880e <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80087e2:	f000 fa9b 	bl	8008d1c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	6a3a      	ldr	r2, [r7, #32]
 8008802:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	3304      	adds	r3, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f7fe fadf 	bl	8006dcc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800880e:	bf00      	nop
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	; 0x28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008826:	2300      	movs	r3, #0
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <xTimerGenericCommand+0x2c>
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	623b      	str	r3, [r7, #32]
 8008842:	e7fe      	b.n	8008842 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008844:	4b19      	ldr	r3, [pc, #100]	; (80088ac <xTimerGenericCommand+0x94>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d02a      	beq.n	80088a2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b05      	cmp	r3, #5
 800885c:	dc18      	bgt.n	8008890 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800885e:	f7ff fe27 	bl	80084b0 <xTaskGetSchedulerState>
 8008862:	4603      	mov	r3, r0
 8008864:	2b02      	cmp	r3, #2
 8008866:	d109      	bne.n	800887c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008868:	4b10      	ldr	r3, [pc, #64]	; (80088ac <xTimerGenericCommand+0x94>)
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	f107 0110 	add.w	r1, r7, #16
 8008870:	2300      	movs	r3, #0
 8008872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008874:	f7fe fc3c 	bl	80070f0 <xQueueGenericSend>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24
 800887a:	e012      	b.n	80088a2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800887c:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <xTimerGenericCommand+0x94>)
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	f107 0110 	add.w	r1, r7, #16
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	f7fe fc32 	bl	80070f0 <xQueueGenericSend>
 800888c:	6278      	str	r0, [r7, #36]	; 0x24
 800888e:	e008      	b.n	80088a2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <xTimerGenericCommand+0x94>)
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	f107 0110 	add.w	r1, r7, #16
 8008898:	2300      	movs	r3, #0
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	f7fe fd22 	bl	80072e4 <xQueueGenericSendFromISR>
 80088a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3728      	adds	r7, #40	; 0x28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000c1c 	.word	0x20000c1c

080088b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088ba:	4b1c      	ldr	r3, [pc, #112]	; (800892c <prvProcessExpiredTimer+0x7c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe fae9 	bl	8006ea0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d121      	bne.n	800891a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	18d1      	adds	r1, r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	6978      	ldr	r0, [r7, #20]
 80088e4:	f000 f8c8 	bl	8008a78 <prvInsertTimerInActiveList>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d015      	beq.n	800891a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088ee:	2300      	movs	r3, #0
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	2300      	movs	r3, #0
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	2100      	movs	r1, #0
 80088f8:	6978      	ldr	r0, [r7, #20]
 80088fa:	f7ff ff8d 	bl	8008818 <xTimerGenericCommand>
 80088fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <prvProcessExpiredTimer+0x6a>
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	e7fe      	b.n	8008918 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	6978      	ldr	r0, [r7, #20]
 8008920:	4798      	blx	r3
}
 8008922:	bf00      	nop
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000c14 	.word	0x20000c14

08008930 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008938:	f107 0308 	add.w	r3, r7, #8
 800893c:	4618      	mov	r0, r3
 800893e:	f000 f857 	bl	80089f0 <prvGetNextExpireTime>
 8008942:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	4619      	mov	r1, r3
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 f803 	bl	8008954 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800894e:	f000 f8d5 	bl	8008afc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008952:	e7f1      	b.n	8008938 <prvTimerTask+0x8>

08008954 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800895e:	f7ff f9c9 	bl	8007cf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008962:	f107 0308 	add.w	r3, r7, #8
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f866 	bl	8008a38 <prvSampleTimeNow>
 800896c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d130      	bne.n	80089d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10a      	bne.n	8008990 <prvProcessTimerOrBlockTask+0x3c>
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	429a      	cmp	r2, r3
 8008980:	d806      	bhi.n	8008990 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008982:	f7ff f9c5 	bl	8007d10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008986:	68f9      	ldr	r1, [r7, #12]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff ff91 	bl	80088b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800898e:	e024      	b.n	80089da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d008      	beq.n	80089a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <prvProcessTimerOrBlockTask+0x90>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	bf0c      	ite	eq
 80089a0:	2301      	moveq	r3, #1
 80089a2:	2300      	movne	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089a8:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <prvProcessTimerOrBlockTask+0x94>)
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	4619      	mov	r1, r3
 80089b6:	f7fe ff3d 	bl	8007834 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089ba:	f7ff f9a9 	bl	8007d10 <xTaskResumeAll>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089c4:	4b09      	ldr	r3, [pc, #36]	; (80089ec <prvProcessTimerOrBlockTask+0x98>)
 80089c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	f3bf 8f6f 	isb	sy
}
 80089d4:	e001      	b.n	80089da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089d6:	f7ff f99b 	bl	8007d10 <xTaskResumeAll>
}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000c18 	.word	0x20000c18
 80089e8:	20000c1c 	.word	0x20000c1c
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089f8:	4b0e      	ldr	r3, [pc, #56]	; (8008a34 <prvGetNextExpireTime+0x44>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bf0c      	ite	eq
 8008a02:	2301      	moveq	r3, #1
 8008a04:	2300      	movne	r3, #0
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	461a      	mov	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d105      	bne.n	8008a22 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <prvGetNextExpireTime+0x44>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e001      	b.n	8008a26 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a26:	68fb      	ldr	r3, [r7, #12]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	20000c14 	.word	0x20000c14

08008a38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a40:	f7ff fa02 	bl	8007e48 <xTaskGetTickCount>
 8008a44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <prvSampleTimeNow+0x3c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d205      	bcs.n	8008a5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a50:	f000 f904 	bl	8008c5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	e002      	b.n	8008a62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a62:	4a04      	ldr	r2, [pc, #16]	; (8008a74 <prvSampleTimeNow+0x3c>)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a68:	68fb      	ldr	r3, [r7, #12]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000c24 	.word	0x20000c24

08008a78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d812      	bhi.n	8008ac4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	1ad2      	subs	r2, r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d302      	bcc.n	8008ab2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e01b      	b.n	8008aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ab2:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <prvInsertTimerInActiveList+0x7c>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4619      	mov	r1, r3
 8008abc:	4610      	mov	r0, r2
 8008abe:	f7fe f9b6 	bl	8006e2e <vListInsert>
 8008ac2:	e012      	b.n	8008aea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d206      	bcs.n	8008ada <prvInsertTimerInActiveList+0x62>
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d302      	bcc.n	8008ada <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e007      	b.n	8008aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <prvInsertTimerInActiveList+0x80>)
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f7fe f9a2 	bl	8006e2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008aea:	697b      	ldr	r3, [r7, #20]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000c18 	.word	0x20000c18
 8008af8:	20000c14 	.word	0x20000c14

08008afc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08e      	sub	sp, #56	; 0x38
 8008b00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b02:	e099      	b.n	8008c38 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da17      	bge.n	8008b3a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b0a:	1d3b      	adds	r3, r7, #4
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <prvProcessReceivedCommands+0x2e>
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	61fb      	str	r3, [r7, #28]
 8008b28:	e7fe      	b.n	8008b28 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b30:	6850      	ldr	r0, [r2, #4]
 8008b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b34:	6892      	ldr	r2, [r2, #8]
 8008b36:	4611      	mov	r1, r2
 8008b38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	db7a      	blt.n	8008c36 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe f9a5 	bl	8006ea0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b56:	463b      	mov	r3, r7
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff ff6d 	bl	8008a38 <prvSampleTimeNow>
 8008b5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b09      	cmp	r3, #9
 8008b64:	d868      	bhi.n	8008c38 <prvProcessReceivedCommands+0x13c>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <prvProcessReceivedCommands+0x70>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008b95 	.word	0x08008b95
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b95 	.word	0x08008b95
 8008b78:	08008c39 	.word	0x08008c39
 8008b7c:	08008bef 	.word	0x08008bef
 8008b80:	08008c25 	.word	0x08008c25
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008b95 	.word	0x08008b95
 8008b8c:	08008c39 	.word	0x08008c39
 8008b90:	08008bef 	.word	0x08008bef
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	18d1      	adds	r1, r2, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba2:	f7ff ff69 	bl	8008a78 <prvInsertTimerInActiveList>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d045      	beq.n	8008c38 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d13d      	bne.n	8008c38 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bce:	f7ff fe23 	bl	8008818 <xTimerGenericCommand>
 8008bd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d12e      	bne.n	8008c38 <prvProcessReceivedCommands+0x13c>
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	61bb      	str	r3, [r7, #24]
 8008bec:	e7fe      	b.n	8008bec <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d109      	bne.n	8008c10 <prvProcessReceivedCommands+0x114>
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e7fe      	b.n	8008c0e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	18d1      	adds	r1, r2, r3
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1e:	f7ff ff2b 	bl	8008a78 <prvInsertTimerInActiveList>
					break;
 8008c22:	e009      	b.n	8008c38 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c30:	f000 fbd8 	bl	80093e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c34:	e000      	b.n	8008c38 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c38:	4b07      	ldr	r3, [pc, #28]	; (8008c58 <prvProcessReceivedCommands+0x15c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	1d39      	adds	r1, r7, #4
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fe fbe3 	bl	800740c <xQueueReceive>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f47f af5b 	bne.w	8008b04 <prvProcessReceivedCommands+0x8>
	}
}
 8008c4e:	bf00      	nop
 8008c50:	3730      	adds	r7, #48	; 0x30
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20000c1c 	.word	0x20000c1c

08008c5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c62:	e044      	b.n	8008cee <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c64:	4b2b      	ldr	r3, [pc, #172]	; (8008d14 <prvSwitchTimerLists+0xb8>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c6e:	4b29      	ldr	r3, [pc, #164]	; (8008d14 <prvSwitchTimerLists+0xb8>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe f90f 	bl	8006ea0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d12d      	bne.n	8008cee <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4413      	add	r3, r2
 8008c9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d90e      	bls.n	8008cc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cb0:	4b18      	ldr	r3, [pc, #96]	; (8008d14 <prvSwitchTimerLists+0xb8>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f7fe f8b7 	bl	8006e2e <vListInsert>
 8008cc0:	e015      	b.n	8008cee <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff fda3 	bl	8008818 <xTimerGenericCommand>
 8008cd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <prvSwitchTimerLists+0x92>
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	e7fe      	b.n	8008cec <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <prvSwitchTimerLists+0xb8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1b5      	bne.n	8008c64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cf8:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <prvSwitchTimerLists+0xb8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cfe:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <prvSwitchTimerLists+0xbc>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <prvSwitchTimerLists+0xb8>)
 8008d04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <prvSwitchTimerLists+0xbc>)
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	6013      	str	r3, [r2, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000c14 	.word	0x20000c14
 8008d18:	20000c18 	.word	0x20000c18

08008d1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d22:	f000 f983 	bl	800902c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d26:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d120      	bne.n	8008d70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d2e:	4814      	ldr	r0, [pc, #80]	; (8008d80 <prvCheckForValidListAndQueue+0x64>)
 8008d30:	f7fe f82c 	bl	8006d8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d34:	4813      	ldr	r0, [pc, #76]	; (8008d84 <prvCheckForValidListAndQueue+0x68>)
 8008d36:	f7fe f829 	bl	8006d8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d3a:	4b13      	ldr	r3, [pc, #76]	; (8008d88 <prvCheckForValidListAndQueue+0x6c>)
 8008d3c:	4a10      	ldr	r2, [pc, #64]	; (8008d80 <prvCheckForValidListAndQueue+0x64>)
 8008d3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d40:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <prvCheckForValidListAndQueue+0x70>)
 8008d42:	4a10      	ldr	r2, [pc, #64]	; (8008d84 <prvCheckForValidListAndQueue+0x68>)
 8008d44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d46:	2300      	movs	r3, #0
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <prvCheckForValidListAndQueue+0x74>)
 8008d4c:	4a11      	ldr	r2, [pc, #68]	; (8008d94 <prvCheckForValidListAndQueue+0x78>)
 8008d4e:	2110      	movs	r1, #16
 8008d50:	200a      	movs	r0, #10
 8008d52:	f7fe f937 	bl	8006fc4 <xQueueGenericCreateStatic>
 8008d56:	4602      	mov	r2, r0
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d5a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <prvCheckForValidListAndQueue+0x60>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	490b      	ldr	r1, [pc, #44]	; (8008d98 <prvCheckForValidListAndQueue+0x7c>)
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fd3a 	bl	80077e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d70:	f000 f98a 	bl	8009088 <vPortExitCritical>
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000c1c 	.word	0x20000c1c
 8008d80:	20000bec 	.word	0x20000bec
 8008d84:	20000c00 	.word	0x20000c00
 8008d88:	20000c14 	.word	0x20000c14
 8008d8c:	20000c18 	.word	0x20000c18
 8008d90:	20000cc8 	.word	0x20000cc8
 8008d94:	20000c28 	.word	0x20000c28
 8008d98:	0800ad78 	.word	0x0800ad78

08008d9c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d109      	bne.n	8008dc2 <pvTimerGetTimerID+0x26>
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e7fe      	b.n	8008dc0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8008dc2:	f000 f933 	bl	800902c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008dcc:	f000 f95c 	bl	8009088 <vPortExitCritical>

	return pvReturn;
 8008dd0:	693b      	ldr	r3, [r7, #16]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3b04      	subs	r3, #4
 8008dec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3b04      	subs	r3, #4
 8008dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f023 0201 	bic.w	r2, r3, #1
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3b04      	subs	r3, #4
 8008e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e0c:	4a0c      	ldr	r2, [pc, #48]	; (8008e40 <pxPortInitialiseStack+0x64>)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3b14      	subs	r3, #20
 8008e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3b04      	subs	r3, #4
 8008e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f06f 0202 	mvn.w	r2, #2
 8008e2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3b20      	subs	r3, #32
 8008e30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e32:	68fb      	ldr	r3, [r7, #12]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	08008e45 	.word	0x08008e45

08008e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e4e:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <prvTaskExitError+0x50>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d009      	beq.n	8008e6c <prvTaskExitError+0x28>
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e7fe      	b.n	8008e6a <prvTaskExitError+0x26>
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e7e:	bf00      	nop
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0fc      	beq.n	8008e80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20000008 	.word	0x20000008
	...

08008ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <pxCurrentTCBConst2>)
 8008ea2:	6819      	ldr	r1, [r3, #0]
 8008ea4:	6808      	ldr	r0, [r1, #0]
 8008ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eaa:	f380 8809 	msr	PSP, r0
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8811 	msr	BASEPRI, r0
 8008eba:	4770      	bx	lr
 8008ebc:	f3af 8000 	nop.w

08008ec0 <pxCurrentTCBConst2>:
 8008ec0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop

08008ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ec8:	4808      	ldr	r0, [pc, #32]	; (8008eec <prvPortStartFirstTask+0x24>)
 8008eca:	6800      	ldr	r0, [r0, #0]
 8008ecc:	6800      	ldr	r0, [r0, #0]
 8008ece:	f380 8808 	msr	MSP, r0
 8008ed2:	f04f 0000 	mov.w	r0, #0
 8008ed6:	f380 8814 	msr	CONTROL, r0
 8008eda:	b662      	cpsie	i
 8008edc:	b661      	cpsie	f
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	df00      	svc	0
 8008ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eea:	bf00      	nop
 8008eec:	e000ed08 	.word	0xe000ed08

08008ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ef6:	4b44      	ldr	r3, [pc, #272]	; (8009008 <xPortStartScheduler+0x118>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a44      	ldr	r2, [pc, #272]	; (800900c <xPortStartScheduler+0x11c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d109      	bne.n	8008f14 <xPortStartScheduler+0x24>
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	e7fe      	b.n	8008f12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f14:	4b3c      	ldr	r3, [pc, #240]	; (8009008 <xPortStartScheduler+0x118>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a3d      	ldr	r2, [pc, #244]	; (8009010 <xPortStartScheduler+0x120>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d109      	bne.n	8008f32 <xPortStartScheduler+0x42>
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e7fe      	b.n	8008f30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f32:	4b38      	ldr	r3, [pc, #224]	; (8009014 <xPortStartScheduler+0x124>)
 8008f34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	22ff      	movs	r2, #255	; 0xff
 8008f42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	4b30      	ldr	r3, [pc, #192]	; (8009018 <xPortStartScheduler+0x128>)
 8008f58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f5a:	4b30      	ldr	r3, [pc, #192]	; (800901c <xPortStartScheduler+0x12c>)
 8008f5c:	2207      	movs	r2, #7
 8008f5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f60:	e009      	b.n	8008f76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008f62:	4b2e      	ldr	r3, [pc, #184]	; (800901c <xPortStartScheduler+0x12c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	4a2c      	ldr	r2, [pc, #176]	; (800901c <xPortStartScheduler+0x12c>)
 8008f6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7e:	2b80      	cmp	r3, #128	; 0x80
 8008f80:	d0ef      	beq.n	8008f62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f82:	4b26      	ldr	r3, [pc, #152]	; (800901c <xPortStartScheduler+0x12c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f1c3 0307 	rsb	r3, r3, #7
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d009      	beq.n	8008fa2 <xPortStartScheduler+0xb2>
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	60bb      	str	r3, [r7, #8]
 8008fa0:	e7fe      	b.n	8008fa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fa2:	4b1e      	ldr	r3, [pc, #120]	; (800901c <xPortStartScheduler+0x12c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	4a1c      	ldr	r2, [pc, #112]	; (800901c <xPortStartScheduler+0x12c>)
 8008faa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fac:	4b1b      	ldr	r3, [pc, #108]	; (800901c <xPortStartScheduler+0x12c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fb4:	4a19      	ldr	r2, [pc, #100]	; (800901c <xPortStartScheduler+0x12c>)
 8008fb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fc0:	4b17      	ldr	r3, [pc, #92]	; (8009020 <xPortStartScheduler+0x130>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a16      	ldr	r2, [pc, #88]	; (8009020 <xPortStartScheduler+0x130>)
 8008fc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fcc:	4b14      	ldr	r3, [pc, #80]	; (8009020 <xPortStartScheduler+0x130>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a13      	ldr	r2, [pc, #76]	; (8009020 <xPortStartScheduler+0x130>)
 8008fd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fd8:	f000 f8d6 	bl	8009188 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fdc:	4b11      	ldr	r3, [pc, #68]	; (8009024 <xPortStartScheduler+0x134>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fe2:	f000 f8f5 	bl	80091d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fe6:	4b10      	ldr	r3, [pc, #64]	; (8009028 <xPortStartScheduler+0x138>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a0f      	ldr	r2, [pc, #60]	; (8009028 <xPortStartScheduler+0x138>)
 8008fec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ff0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ff2:	f7ff ff69 	bl	8008ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ff6:	f7fe fff5 	bl	8007fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8008ffa:	f7ff ff23 	bl	8008e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	e000ed00 	.word	0xe000ed00
 800900c:	410fc271 	.word	0x410fc271
 8009010:	410fc270 	.word	0x410fc270
 8009014:	e000e400 	.word	0xe000e400
 8009018:	20000d18 	.word	0x20000d18
 800901c:	20000d1c 	.word	0x20000d1c
 8009020:	e000ed20 	.word	0xe000ed20
 8009024:	20000008 	.word	0x20000008
 8009028:	e000ef34 	.word	0xe000ef34

0800902c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <vPortEnterCritical+0x54>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3301      	adds	r3, #1
 800904a:	4a0d      	ldr	r2, [pc, #52]	; (8009080 <vPortEnterCritical+0x54>)
 800904c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <vPortEnterCritical+0x54>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d10e      	bne.n	8009074 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009056:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <vPortEnterCritical+0x58>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <vPortEnterCritical+0x48>
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	e7fe      	b.n	8009072 <vPortEnterCritical+0x46>
	}
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	20000008 	.word	0x20000008
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800908e:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <vPortExitCritical+0x4c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d109      	bne.n	80090aa <vPortExitCritical+0x22>
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	607b      	str	r3, [r7, #4]
 80090a8:	e7fe      	b.n	80090a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <vPortExitCritical+0x4c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <vPortExitCritical+0x4c>)
 80090b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090b4:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <vPortExitCritical+0x4c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <vPortExitCritical+0x3e>
 80090bc:	2300      	movs	r3, #0
 80090be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000008 	.word	0x20000008
	...

080090e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090e0:	f3ef 8009 	mrs	r0, PSP
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	4b15      	ldr	r3, [pc, #84]	; (8009140 <pxCurrentTCBConst>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	f01e 0f10 	tst.w	lr, #16
 80090f0:	bf08      	it	eq
 80090f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	6010      	str	r0, [r2, #0]
 80090fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009104:	f380 8811 	msr	BASEPRI, r0
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f7fe ff68 	bl	8007fe4 <vTaskSwitchContext>
 8009114:	f04f 0000 	mov.w	r0, #0
 8009118:	f380 8811 	msr	BASEPRI, r0
 800911c:	bc09      	pop	{r0, r3}
 800911e:	6819      	ldr	r1, [r3, #0]
 8009120:	6808      	ldr	r0, [r1, #0]
 8009122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009126:	f01e 0f10 	tst.w	lr, #16
 800912a:	bf08      	it	eq
 800912c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009130:	f380 8809 	msr	PSP, r0
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w

08009140 <pxCurrentTCBConst>:
 8009140:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop

08009148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009160:	f7fe fe82 	bl	8007e68 <xTaskIncrementTick>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800916a:	4b06      	ldr	r3, [pc, #24]	; (8009184 <SysTick_Handler+0x3c>)
 800916c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	2300      	movs	r3, #0
 8009174:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800918c:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <vPortSetupTimerInterrupt+0x34>)
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009192:	4b0b      	ldr	r3, [pc, #44]	; (80091c0 <vPortSetupTimerInterrupt+0x38>)
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <vPortSetupTimerInterrupt+0x3c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a0a      	ldr	r2, [pc, #40]	; (80091c8 <vPortSetupTimerInterrupt+0x40>)
 800919e:	fba2 2303 	umull	r2, r3, r2, r3
 80091a2:	099b      	lsrs	r3, r3, #6
 80091a4:	4a09      	ldr	r2, [pc, #36]	; (80091cc <vPortSetupTimerInterrupt+0x44>)
 80091a6:	3b01      	subs	r3, #1
 80091a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091aa:	4b04      	ldr	r3, [pc, #16]	; (80091bc <vPortSetupTimerInterrupt+0x34>)
 80091ac:	2207      	movs	r2, #7
 80091ae:	601a      	str	r2, [r3, #0]
}
 80091b0:	bf00      	nop
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	e000e010 	.word	0xe000e010
 80091c0:	e000e018 	.word	0xe000e018
 80091c4:	20000010 	.word	0x20000010
 80091c8:	10624dd3 	.word	0x10624dd3
 80091cc:	e000e014 	.word	0xe000e014

080091d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091e0 <vPortEnableVFP+0x10>
 80091d4:	6801      	ldr	r1, [r0, #0]
 80091d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091da:	6001      	str	r1, [r0, #0]
 80091dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091de:	bf00      	nop
 80091e0:	e000ed88 	.word	0xe000ed88

080091e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091ea:	f3ef 8305 	mrs	r3, IPSR
 80091ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b0f      	cmp	r3, #15
 80091f4:	d913      	bls.n	800921e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091f6:	4a16      	ldr	r2, [pc, #88]	; (8009250 <vPortValidateInterruptPriority+0x6c>)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009200:	4b14      	ldr	r3, [pc, #80]	; (8009254 <vPortValidateInterruptPriority+0x70>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	7afa      	ldrb	r2, [r7, #11]
 8009206:	429a      	cmp	r2, r3
 8009208:	d209      	bcs.n	800921e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	607b      	str	r3, [r7, #4]
 800921c:	e7fe      	b.n	800921c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <vPortValidateInterruptPriority+0x74>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009226:	4b0d      	ldr	r3, [pc, #52]	; (800925c <vPortValidateInterruptPriority+0x78>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d909      	bls.n	8009242 <vPortValidateInterruptPriority+0x5e>
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	e7fe      	b.n	8009240 <vPortValidateInterruptPriority+0x5c>
	}
 8009242:	bf00      	nop
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	e000e3f0 	.word	0xe000e3f0
 8009254:	20000d18 	.word	0x20000d18
 8009258:	e000ed0c 	.word	0xe000ed0c
 800925c:	20000d1c 	.word	0x20000d1c

08009260 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800926c:	f7fe fd42 	bl	8007cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009270:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <pvPortMalloc+0x170>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009278:	f000 f90c 	bl	8009494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800927c:	4b55      	ldr	r3, [pc, #340]	; (80093d4 <pvPortMalloc+0x174>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4013      	ands	r3, r2
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 808c 	bne.w	80093a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01c      	beq.n	80092ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009290:	2208      	movs	r2, #8
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f003 0307 	and.w	r3, r3, #7
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d013      	beq.n	80092ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f023 0307 	bic.w	r3, r3, #7
 80092a8:	3308      	adds	r3, #8
 80092aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <pvPortMalloc+0x6a>
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e7fe      	b.n	80092c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d068      	beq.n	80093a2 <pvPortMalloc+0x142>
 80092d0:	4b41      	ldr	r3, [pc, #260]	; (80093d8 <pvPortMalloc+0x178>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d863      	bhi.n	80093a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092da:	4b40      	ldr	r3, [pc, #256]	; (80093dc <pvPortMalloc+0x17c>)
 80092dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092de:	4b3f      	ldr	r3, [pc, #252]	; (80093dc <pvPortMalloc+0x17c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092e4:	e004      	b.n	80092f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d903      	bls.n	8009302 <pvPortMalloc+0xa2>
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1f1      	bne.n	80092e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009302:	4b33      	ldr	r3, [pc, #204]	; (80093d0 <pvPortMalloc+0x170>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009308:	429a      	cmp	r2, r3
 800930a:	d04a      	beq.n	80093a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2208      	movs	r2, #8
 8009312:	4413      	add	r3, r2
 8009314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	1ad2      	subs	r2, r2, r3
 8009326:	2308      	movs	r3, #8
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	429a      	cmp	r2, r3
 800932c:	d91e      	bls.n	800936c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800932e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	2b00      	cmp	r3, #0
 800933e:	d009      	beq.n	8009354 <pvPortMalloc+0xf4>
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	e7fe      	b.n	8009352 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	1ad2      	subs	r2, r2, r3
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009366:	69b8      	ldr	r0, [r7, #24]
 8009368:	f000 f8f6 	bl	8009558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800936c:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <pvPortMalloc+0x178>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	4a18      	ldr	r2, [pc, #96]	; (80093d8 <pvPortMalloc+0x178>)
 8009378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800937a:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <pvPortMalloc+0x178>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4b18      	ldr	r3, [pc, #96]	; (80093e0 <pvPortMalloc+0x180>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d203      	bcs.n	800938e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <pvPortMalloc+0x178>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a15      	ldr	r2, [pc, #84]	; (80093e0 <pvPortMalloc+0x180>)
 800938c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <pvPortMalloc+0x174>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	431a      	orrs	r2, r3
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093a2:	f7fe fcb5 	bl	8007d10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	f003 0307 	and.w	r3, r3, #7
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <pvPortMalloc+0x164>
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	e7fe      	b.n	80093c2 <pvPortMalloc+0x162>
	return pvReturn;
 80093c4:	69fb      	ldr	r3, [r7, #28]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3728      	adds	r7, #40	; 0x28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20001928 	.word	0x20001928
 80093d4:	20001934 	.word	0x20001934
 80093d8:	2000192c 	.word	0x2000192c
 80093dc:	20001920 	.word	0x20001920
 80093e0:	20001930 	.word	0x20001930

080093e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d046      	beq.n	8009484 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093f6:	2308      	movs	r3, #8
 80093f8:	425b      	negs	r3, r3
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4413      	add	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	4b20      	ldr	r3, [pc, #128]	; (800948c <vPortFree+0xa8>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4013      	ands	r3, r2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <vPortFree+0x42>
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	e7fe      	b.n	8009424 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <vPortFree+0x5e>
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	60bb      	str	r3, [r7, #8]
 8009440:	e7fe      	b.n	8009440 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	4b11      	ldr	r3, [pc, #68]	; (800948c <vPortFree+0xa8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4013      	ands	r3, r2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d019      	beq.n	8009484 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d115      	bne.n	8009484 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	4b0b      	ldr	r3, [pc, #44]	; (800948c <vPortFree+0xa8>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	43db      	mvns	r3, r3
 8009462:	401a      	ands	r2, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009468:	f7fe fc44 	bl	8007cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <vPortFree+0xac>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4413      	add	r3, r2
 8009476:	4a06      	ldr	r2, [pc, #24]	; (8009490 <vPortFree+0xac>)
 8009478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800947a:	6938      	ldr	r0, [r7, #16]
 800947c:	f000 f86c 	bl	8009558 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009480:	f7fe fc46 	bl	8007d10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009484:	bf00      	nop
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20001934 	.word	0x20001934
 8009490:	2000192c 	.word	0x2000192c

08009494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800949a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800949e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094a0:	4b27      	ldr	r3, [pc, #156]	; (8009540 <prvHeapInit+0xac>)
 80094a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00c      	beq.n	80094c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3307      	adds	r3, #7
 80094b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <prvHeapInit+0xac>)
 80094c4:	4413      	add	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <prvHeapInit+0xb0>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <prvHeapInit+0xb0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094e0:	2208      	movs	r2, #8
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0307 	bic.w	r3, r3, #7
 80094ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4a15      	ldr	r2, [pc, #84]	; (8009548 <prvHeapInit+0xb4>)
 80094f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094f6:	4b14      	ldr	r3, [pc, #80]	; (8009548 <prvHeapInit+0xb4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094fe:	4b12      	ldr	r3, [pc, #72]	; (8009548 <prvHeapInit+0xb4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	1ad2      	subs	r2, r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <prvHeapInit+0xb4>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <prvHeapInit+0xb8>)
 8009522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <prvHeapInit+0xbc>)
 800952a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <prvHeapInit+0xc0>)
 800952e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000d20 	.word	0x20000d20
 8009544:	20001920 	.word	0x20001920
 8009548:	20001928 	.word	0x20001928
 800954c:	20001930 	.word	0x20001930
 8009550:	2000192c 	.word	0x2000192c
 8009554:	20001934 	.word	0x20001934

08009558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009560:	4b28      	ldr	r3, [pc, #160]	; (8009604 <prvInsertBlockIntoFreeList+0xac>)
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e002      	b.n	800956c <prvInsertBlockIntoFreeList+0x14>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d8f7      	bhi.n	8009566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	4413      	add	r3, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d108      	bne.n	800959a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	441a      	add	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d118      	bne.n	80095e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d00d      	beq.n	80095d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	441a      	add	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e008      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e003      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d002      	beq.n	80095f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20001920 	.word	0x20001920
 8009608:	20001928 	.word	0x20001928

0800960c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b096      	sub	sp, #88	; 0x58
 8009610:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009612:	f7f6 ff85 	bl	8000520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009616:	f000 f871 	bl	80096fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800961a:	f000 fcf3 	bl	800a004 <MX_GPIO_Init>
  MX_DMA_Init();
 800961e:	f000 fc83 	bl	8009f28 <MX_DMA_Init>
  MX_ADC2_Init();
 8009622:	f000 f8db 	bl	80097dc <MX_ADC2_Init>
  MX_CRC_Init();
 8009626:	f000 f93f 	bl	80098a8 <MX_CRC_Init>
  MX_FMAC_Init();
 800962a:	f000 f9a7 	bl	800997c <MX_FMAC_Init>
  MX_I2C1_Init();
 800962e:	f000 f9b9 	bl	80099a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009632:	f000 f9f7 	bl	8009a24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8009636:	f000 faa5 	bl	8009b84 <MX_TIM2_Init>
  MX_TIM4_Init();
 800963a:	f000 faef 	bl	8009c1c <MX_TIM4_Init>
  MX_TIM8_Init();
 800963e:	f000 fb3b 	bl	8009cb8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009642:	f000 fbcd 	bl	8009de0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8009646:	f000 fc21 	bl	8009e8c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 800964a:	f000 f94f 	bl	80098ec <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800964e:	f7fd f98f 	bl	8006970 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of ESC_Impeller */
  const osTimerAttr_t ESC_Impeller_attributes = {
 8009652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	605a      	str	r2, [r3, #4]
 800965c:	609a      	str	r2, [r3, #8]
 800965e:	60da      	str	r2, [r3, #12]
 8009660:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <main+0xcc>)
 8009662:	64bb      	str	r3, [r7, #72]	; 0x48
    .name = "ESC_Impeller"
  };
  ESC_ImpellerHandle = osTimerNew(Update_ESC, osTimerPeriodic, NULL, &ESC_Impeller_attributes);
 8009664:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009668:	2200      	movs	r2, #0
 800966a:	2101      	movs	r1, #1
 800966c:	481b      	ldr	r0, [pc, #108]	; (80096dc <main+0xd0>)
 800966e:	f7fd fad5 	bl	8006c1c <osTimerNew>
 8009672:	4602      	mov	r2, r0
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <main+0xd4>)
 8009676:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8009678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800967c:	2224      	movs	r2, #36	; 0x24
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f001 fb54 	bl	800ad2e <memset>
 8009686:	4b17      	ldr	r3, [pc, #92]	; (80096e4 <main+0xd8>)
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
 800968a:	2380      	movs	r3, #128	; 0x80
 800968c:	63bb      	str	r3, [r7, #56]	; 0x38
 800968e:	2318      	movs	r3, #24
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009696:	461a      	mov	r2, r3
 8009698:	2100      	movs	r1, #0
 800969a:	4813      	ldr	r0, [pc, #76]	; (80096e8 <main+0xdc>)
 800969c:	f7fd f9d0 	bl	8006a40 <osThreadNew>
 80096a0:	4602      	mov	r2, r0
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <main+0xe0>)
 80096a4:	601a      	str	r2, [r3, #0]

  /* definition and creation of IMU_6500 */
  const osThreadAttr_t IMU_6500_attributes = {
 80096a6:	463b      	mov	r3, r7
 80096a8:	2224      	movs	r2, #36	; 0x24
 80096aa:	2100      	movs	r1, #0
 80096ac:	4618      	mov	r0, r3
 80096ae:	f001 fb3e 	bl	800ad2e <memset>
 80096b2:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <main+0xe4>)
 80096b4:	603b      	str	r3, [r7, #0]
 80096b6:	2380      	movs	r3, #128	; 0x80
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	2328      	movs	r3, #40	; 0x28
 80096bc:	61bb      	str	r3, [r7, #24]
    .name = "IMU_6500",
    .priority = (osPriority_t) osPriorityHigh,
    .stack_size = 128
  };
  IMU_6500Handle = osThreadNew(Read_IMU, NULL, &IMU_6500_attributes);
 80096be:	463b      	mov	r3, r7
 80096c0:	461a      	mov	r2, r3
 80096c2:	2100      	movs	r1, #0
 80096c4:	480b      	ldr	r0, [pc, #44]	; (80096f4 <main+0xe8>)
 80096c6:	f7fd f9bb 	bl	8006a40 <osThreadNew>
 80096ca:	4602      	mov	r2, r0
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <main+0xec>)
 80096ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80096d0:	f7fd f982 	bl	80069d8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80096d4:	e7fe      	b.n	80096d4 <main+0xc8>
 80096d6:	bf00      	nop
 80096d8:	0800ad80 	.word	0x0800ad80
 80096dc:	0800a24d 	.word	0x0800a24d
 80096e0:	200019dc 	.word	0x200019dc
 80096e4:	0800ad90 	.word	0x0800ad90
 80096e8:	0800a125 	.word	0x0800a125
 80096ec:	200019e0 	.word	0x200019e0
 80096f0:	0800ad9c 	.word	0x0800ad9c
 80096f4:	0800a18d 	.word	0x0800a18d
 80096f8:	20001c00 	.word	0x20001c00

080096fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b0a4      	sub	sp, #144	; 0x90
 8009700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009706:	2238      	movs	r2, #56	; 0x38
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fb0f 	bl	800ad2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009710:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	605a      	str	r2, [r3, #4]
 800971a:	609a      	str	r2, [r3, #8]
 800971c:	60da      	str	r2, [r3, #12]
 800971e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009720:	463b      	mov	r3, r7
 8009722:	2244      	movs	r2, #68	; 0x44
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fb01 	bl	800ad2e <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800972c:	2000      	movs	r0, #0
 800972e:	f7f8 ff45 	bl	80025bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009732:	2302      	movs	r3, #2
 8009734:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800973a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009740:	2302      	movs	r3, #2
 8009742:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009744:	2302      	movs	r3, #2
 8009746:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009748:	2304      	movs	r3, #4
 800974a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800974c:	2355      	movs	r3, #85	; 0x55
 800974e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009752:	2302      	movs	r3, #2
 8009754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009758:	2302      	movs	r3, #2
 800975a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800975e:	2302      	movs	r3, #2
 8009760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009764:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009768:	4618      	mov	r0, r3
 800976a:	f7f8 ffcb 	bl	8002704 <HAL_RCC_OscConfig>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8009774:	f000 fd86 	bl	800a284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009778:	230f      	movs	r3, #15
 800977a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800977c:	2303      	movs	r3, #3
 800977e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009780:	2300      	movs	r3, #0
 8009782:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009784:	2300      	movs	r3, #0
 8009786:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009788:	2300      	movs	r3, #0
 800978a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800978c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009790:	2108      	movs	r1, #8
 8009792:	4618      	mov	r0, r3
 8009794:	f7f9 face 	bl	8002d34 <HAL_RCC_ClockConfig>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800979e:	f000 fd71 	bl	800a284 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80097a2:	f249 0343 	movw	r3, #36931	; 0x9043
 80097a6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80097a8:	2300      	movs	r3, #0
 80097aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80097ac:	2300      	movs	r3, #0
 80097ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80097b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097b8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80097ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80097be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80097c0:	463b      	mov	r3, r7
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f9 fd04 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80097ce:	f000 fd59 	bl	800a284 <Error_Handler>
  }
}
 80097d2:	bf00      	nop
 80097d4:	3790      	adds	r7, #144	; 0x90
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80097e2:	463b      	mov	r3, r7
 80097e4:	2220      	movs	r2, #32
 80097e6:	2100      	movs	r1, #0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 faa0 	bl	800ad2e <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80097ee:	4b2b      	ldr	r3, [pc, #172]	; (800989c <MX_ADC2_Init+0xc0>)
 80097f0:	4a2b      	ldr	r2, [pc, #172]	; (80098a0 <MX_ADC2_Init+0xc4>)
 80097f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80097f4:	4b29      	ldr	r3, [pc, #164]	; (800989c <MX_ADC2_Init+0xc0>)
 80097f6:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80097fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80097fc:	4b27      	ldr	r3, [pc, #156]	; (800989c <MX_ADC2_Init+0xc0>)
 80097fe:	2200      	movs	r2, #0
 8009800:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009802:	4b26      	ldr	r3, [pc, #152]	; (800989c <MX_ADC2_Init+0xc0>)
 8009804:	2200      	movs	r2, #0
 8009806:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8009808:	4b24      	ldr	r3, [pc, #144]	; (800989c <MX_ADC2_Init+0xc0>)
 800980a:	2200      	movs	r2, #0
 800980c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800980e:	4b23      	ldr	r3, [pc, #140]	; (800989c <MX_ADC2_Init+0xc0>)
 8009810:	2200      	movs	r2, #0
 8009812:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009814:	4b21      	ldr	r3, [pc, #132]	; (800989c <MX_ADC2_Init+0xc0>)
 8009816:	2204      	movs	r2, #4
 8009818:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800981a:	4b20      	ldr	r3, [pc, #128]	; (800989c <MX_ADC2_Init+0xc0>)
 800981c:	2200      	movs	r2, #0
 800981e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8009820:	4b1e      	ldr	r3, [pc, #120]	; (800989c <MX_ADC2_Init+0xc0>)
 8009822:	2200      	movs	r2, #0
 8009824:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8009826:	4b1d      	ldr	r3, [pc, #116]	; (800989c <MX_ADC2_Init+0xc0>)
 8009828:	2201      	movs	r2, #1
 800982a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <MX_ADC2_Init+0xc0>)
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009834:	4b19      	ldr	r3, [pc, #100]	; (800989c <MX_ADC2_Init+0xc0>)
 8009836:	2200      	movs	r2, #0
 8009838:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800983a:	4b18      	ldr	r3, [pc, #96]	; (800989c <MX_ADC2_Init+0xc0>)
 800983c:	2200      	movs	r2, #0
 800983e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8009840:	4b16      	ldr	r3, [pc, #88]	; (800989c <MX_ADC2_Init+0xc0>)
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009848:	4b14      	ldr	r3, [pc, #80]	; (800989c <MX_ADC2_Init+0xc0>)
 800984a:	2200      	movs	r2, #0
 800984c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <MX_ADC2_Init+0xc0>)
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009856:	4811      	ldr	r0, [pc, #68]	; (800989c <MX_ADC2_Init+0xc0>)
 8009858:	f7f7 f85a 	bl	8000910 <HAL_ADC_Init>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8009862:	f000 fd0f 	bl	800a284 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8009866:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <MX_ADC2_Init+0xc8>)
 8009868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800986a:	2306      	movs	r3, #6
 800986c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800986e:	2300      	movs	r3, #0
 8009870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009872:	237f      	movs	r3, #127	; 0x7f
 8009874:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009876:	2304      	movs	r3, #4
 8009878:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800987e:	463b      	mov	r3, r7
 8009880:	4619      	mov	r1, r3
 8009882:	4806      	ldr	r0, [pc, #24]	; (800989c <MX_ADC2_Init+0xc0>)
 8009884:	f7f7 f9cc 	bl	8000c20 <HAL_ADC_ConfigChannel>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800988e:	f000 fcf9 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009892:	bf00      	nop
 8009894:	3720      	adds	r7, #32
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20001a64 	.word	0x20001a64
 80098a0:	50000100 	.word	0x50000100
 80098a4:	47520000 	.word	0x47520000

080098a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80098ac:	4b0d      	ldr	r3, [pc, #52]	; (80098e4 <MX_CRC_Init+0x3c>)
 80098ae:	4a0e      	ldr	r2, [pc, #56]	; (80098e8 <MX_CRC_Init+0x40>)
 80098b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80098b2:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <MX_CRC_Init+0x3c>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80098b8:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <MX_CRC_Init+0x3c>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80098be:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <MX_CRC_Init+0x3c>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80098c4:	4b07      	ldr	r3, [pc, #28]	; (80098e4 <MX_CRC_Init+0x3c>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80098ca:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <MX_CRC_Init+0x3c>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80098d0:	4804      	ldr	r0, [pc, #16]	; (80098e4 <MX_CRC_Init+0x3c>)
 80098d2:	f7f7 fde9 	bl	80014a8 <HAL_CRC_Init>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80098dc:	f000 fcd2 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80098e0:	bf00      	nop
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20001b1c 	.word	0x20001b1c
 80098e8:	40023000 	.word	0x40023000

080098ec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80098f0:	4b20      	ldr	r3, [pc, #128]	; (8009974 <MX_FDCAN1_Init+0x88>)
 80098f2:	4a21      	ldr	r2, [pc, #132]	; (8009978 <MX_FDCAN1_Init+0x8c>)
 80098f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80098f6:	4b1f      	ldr	r3, [pc, #124]	; (8009974 <MX_FDCAN1_Init+0x88>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80098fc:	4b1d      	ldr	r3, [pc, #116]	; (8009974 <MX_FDCAN1_Init+0x88>)
 80098fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009902:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8009904:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009906:	2200      	movs	r2, #0
 8009908:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <MX_FDCAN1_Init+0x88>)
 800990c:	2200      	movs	r2, #0
 800990e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8009910:	4b18      	ldr	r3, [pc, #96]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009912:	2200      	movs	r2, #0
 8009914:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8009916:	4b17      	ldr	r3, [pc, #92]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009918:	2200      	movs	r2, #0
 800991a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800991c:	4b15      	ldr	r3, [pc, #84]	; (8009974 <MX_FDCAN1_Init+0x88>)
 800991e:	2201      	movs	r2, #1
 8009920:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8009922:	4b14      	ldr	r3, [pc, #80]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009924:	2201      	movs	r2, #1
 8009926:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8009928:	4b12      	ldr	r3, [pc, #72]	; (8009974 <MX_FDCAN1_Init+0x88>)
 800992a:	2202      	movs	r2, #2
 800992c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800992e:	4b11      	ldr	r3, [pc, #68]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009930:	2202      	movs	r2, #2
 8009932:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009936:	2201      	movs	r2, #1
 8009938:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800993a:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <MX_FDCAN1_Init+0x88>)
 800993c:	2201      	movs	r2, #1
 800993e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8009940:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009942:	2201      	movs	r2, #1
 8009944:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009948:	2201      	movs	r2, #1
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800994c:	4b09      	ldr	r3, [pc, #36]	; (8009974 <MX_FDCAN1_Init+0x88>)
 800994e:	2200      	movs	r2, #0
 8009950:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8009952:	4b08      	ldr	r3, [pc, #32]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009954:	2200      	movs	r2, #0
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <MX_FDCAN1_Init+0x88>)
 800995a:	2200      	movs	r2, #0
 800995c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800995e:	4805      	ldr	r0, [pc, #20]	; (8009974 <MX_FDCAN1_Init+0x88>)
 8009960:	f7f8 f8fe 	bl	8001b60 <HAL_FDCAN_Init>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800996a:	f000 fc8b 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800996e:	bf00      	nop
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20001d88 	.word	0x20001d88
 8009978:	40006400 	.word	0x40006400

0800997c <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8009980:	4b06      	ldr	r3, [pc, #24]	; (800999c <MX_FMAC_Init+0x20>)
 8009982:	4a07      	ldr	r2, [pc, #28]	; (80099a0 <MX_FMAC_Init+0x24>)
 8009984:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8009986:	4805      	ldr	r0, [pc, #20]	; (800999c <MX_FMAC_Init+0x20>)
 8009988:	f7f8 fa9a 	bl	8001ec0 <HAL_FMAC_Init>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8009992:	f000 fc77 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8009996:	bf00      	nop
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20001d50 	.word	0x20001d50
 80099a0:	40021400 	.word	0x40021400

080099a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80099a8:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099aa:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <MX_I2C1_Init+0x78>)
 80099ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 80099ae:	4b1a      	ldr	r3, [pc, #104]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099b0:	4a1b      	ldr	r2, [pc, #108]	; (8009a20 <MX_I2C1_Init+0x7c>)
 80099b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80099b4:	4b18      	ldr	r3, [pc, #96]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80099ba:	4b17      	ldr	r3, [pc, #92]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099bc:	2201      	movs	r2, #1
 80099be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80099c0:	4b15      	ldr	r3, [pc, #84]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80099cc:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80099d2:	4b11      	ldr	r3, [pc, #68]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80099d8:	4b0f      	ldr	r3, [pc, #60]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099da:	2200      	movs	r2, #0
 80099dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80099de:	480e      	ldr	r0, [pc, #56]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099e0:	f7f8 fcc5 	bl	800236e <HAL_I2C_Init>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80099ea:	f000 fc4b 	bl	800a284 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80099ee:	2100      	movs	r1, #0
 80099f0:	4809      	ldr	r0, [pc, #36]	; (8009a18 <MX_I2C1_Init+0x74>)
 80099f2:	f7f8 fd4b 	bl	800248c <HAL_I2CEx_ConfigAnalogFilter>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80099fc:	f000 fc42 	bl	800a284 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009a00:	2100      	movs	r1, #0
 8009a02:	4805      	ldr	r0, [pc, #20]	; (8009a18 <MX_I2C1_Init+0x74>)
 8009a04:	f7f8 fd8d 	bl	8002522 <HAL_I2CEx_ConfigDigitalFilter>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009a0e:	f000 fc39 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009a12:	bf00      	nop
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20001ad0 	.word	0x20001ad0
 8009a1c:	40005400 	.word	0x40005400
 8009a20:	10802d9b 	.word	0x10802d9b

08009a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b09c      	sub	sp, #112	; 0x70
 8009a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	605a      	str	r2, [r3, #4]
 8009a34:	609a      	str	r2, [r3, #8]
 8009a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	605a      	str	r2, [r3, #4]
 8009a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	605a      	str	r2, [r3, #4]
 8009a4e:	609a      	str	r2, [r3, #8]
 8009a50:	60da      	str	r2, [r3, #12]
 8009a52:	611a      	str	r2, [r3, #16]
 8009a54:	615a      	str	r2, [r3, #20]
 8009a56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009a58:	1d3b      	adds	r3, r7, #4
 8009a5a:	2234      	movs	r2, #52	; 0x34
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f001 f965 	bl	800ad2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009a64:	4b45      	ldr	r3, [pc, #276]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a66:	4a46      	ldr	r2, [pc, #280]	; (8009b80 <MX_TIM1_Init+0x15c>)
 8009a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009a6a:	4b44      	ldr	r3, [pc, #272]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a70:	4b42      	ldr	r3, [pc, #264]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 211;
 8009a76:	4b41      	ldr	r3, [pc, #260]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a78:	22d3      	movs	r2, #211	; 0xd3
 8009a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a7c:	4b3f      	ldr	r3, [pc, #252]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009a82:	4b3e      	ldr	r3, [pc, #248]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a88:	4b3c      	ldr	r3, [pc, #240]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009a8e:	483b      	ldr	r0, [pc, #236]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009a90:	f7f9 fd8e 	bl	80035b0 <HAL_TIM_Base_Init>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8009a9a:	f000 fbf3 	bl	800a284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aa2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009aa4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4834      	ldr	r0, [pc, #208]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009aac:	f7fa f9f0 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009ab6:	f000 fbe5 	bl	800a284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009aba:	4830      	ldr	r0, [pc, #192]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009abc:	f7f9 fdf8 	bl	80036b0 <HAL_TIM_PWM_Init>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009ac6:	f000 fbdd 	bl	800a284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009aca:	2300      	movs	r3, #0
 8009acc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009ad6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009ada:	4619      	mov	r1, r3
 8009adc:	4827      	ldr	r0, [pc, #156]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009ade:	f7fa ffbb 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8009ae8:	f000 fbcc 	bl	800a284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009aec:	2360      	movs	r3, #96	; 0x60
 8009aee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009af4:	2300      	movs	r3, #0
 8009af6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009af8:	2300      	movs	r3, #0
 8009afa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009afc:	2300      	movs	r3, #0
 8009afe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009b00:	2300      	movs	r3, #0
 8009b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009b04:	2300      	movs	r3, #0
 8009b06:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4619      	mov	r1, r3
 8009b10:	481a      	ldr	r0, [pc, #104]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009b12:	f7fa f8a5 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8009b1c:	f000 fbb2 	bl	800a284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009b50:	2300      	movs	r3, #0
 8009b52:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009b58:	1d3b      	adds	r3, r7, #4
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4807      	ldr	r0, [pc, #28]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009b5e:	f7fa ffd9 	bl	8004b14 <HAL_TIMEx_ConfigBreakDeadTime>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8009b68:	f000 fb8c 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009b6c:	4803      	ldr	r0, [pc, #12]	; (8009b7c <MX_TIM1_Init+0x158>)
 8009b6e:	f000 fe73 	bl	800a858 <HAL_TIM_MspPostInit>

}
 8009b72:	bf00      	nop
 8009b74:	3770      	adds	r7, #112	; 0x70
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20001dec 	.word	0x20001dec
 8009b80:	40012c00 	.word	0x40012c00

08009b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b8a:	f107 0310 	add.w	r3, r7, #16
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	605a      	str	r2, [r3, #4]
 8009b94:	609a      	str	r2, [r3, #8]
 8009b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b98:	1d3b      	adds	r3, r7, #4
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	605a      	str	r2, [r3, #4]
 8009ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009ba2:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009ba4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009baa:	4b1b      	ldr	r3, [pc, #108]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bb0:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8009bb6:	4b18      	ldr	r3, [pc, #96]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bbc:	4b16      	ldr	r3, [pc, #88]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009bc8:	4813      	ldr	r0, [pc, #76]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009bca:	f7f9 fcf1 	bl	80035b0 <HAL_TIM_Base_Init>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8009bd4:	f000 fb56 	bl	800a284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009bde:	f107 0310 	add.w	r3, r7, #16
 8009be2:	4619      	mov	r1, r3
 8009be4:	480c      	ldr	r0, [pc, #48]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009be6:	f7fa f953 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8009bf0:	f000 fb48 	bl	800a284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009bfc:	1d3b      	adds	r3, r7, #4
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4805      	ldr	r0, [pc, #20]	; (8009c18 <MX_TIM2_Init+0x94>)
 8009c02:	f7fa ff29 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8009c0c:	f000 fb3a 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009c10:	bf00      	nop
 8009c12:	3720      	adds	r7, #32
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20001eec 	.word	0x20001eec

08009c1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c22:	f107 0310 	add.w	r3, r7, #16
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	605a      	str	r2, [r3, #4]
 8009c2c:	609a      	str	r2, [r3, #8]
 8009c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c30:	1d3b      	adds	r3, r7, #4
 8009c32:	2200      	movs	r2, #0
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009c3a:	4b1d      	ldr	r3, [pc, #116]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c3c:	4a1d      	ldr	r2, [pc, #116]	; (8009cb4 <MX_TIM4_Init+0x98>)
 8009c3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009c40:	4b1b      	ldr	r3, [pc, #108]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c46:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8009c4c:	4b18      	ldr	r3, [pc, #96]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c52:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009c5e:	4814      	ldr	r0, [pc, #80]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c60:	f7f9 fca6 	bl	80035b0 <HAL_TIM_Base_Init>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8009c6a:	f000 fb0b 	bl	800a284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	4619      	mov	r1, r3
 8009c7a:	480d      	ldr	r0, [pc, #52]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c7c:	f7fa f908 	bl	8003e90 <HAL_TIM_ConfigClockSource>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8009c86:	f000 fafd 	bl	800a284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009c92:	1d3b      	adds	r3, r7, #4
 8009c94:	4619      	mov	r1, r3
 8009c96:	4806      	ldr	r0, [pc, #24]	; (8009cb0 <MX_TIM4_Init+0x94>)
 8009c98:	f7fa fede 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8009ca2:	f000 faef 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009ca6:	bf00      	nop
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20001a24 	.word	0x20001a24
 8009cb4:	40000800 	.word	0x40000800

08009cb8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b098      	sub	sp, #96	; 0x60
 8009cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009cbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	605a      	str	r2, [r3, #4]
 8009cc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009cca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	605a      	str	r2, [r3, #4]
 8009cd4:	609a      	str	r2, [r3, #8]
 8009cd6:	60da      	str	r2, [r3, #12]
 8009cd8:	611a      	str	r2, [r3, #16]
 8009cda:	615a      	str	r2, [r3, #20]
 8009cdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009cde:	1d3b      	adds	r3, r7, #4
 8009ce0:	2234      	movs	r2, #52	; 0x34
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f001 f822 	bl	800ad2e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009cea:	4b3b      	ldr	r3, [pc, #236]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009cec:	4a3b      	ldr	r2, [pc, #236]	; (8009ddc <MX_TIM8_Init+0x124>)
 8009cee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 34;
 8009cf0:	4b39      	ldr	r3, [pc, #228]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009cf2:	2222      	movs	r2, #34	; 0x22
 8009cf4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cf6:	4b38      	ldr	r3, [pc, #224]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 14585;
 8009cfc:	4b36      	ldr	r3, [pc, #216]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009cfe:	f643 02f9 	movw	r2, #14585	; 0x38f9
 8009d02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d04:	4b34      	ldr	r3, [pc, #208]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009d0a:	4b33      	ldr	r3, [pc, #204]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d10:	4b31      	ldr	r3, [pc, #196]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009d16:	4830      	ldr	r0, [pc, #192]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009d18:	f7f9 fcca 	bl	80036b0 <HAL_TIM_PWM_Init>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8009d22:	f000 faaf 	bl	800a284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d26:	2300      	movs	r3, #0
 8009d28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009d32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009d36:	4619      	mov	r1, r3
 8009d38:	4827      	ldr	r0, [pc, #156]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009d3a:	f7fa fe8d 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8009d44:	f000 fa9e 	bl	800a284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d48:	2360      	movs	r3, #96	; 0x60
 8009d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d50:	2300      	movs	r3, #0
 8009d52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009d54:	2300      	movs	r3, #0
 8009d56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009d60:	2300      	movs	r3, #0
 8009d62:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	481a      	ldr	r0, [pc, #104]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009d6e:	f7f9 ff77 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8009d78:	f000 fa84 	bl	800a284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009d84:	2300      	movs	r3, #0
 8009d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009dac:	2300      	movs	r3, #0
 8009dae:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009db0:	2300      	movs	r3, #0
 8009db2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009db4:	1d3b      	adds	r3, r7, #4
 8009db6:	4619      	mov	r1, r3
 8009db8:	4807      	ldr	r0, [pc, #28]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009dba:	f7fa feab 	bl	8004b14 <HAL_TIMEx_ConfigBreakDeadTime>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8009dc4:	f000 fa5e 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009dc8:	4803      	ldr	r0, [pc, #12]	; (8009dd8 <MX_TIM8_Init+0x120>)
 8009dca:	f000 fd45 	bl	800a858 <HAL_TIM_MspPostInit>

}
 8009dce:	bf00      	nop
 8009dd0:	3760      	adds	r7, #96	; 0x60
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200019e4 	.word	0x200019e4
 8009ddc:	40013400 	.word	0x40013400

08009de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009de4:	4b26      	ldr	r3, [pc, #152]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009de6:	4a27      	ldr	r2, [pc, #156]	; (8009e84 <MX_USART1_UART_Init+0xa4>)
 8009de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8009dea:	4b25      	ldr	r3, [pc, #148]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009dec:	4a26      	ldr	r2, [pc, #152]	; (8009e88 <MX_USART1_UART_Init+0xa8>)
 8009dee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8009df0:	4b23      	ldr	r3, [pc, #140]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8009df8:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009dfe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8009e00:	4b1f      	ldr	r3, [pc, #124]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8009e08:	4b1d      	ldr	r3, [pc, #116]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e0e:	4b1c      	ldr	r3, [pc, #112]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e14:	4b1a      	ldr	r3, [pc, #104]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8009e1a:	4b19      	ldr	r3, [pc, #100]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e20:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009e22:	4b17      	ldr	r3, [pc, #92]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DATAINVERT_INIT;
 8009e28:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.DataInvert = UART_ADVFEATURE_DATAINV_ENABLE;
 8009e2e:	4b14      	ldr	r3, [pc, #80]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009e34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8009e36:	4812      	ldr	r0, [pc, #72]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e38:	f7fa ffa2 	bl	8004d80 <HAL_HalfDuplex_Init>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8009e42:	f000 fa1f 	bl	800a284 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e46:	2100      	movs	r1, #0
 8009e48:	480d      	ldr	r0, [pc, #52]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e4a:	f7fc fcac 	bl	80067a6 <HAL_UARTEx_SetTxFifoThreshold>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8009e54:	f000 fa16 	bl	800a284 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4809      	ldr	r0, [pc, #36]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e5c:	f7fc fce1 	bl	8006822 <HAL_UARTEx_SetRxFifoThreshold>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8009e66:	f000 fa0d 	bl	800a284 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009e6a:	4805      	ldr	r0, [pc, #20]	; (8009e80 <MX_USART1_UART_Init+0xa0>)
 8009e6c:	f7fc fc62 	bl	8006734 <HAL_UARTEx_DisableFifoMode>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8009e76:	f000 fa05 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009e7a:	bf00      	nop
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20001cc4 	.word	0x20001cc4
 8009e84:	40013800 	.word	0x40013800
 8009e88:	000186a0 	.word	0x000186a0

08009e8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009e90:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009e92:	4a24      	ldr	r2, [pc, #144]	; (8009f24 <MX_USART2_UART_Init+0x98>)
 8009e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009e96:	4b22      	ldr	r3, [pc, #136]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009e9e:	4b20      	ldr	r3, [pc, #128]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009ea4:	4b1e      	ldr	r3, [pc, #120]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009eaa:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009eb0:	4b1b      	ldr	r3, [pc, #108]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009eb2:	220c      	movs	r2, #12
 8009eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ebc:	4b18      	ldr	r3, [pc, #96]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8009ec2:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ec8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009eca:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009ed0:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009ed6:	4812      	ldr	r0, [pc, #72]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009ed8:	f7fa ff02 	bl	8004ce0 <HAL_UART_Init>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8009ee2:	f000 f9cf 	bl	800a284 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	480d      	ldr	r0, [pc, #52]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009eea:	f7fc fc5c 	bl	80067a6 <HAL_UARTEx_SetTxFifoThreshold>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8009ef4:	f000 f9c6 	bl	800a284 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4809      	ldr	r0, [pc, #36]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009efc:	f7fc fc91 	bl	8006822 <HAL_UARTEx_SetRxFifoThreshold>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8009f06:	f000 f9bd 	bl	800a284 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8009f0a:	4805      	ldr	r0, [pc, #20]	; (8009f20 <MX_USART2_UART_Init+0x94>)
 8009f0c:	f7fc fbd7 	bl	80066be <HAL_UARTEx_EnableFifoMode>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8009f16:	f000 f9b5 	bl	800a284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009f1a:	bf00      	nop
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20001f2c 	.word	0x20001f2c
 8009f24:	40004400 	.word	0x40004400

08009f28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009f2e:	4b34      	ldr	r3, [pc, #208]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f32:	4a33      	ldr	r2, [pc, #204]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f34:	f043 0304 	orr.w	r3, r3, #4
 8009f38:	6493      	str	r3, [r2, #72]	; 0x48
 8009f3a:	4b31      	ldr	r3, [pc, #196]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3e:	f003 0304 	and.w	r3, r3, #4
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009f46:	4b2e      	ldr	r3, [pc, #184]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f4a:	4a2d      	ldr	r2, [pc, #180]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f4c:	f043 0301 	orr.w	r3, r3, #1
 8009f50:	6493      	str	r3, [r2, #72]	; 0x48
 8009f52:	4b2b      	ldr	r3, [pc, #172]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	60bb      	str	r3, [r7, #8]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009f5e:	4b28      	ldr	r3, [pc, #160]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f62:	4a27      	ldr	r2, [pc, #156]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f64:	f043 0302 	orr.w	r3, r3, #2
 8009f68:	6493      	str	r3, [r2, #72]	; 0x48
 8009f6a:	4b25      	ldr	r3, [pc, #148]	; (800a000 <MX_DMA_Init+0xd8>)
 8009f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f6e:	f003 0302 	and.w	r3, r3, #2
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8009f76:	2200      	movs	r2, #0
 8009f78:	2105      	movs	r1, #5
 8009f7a:	200b      	movs	r0, #11
 8009f7c:	f7f7 fa6c 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009f80:	200b      	movs	r0, #11
 8009f82:	f7f7 fa83 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8009f86:	2200      	movs	r2, #0
 8009f88:	2105      	movs	r1, #5
 8009f8a:	200c      	movs	r0, #12
 8009f8c:	f7f7 fa64 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009f90:	200c      	movs	r0, #12
 8009f92:	f7f7 fa7b 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8009f96:	2200      	movs	r2, #0
 8009f98:	2105      	movs	r1, #5
 8009f9a:	200d      	movs	r0, #13
 8009f9c:	f7f7 fa5c 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009fa0:	200d      	movs	r0, #13
 8009fa2:	f7f7 fa73 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	2105      	movs	r1, #5
 8009faa:	200e      	movs	r0, #14
 8009fac:	f7f7 fa54 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8009fb0:	200e      	movs	r0, #14
 8009fb2:	f7f7 fa6b 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2105      	movs	r1, #5
 8009fba:	200f      	movs	r0, #15
 8009fbc:	f7f7 fa4c 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8009fc0:	200f      	movs	r0, #15
 8009fc2:	f7f7 fa63 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2105      	movs	r1, #5
 8009fca:	2010      	movs	r0, #16
 8009fcc:	f7f7 fa44 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009fd0:	2010      	movs	r0, #16
 8009fd2:	f7f7 fa5b 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2105      	movs	r1, #5
 8009fda:	2038      	movs	r0, #56	; 0x38
 8009fdc:	f7f7 fa3c 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8009fe0:	2038      	movs	r0, #56	; 0x38
 8009fe2:	f7f7 fa53 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2105      	movs	r1, #5
 8009fea:	203a      	movs	r0, #58	; 0x3a
 8009fec:	f7f7 fa34 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8009ff0:	203a      	movs	r0, #58	; 0x3a
 8009ff2:	f7f7 fa4b 	bl	800148c <HAL_NVIC_EnableIRQ>

}
 8009ff6:	bf00      	nop
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	40021000 	.word	0x40021000

0800a004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08a      	sub	sp, #40	; 0x28
 800a008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a00a:	f107 0314 	add.w	r3, r7, #20
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	605a      	str	r2, [r3, #4]
 800a014:	609a      	str	r2, [r3, #8]
 800a016:	60da      	str	r2, [r3, #12]
 800a018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a01a:	4b3e      	ldr	r3, [pc, #248]	; (800a114 <MX_GPIO_Init+0x110>)
 800a01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a01e:	4a3d      	ldr	r2, [pc, #244]	; (800a114 <MX_GPIO_Init+0x110>)
 800a020:	f043 0320 	orr.w	r3, r3, #32
 800a024:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a026:	4b3b      	ldr	r3, [pc, #236]	; (800a114 <MX_GPIO_Init+0x110>)
 800a028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a032:	4b38      	ldr	r3, [pc, #224]	; (800a114 <MX_GPIO_Init+0x110>)
 800a034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a036:	4a37      	ldr	r2, [pc, #220]	; (800a114 <MX_GPIO_Init+0x110>)
 800a038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a03c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a03e:	4b35      	ldr	r3, [pc, #212]	; (800a114 <MX_GPIO_Init+0x110>)
 800a040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a04a:	4b32      	ldr	r3, [pc, #200]	; (800a114 <MX_GPIO_Init+0x110>)
 800a04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a04e:	4a31      	ldr	r2, [pc, #196]	; (800a114 <MX_GPIO_Init+0x110>)
 800a050:	f043 0301 	orr.w	r3, r3, #1
 800a054:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a056:	4b2f      	ldr	r3, [pc, #188]	; (800a114 <MX_GPIO_Init+0x110>)
 800a058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	60bb      	str	r3, [r7, #8]
 800a060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a062:	4b2c      	ldr	r3, [pc, #176]	; (800a114 <MX_GPIO_Init+0x110>)
 800a064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a066:	4a2b      	ldr	r2, [pc, #172]	; (800a114 <MX_GPIO_Init+0x110>)
 800a068:	f043 0302 	orr.w	r3, r3, #2
 800a06c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a06e:	4b29      	ldr	r3, [pc, #164]	; (800a114 <MX_GPIO_Init+0x110>)
 800a070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	607b      	str	r3, [r7, #4]
 800a078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800a07a:	2200      	movs	r2, #0
 800a07c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a080:	4825      	ldr	r0, [pc, #148]	; (800a118 <MX_GPIO_Init+0x114>)
 800a082:	f7f8 f943 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a086:	2303      	movs	r3, #3
 800a088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a08a:	2303      	movs	r3, #3
 800a08c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a08e:	2300      	movs	r3, #0
 800a090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a092:	f107 0314 	add.w	r3, r7, #20
 800a096:	4619      	mov	r1, r3
 800a098:	4820      	ldr	r0, [pc, #128]	; (800a11c <MX_GPIO_Init+0x118>)
 800a09a:	f7f7 ffb5 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a0ac:	f107 0314 	add.w	r3, r7, #20
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	481b      	ldr	r0, [pc, #108]	; (800a120 <MX_GPIO_Init+0x11c>)
 800a0b4:	f7f7 ffa8 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7 
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7 
 800a0b8:	f240 43c3 	movw	r3, #1219	; 0x4c3
 800a0bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0c6:	f107 0314 	add.w	r3, r7, #20
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0d0:	f7f7 ff9a 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800a0d4:	2339      	movs	r3, #57	; 0x39
 800a0d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0e0:	f107 0314 	add.w	r3, r7, #20
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	480c      	ldr	r0, [pc, #48]	; (800a118 <MX_GPIO_Init+0x114>)
 800a0e8:	f7f7 ff8e 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800a0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800a0fe:	f107 0314 	add.w	r3, r7, #20
 800a102:	4619      	mov	r1, r3
 800a104:	4804      	ldr	r0, [pc, #16]	; (800a118 <MX_GPIO_Init+0x114>)
 800a106:	f7f7 ff7f 	bl	8002008 <HAL_GPIO_Init>

}
 800a10a:	bf00      	nop
 800a10c:	3728      	adds	r7, #40	; 0x28
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	40021000 	.word	0x40021000
 800a118:	48000400 	.word	0x48000400
 800a11c:	48001400 	.word	0x48001400
 800a120:	48001800 	.word	0x48001800

0800a124 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
    
    

  /* USER CODE BEGIN 5 */

	char hello[] = "Hi there\n\r";
 800a12c:	4a12      	ldr	r2, [pc, #72]	; (800a178 <StartDefaultTask+0x54>)
 800a12e:	f107 030c 	add.w	r3, r7, #12
 800a132:	ca07      	ldmia	r2, {r0, r1, r2}
 800a134:	c303      	stmia	r3!, {r0, r1}
 800a136:	801a      	strh	r2, [r3, #0]
 800a138:	3302      	adds	r3, #2
 800a13a:	0c12      	lsrs	r2, r2, #16
 800a13c:	701a      	strb	r2, [r3, #0]

	//Servo position is given by 14585 / Duty_Cycle
	//30% - 60% duty cycle
	//4375 - 6563 - 8751
	extern uint16_t servo_pos;
	servo_pos = 6563;
 800a13e:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <StartDefaultTask+0x58>)
 800a140:	f641 12a3 	movw	r2, #6563	; 0x19a3
 800a144:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim8);
 800a146:	480e      	ldr	r0, [pc, #56]	; (800a180 <StartDefaultTask+0x5c>)
 800a148:	f7f9 fa5e 	bl	8003608 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t*) &servo_pos, 1);

  /* Infinite loop */
  while(1){
	  HAL_GPIO_TogglePin(GPIOB, USR_LED_Pin);
 800a14c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a150:	480c      	ldr	r0, [pc, #48]	; (800a184 <StartDefaultTask+0x60>)
 800a152:	f7f8 f8f3 	bl	800233c <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit_DMA(&huart2,(uint8_t*) &hello, 10);
 800a156:	f107 030c 	add.w	r3, r7, #12
 800a15a:	220a      	movs	r2, #10
 800a15c:	4619      	mov	r1, r3
 800a15e:	480a      	ldr	r0, [pc, #40]	; (800a188 <StartDefaultTask+0x64>)
 800a160:	f7fa fe66 	bl	8004e30 <HAL_UART_Transmit_DMA>
	  HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t*) &servo_pos, 1);
 800a164:	2301      	movs	r3, #1
 800a166:	4a05      	ldr	r2, [pc, #20]	; (800a17c <StartDefaultTask+0x58>)
 800a168:	2100      	movs	r1, #0
 800a16a:	4805      	ldr	r0, [pc, #20]	; (800a180 <StartDefaultTask+0x5c>)
 800a16c:	f7f9 facc 	bl	8003708 <HAL_TIM_PWM_Start_DMA>

	  osDelay(50);
 800a170:	2032      	movs	r0, #50	; 0x32
 800a172:	f7fc fd0f 	bl	8006b94 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, USR_LED_Pin);
 800a176:	e7e9      	b.n	800a14c <StartDefaultTask+0x28>
 800a178:	0800ada8 	.word	0x0800ada8
 800a17c:	2000000c 	.word	0x2000000c
 800a180:	200019e4 	.word	0x200019e4
 800a184:	48000400 	.word	0x48000400
 800a188:	20001f2c 	.word	0x20001f2c

0800a18c <Read_IMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_IMU */
void Read_IMU(void *argument)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_IMU */
	extern uint16_t servo_pos;
  /* Infinite loop */
  for(;;)
  {
	  for(servo_pos = 4375; servo_pos == 6563; servo_pos++)
 800a194:	4b2c      	ldr	r3, [pc, #176]	; (800a248 <Read_IMU+0xbc>)
 800a196:	f241 1217 	movw	r2, #4375	; 0x1117
 800a19a:	801a      	strh	r2, [r3, #0]
 800a19c:	e008      	b.n	800a1b0 <Read_IMU+0x24>
		  osDelay(200);
 800a19e:	20c8      	movs	r0, #200	; 0xc8
 800a1a0:	f7fc fcf8 	bl	8006b94 <osDelay>
	  for(servo_pos = 4375; servo_pos == 6563; servo_pos++)
 800a1a4:	4b28      	ldr	r3, [pc, #160]	; (800a248 <Read_IMU+0xbc>)
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	4b26      	ldr	r3, [pc, #152]	; (800a248 <Read_IMU+0xbc>)
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	4b25      	ldr	r3, [pc, #148]	; (800a248 <Read_IMU+0xbc>)
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	f641 12a3 	movw	r2, #6563	; 0x19a3
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d0f0      	beq.n	800a19e <Read_IMU+0x12>
	  osDelay(2000);
 800a1bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1c0:	f7fc fce8 	bl	8006b94 <osDelay>
	  for(servo_pos = 6563; servo_pos == 8751; servo_pos++)
 800a1c4:	4b20      	ldr	r3, [pc, #128]	; (800a248 <Read_IMU+0xbc>)
 800a1c6:	f641 12a3 	movw	r2, #6563	; 0x19a3
 800a1ca:	801a      	strh	r2, [r3, #0]
 800a1cc:	e008      	b.n	800a1e0 <Read_IMU+0x54>
		  osDelay(200);
 800a1ce:	20c8      	movs	r0, #200	; 0xc8
 800a1d0:	f7fc fce0 	bl	8006b94 <osDelay>
	  for(servo_pos = 6563; servo_pos == 8751; servo_pos++)
 800a1d4:	4b1c      	ldr	r3, [pc, #112]	; (800a248 <Read_IMU+0xbc>)
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	4b1a      	ldr	r3, [pc, #104]	; (800a248 <Read_IMU+0xbc>)
 800a1de:	801a      	strh	r2, [r3, #0]
 800a1e0:	4b19      	ldr	r3, [pc, #100]	; (800a248 <Read_IMU+0xbc>)
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	f242 222f 	movw	r2, #8751	; 0x222f
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d0f0      	beq.n	800a1ce <Read_IMU+0x42>

	  for(servo_pos = 8751; servo_pos == 6563; servo_pos--)
 800a1ec:	4b16      	ldr	r3, [pc, #88]	; (800a248 <Read_IMU+0xbc>)
 800a1ee:	f242 222f 	movw	r2, #8751	; 0x222f
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e008      	b.n	800a208 <Read_IMU+0x7c>
		  osDelay(200);
 800a1f6:	20c8      	movs	r0, #200	; 0xc8
 800a1f8:	f7fc fccc 	bl	8006b94 <osDelay>
	  for(servo_pos = 8751; servo_pos == 6563; servo_pos--)
 800a1fc:	4b12      	ldr	r3, [pc, #72]	; (800a248 <Read_IMU+0xbc>)
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	3b01      	subs	r3, #1
 800a202:	b29a      	uxth	r2, r3
 800a204:	4b10      	ldr	r3, [pc, #64]	; (800a248 <Read_IMU+0xbc>)
 800a206:	801a      	strh	r2, [r3, #0]
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <Read_IMU+0xbc>)
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	f641 12a3 	movw	r2, #6563	; 0x19a3
 800a210:	4293      	cmp	r3, r2
 800a212:	d0f0      	beq.n	800a1f6 <Read_IMU+0x6a>
	  osDelay(2000);
 800a214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a218:	f7fc fcbc 	bl	8006b94 <osDelay>
	  for(servo_pos = 6563; servo_pos == 4375; servo_pos--)
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <Read_IMU+0xbc>)
 800a21e:	f641 12a3 	movw	r2, #6563	; 0x19a3
 800a222:	801a      	strh	r2, [r3, #0]
 800a224:	e008      	b.n	800a238 <Read_IMU+0xac>
		  osDelay(200);
 800a226:	20c8      	movs	r0, #200	; 0xc8
 800a228:	f7fc fcb4 	bl	8006b94 <osDelay>
	  for(servo_pos = 6563; servo_pos == 4375; servo_pos--)
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <Read_IMU+0xbc>)
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	3b01      	subs	r3, #1
 800a232:	b29a      	uxth	r2, r3
 800a234:	4b04      	ldr	r3, [pc, #16]	; (800a248 <Read_IMU+0xbc>)
 800a236:	801a      	strh	r2, [r3, #0]
 800a238:	4b03      	ldr	r3, [pc, #12]	; (800a248 <Read_IMU+0xbc>)
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	f241 1217 	movw	r2, #4375	; 0x1117
 800a240:	4293      	cmp	r3, r2
 800a242:	d0f0      	beq.n	800a226 <Read_IMU+0x9a>
	  for(servo_pos = 4375; servo_pos == 6563; servo_pos++)
 800a244:	e7a6      	b.n	800a194 <Read_IMU+0x8>
 800a246:	bf00      	nop
 800a248:	2000000c 	.word	0x2000000c

0800a24c <Update_ESC>:
  /* USER CODE END Read_IMU */
}

/* Update_ESC function */
void Update_ESC(void *argument)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_ESC */
  
  /* USER CODE END Update_ESC */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a04      	ldr	r2, [pc, #16]	; (800a280 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d101      	bne.n	800a276 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a272:	f7f6 f96d 	bl	8000550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	40014800 	.word	0x40014800

0800a284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a288:	bf00      	nop
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
	...

0800a294 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800a294:	b480      	push	{r7}
 800a296:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a298:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	4a04      	ldr	r2, [pc, #16]	; (800a2b0 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800a29e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2a2:	6093      	str	r3, [r2, #8]
}
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	40007000 	.word	0x40007000

0800a2b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2ba:	4b12      	ldr	r3, [pc, #72]	; (800a304 <HAL_MspInit+0x50>)
 800a2bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2be:	4a11      	ldr	r2, [pc, #68]	; (800a304 <HAL_MspInit+0x50>)
 800a2c0:	f043 0301 	orr.w	r3, r3, #1
 800a2c4:	6613      	str	r3, [r2, #96]	; 0x60
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <HAL_MspInit+0x50>)
 800a2c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a2d2:	4b0c      	ldr	r3, [pc, #48]	; (800a304 <HAL_MspInit+0x50>)
 800a2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d6:	4a0b      	ldr	r2, [pc, #44]	; (800a304 <HAL_MspInit+0x50>)
 800a2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2dc:	6593      	str	r3, [r2, #88]	; 0x58
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <HAL_MspInit+0x50>)
 800a2e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	210f      	movs	r1, #15
 800a2ee:	f06f 0001 	mvn.w	r0, #1
 800a2f2:	f7f7 f8b1 	bl	8001458 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800a2f6:	f7ff ffcd 	bl	800a294 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2fa:	bf00      	nop
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	40021000 	.word	0x40021000

0800a308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a310:	f107 0314 	add.w	r3, r7, #20
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	605a      	str	r2, [r3, #4]
 800a31a:	609a      	str	r2, [r3, #8]
 800a31c:	60da      	str	r2, [r3, #12]
 800a31e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a2b      	ldr	r2, [pc, #172]	; (800a3d4 <HAL_ADC_MspInit+0xcc>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d14f      	bne.n	800a3ca <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a32a:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <HAL_ADC_MspInit+0xd0>)
 800a32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a32e:	4a2a      	ldr	r2, [pc, #168]	; (800a3d8 <HAL_ADC_MspInit+0xd0>)
 800a330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a334:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a336:	4b28      	ldr	r3, [pc, #160]	; (800a3d8 <HAL_ADC_MspInit+0xd0>)
 800a338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a342:	4b25      	ldr	r3, [pc, #148]	; (800a3d8 <HAL_ADC_MspInit+0xd0>)
 800a344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a346:	4a24      	ldr	r2, [pc, #144]	; (800a3d8 <HAL_ADC_MspInit+0xd0>)
 800a348:	f043 0301 	orr.w	r3, r3, #1
 800a34c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a34e:	4b22      	ldr	r3, [pc, #136]	; (800a3d8 <HAL_ADC_MspInit+0xd0>)
 800a350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN17
    PA5     ------> ADC2_IN13 
    */
    GPIO_InitStruct.Pin = VBATT_Pin|CURRENT_Pin;
 800a35a:	2330      	movs	r3, #48	; 0x30
 800a35c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a35e:	2303      	movs	r3, #3
 800a360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a366:	f107 0314 	add.w	r3, r7, #20
 800a36a:	4619      	mov	r1, r3
 800a36c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a370:	f7f7 fe4a 	bl	8002008 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel5;
 800a374:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a376:	4a1a      	ldr	r2, [pc, #104]	; (800a3e0 <HAL_ADC_MspInit+0xd8>)
 800a378:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800a37a:	4b18      	ldr	r3, [pc, #96]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a37c:	2224      	movs	r2, #36	; 0x24
 800a37e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a380:	4b16      	ldr	r3, [pc, #88]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a382:	2200      	movs	r2, #0
 800a384:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a386:	4b15      	ldr	r3, [pc, #84]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a388:	2200      	movs	r2, #0
 800a38a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800a38c:	4b13      	ldr	r3, [pc, #76]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a38e:	2280      	movs	r2, #128	; 0x80
 800a390:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a392:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a394:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a398:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a39a:	4b10      	ldr	r3, [pc, #64]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a39c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3a0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800a3ae:	480b      	ldr	r0, [pc, #44]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a3b0:	f7f7 f964 	bl	800167c <HAL_DMA_Init>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800a3ba:	f7ff ff63 	bl	800a284 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a06      	ldr	r2, [pc, #24]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a3c2:	655a      	str	r2, [r3, #84]	; 0x54
 800a3c4:	4a05      	ldr	r2, [pc, #20]	; (800a3dc <HAL_ADC_MspInit+0xd4>)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800a3ca:	bf00      	nop
 800a3cc:	3728      	adds	r7, #40	; 0x28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	50000100 	.word	0x50000100
 800a3d8:	40021000 	.word	0x40021000
 800a3dc:	20001fb8 	.word	0x20001fb8
 800a3e0:	40020058 	.word	0x40020058

0800a3e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <HAL_CRC_MspInit+0x38>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d10b      	bne.n	800a40e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <HAL_CRC_MspInit+0x3c>)
 800a3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fa:	4a09      	ldr	r2, [pc, #36]	; (800a420 <HAL_CRC_MspInit+0x3c>)
 800a3fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a400:	6493      	str	r3, [r2, #72]	; 0x48
 800a402:	4b07      	ldr	r3, [pc, #28]	; (800a420 <HAL_CRC_MspInit+0x3c>)
 800a404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800a40e:	bf00      	nop
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	40023000 	.word	0x40023000
 800a420:	40021000 	.word	0x40021000

0800a424 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08a      	sub	sp, #40	; 0x28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a42c:	f107 0314 	add.w	r3, r7, #20
 800a430:	2200      	movs	r2, #0
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	609a      	str	r2, [r3, #8]
 800a438:	60da      	str	r2, [r3, #12]
 800a43a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a18      	ldr	r2, [pc, #96]	; (800a4a4 <HAL_FDCAN_MspInit+0x80>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d129      	bne.n	800a49a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800a446:	4b18      	ldr	r3, [pc, #96]	; (800a4a8 <HAL_FDCAN_MspInit+0x84>)
 800a448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44a:	4a17      	ldr	r2, [pc, #92]	; (800a4a8 <HAL_FDCAN_MspInit+0x84>)
 800a44c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a450:	6593      	str	r3, [r2, #88]	; 0x58
 800a452:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <HAL_FDCAN_MspInit+0x84>)
 800a454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a45e:	4b12      	ldr	r3, [pc, #72]	; (800a4a8 <HAL_FDCAN_MspInit+0x84>)
 800a460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a462:	4a11      	ldr	r2, [pc, #68]	; (800a4a8 <HAL_FDCAN_MspInit+0x84>)
 800a464:	f043 0301 	orr.w	r3, r3, #1
 800a468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a46a:	4b0f      	ldr	r3, [pc, #60]	; (800a4a8 <HAL_FDCAN_MspInit+0x84>)
 800a46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a476:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a47a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a47c:	2302      	movs	r3, #2
 800a47e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a480:	2300      	movs	r3, #0
 800a482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a484:	2300      	movs	r3, #0
 800a486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800a488:	2309      	movs	r3, #9
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a48c:	f107 0314 	add.w	r3, r7, #20
 800a490:	4619      	mov	r1, r3
 800a492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a496:	f7f7 fdb7 	bl	8002008 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800a49a:	bf00      	nop
 800a49c:	3728      	adds	r7, #40	; 0x28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	40006400 	.word	0x40006400
 800a4a8:	40021000 	.word	0x40021000

0800a4ac <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a35      	ldr	r2, [pc, #212]	; (800a590 <HAL_FMAC_MspInit+0xe4>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d163      	bne.n	800a586 <HAL_FMAC_MspInit+0xda>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800a4be:	4b35      	ldr	r3, [pc, #212]	; (800a594 <HAL_FMAC_MspInit+0xe8>)
 800a4c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c2:	4a34      	ldr	r2, [pc, #208]	; (800a594 <HAL_FMAC_MspInit+0xe8>)
 800a4c4:	f043 0310 	orr.w	r3, r3, #16
 800a4c8:	6493      	str	r3, [r2, #72]	; 0x48
 800a4ca:	4b32      	ldr	r3, [pc, #200]	; (800a594 <HAL_FMAC_MspInit+0xe8>)
 800a4cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
  
    /* FMAC DMA Init */
    /* FMAC_WRITE Init */
    hdma_fmac_write.Instance = DMA1_Channel6;
 800a4d6:	4b30      	ldr	r3, [pc, #192]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a4d8:	4a30      	ldr	r2, [pc, #192]	; (800a59c <HAL_FMAC_MspInit+0xf0>)
 800a4da:	601a      	str	r2, [r3, #0]
    hdma_fmac_write.Init.Request = DMA_REQUEST_FMAC_WRITE;
 800a4dc:	4b2e      	ldr	r3, [pc, #184]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a4de:	226f      	movs	r2, #111	; 0x6f
 800a4e0:	605a      	str	r2, [r3, #4]
    hdma_fmac_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a4e2:	4b2d      	ldr	r3, [pc, #180]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a4e4:	2210      	movs	r2, #16
 800a4e6:	609a      	str	r2, [r3, #8]
    hdma_fmac_write.Init.PeriphInc = DMA_PINC_DISABLE;
 800a4e8:	4b2b      	ldr	r3, [pc, #172]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	60da      	str	r2, [r3, #12]
    hdma_fmac_write.Init.MemInc = DMA_MINC_ENABLE;
 800a4ee:	4b2a      	ldr	r3, [pc, #168]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a4f0:	2280      	movs	r2, #128	; 0x80
 800a4f2:	611a      	str	r2, [r3, #16]
    hdma_fmac_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a4f4:	4b28      	ldr	r3, [pc, #160]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a4f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4fa:	615a      	str	r2, [r3, #20]
    hdma_fmac_write.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a4fc:	4b26      	ldr	r3, [pc, #152]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a4fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a502:	619a      	str	r2, [r3, #24]
    hdma_fmac_write.Init.Mode = DMA_NORMAL;
 800a504:	4b24      	ldr	r3, [pc, #144]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a506:	2200      	movs	r2, #0
 800a508:	61da      	str	r2, [r3, #28]
    hdma_fmac_write.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a50a:	4b23      	ldr	r3, [pc, #140]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a50c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a510:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_write) != HAL_OK)
 800a512:	4821      	ldr	r0, [pc, #132]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a514:	f7f7 f8b2 	bl	800167c <HAL_DMA_Init>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <HAL_FMAC_MspInit+0x76>
    {
      Error_Handler();
 800a51e:	f7ff feb1 	bl	800a284 <Error_Handler>
    }

    __HAL_LINKDMA(hfmac,hdmaIn,hdma_fmac_write);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a1c      	ldr	r2, [pc, #112]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a526:	625a      	str	r2, [r3, #36]	; 0x24
 800a528:	4a1b      	ldr	r2, [pc, #108]	; (800a598 <HAL_FMAC_MspInit+0xec>)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6293      	str	r3, [r2, #40]	; 0x28

    /* FMAC_READ Init */
    hdma_fmac_read.Instance = DMA2_Channel1;
 800a52e:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a530:	4a1c      	ldr	r2, [pc, #112]	; (800a5a4 <HAL_FMAC_MspInit+0xf8>)
 800a532:	601a      	str	r2, [r3, #0]
    hdma_fmac_read.Init.Request = DMA_REQUEST_FMAC_READ;
 800a534:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a536:	226e      	movs	r2, #110	; 0x6e
 800a538:	605a      	str	r2, [r3, #4]
    hdma_fmac_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a53a:	4b19      	ldr	r3, [pc, #100]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	609a      	str	r2, [r3, #8]
    hdma_fmac_read.Init.PeriphInc = DMA_PINC_DISABLE;
 800a540:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a542:	2200      	movs	r2, #0
 800a544:	60da      	str	r2, [r3, #12]
    hdma_fmac_read.Init.MemInc = DMA_MINC_ENABLE;
 800a546:	4b16      	ldr	r3, [pc, #88]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a548:	2280      	movs	r2, #128	; 0x80
 800a54a:	611a      	str	r2, [r3, #16]
    hdma_fmac_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a54c:	4b14      	ldr	r3, [pc, #80]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a54e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a552:	615a      	str	r2, [r3, #20]
    hdma_fmac_read.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a554:	4b12      	ldr	r3, [pc, #72]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a55a:	619a      	str	r2, [r3, #24]
    hdma_fmac_read.Init.Mode = DMA_NORMAL;
 800a55c:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a55e:	2200      	movs	r2, #0
 800a560:	61da      	str	r2, [r3, #28]
    hdma_fmac_read.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a562:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a568:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_read) != HAL_OK)
 800a56a:	480d      	ldr	r0, [pc, #52]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a56c:	f7f7 f886 	bl	800167c <HAL_DMA_Init>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <HAL_FMAC_MspInit+0xce>
    {
      Error_Handler();
 800a576:	f7ff fe85 	bl	800a284 <Error_Handler>
    }

    __HAL_LINKDMA(hfmac,hdmaOut,hdma_fmac_read);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a08      	ldr	r2, [pc, #32]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a57e:	629a      	str	r2, [r3, #40]	; 0x28
 800a580:	4a07      	ldr	r2, [pc, #28]	; (800a5a0 <HAL_FMAC_MspInit+0xf4>)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	40021400 	.word	0x40021400
 800a594:	40021000 	.word	0x40021000
 800a598:	20001b40 	.word	0x20001b40
 800a59c:	4002006c 	.word	0x4002006c
 800a5a0:	20001e8c 	.word	0x20001e8c
 800a5a4:	40020408 	.word	0x40020408

0800a5a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	; 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5b0:	f107 0314 	add.w	r3, r7, #20
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	609a      	str	r2, [r3, #8]
 800a5bc:	60da      	str	r2, [r3, #12]
 800a5be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a3b      	ldr	r2, [pc, #236]	; (800a6b4 <HAL_I2C_MspInit+0x10c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d16f      	bne.n	800a6aa <HAL_I2C_MspInit+0x102>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5ca:	4b3b      	ldr	r3, [pc, #236]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ce:	4a3a      	ldr	r2, [pc, #232]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a5d0:	f043 0301 	orr.w	r3, r3, #1
 800a5d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5d6:	4b38      	ldr	r3, [pc, #224]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5e2:	4b35      	ldr	r3, [pc, #212]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e6:	4a34      	ldr	r2, [pc, #208]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a5e8:	f043 0302 	orr.w	r3, r3, #2
 800a5ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5ee:	4b32      	ldr	r3, [pc, #200]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a600:	2312      	movs	r3, #18
 800a602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a608:	2300      	movs	r3, #0
 800a60a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a60c:	2304      	movs	r3, #4
 800a60e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a610:	f107 0314 	add.w	r3, r7, #20
 800a614:	4619      	mov	r1, r3
 800a616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a61a:	f7f7 fcf5 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a61e:	2380      	movs	r3, #128	; 0x80
 800a620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a622:	2312      	movs	r3, #18
 800a624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62a:	2300      	movs	r3, #0
 800a62c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a62e:	2304      	movs	r3, #4
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	4619      	mov	r1, r3
 800a638:	4820      	ldr	r0, [pc, #128]	; (800a6bc <HAL_I2C_MspInit+0x114>)
 800a63a:	f7f7 fce5 	bl	8002008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a63e:	4b1e      	ldr	r3, [pc, #120]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a642:	4a1d      	ldr	r2, [pc, #116]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a648:	6593      	str	r3, [r2, #88]	; 0x58
 800a64a:	4b1b      	ldr	r3, [pc, #108]	; (800a6b8 <HAL_I2C_MspInit+0x110>)
 800a64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a64e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a652:	60bb      	str	r3, [r7, #8]
 800a654:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 800a656:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a658:	4a1a      	ldr	r2, [pc, #104]	; (800a6c4 <HAL_I2C_MspInit+0x11c>)
 800a65a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800a65c:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a65e:	2210      	movs	r2, #16
 800a660:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a662:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a664:	2200      	movs	r2, #0
 800a666:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a668:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a66e:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a670:	2280      	movs	r2, #128	; 0x80
 800a672:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a674:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a676:	2200      	movs	r2, #0
 800a678:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800a680:	4b0f      	ldr	r3, [pc, #60]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a682:	2200      	movs	r2, #0
 800a684:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a686:	4b0e      	ldr	r3, [pc, #56]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a68c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800a68e:	480c      	ldr	r0, [pc, #48]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a690:	f7f6 fff4 	bl	800167c <HAL_DMA_Init>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 800a69a:	f7ff fdf3 	bl	800a284 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a07      	ldr	r2, [pc, #28]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a6a2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a6a4:	4a06      	ldr	r2, [pc, #24]	; (800a6c0 <HAL_I2C_MspInit+0x118>)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a6aa:	bf00      	nop
 800a6ac:	3728      	adds	r7, #40	; 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	40005400 	.word	0x40005400
 800a6b8:	40021000 	.word	0x40021000
 800a6bc:	48000400 	.word	0x48000400
 800a6c0:	20001e2c 	.word	0x20001e2c
 800a6c4:	4002001c 	.word	0x4002001c

0800a6c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a34      	ldr	r2, [pc, #208]	; (800a7a8 <HAL_TIM_Base_MspInit+0xe0>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d13f      	bne.n	800a75a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a6da:	4b34      	ldr	r3, [pc, #208]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a6dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6de:	4a33      	ldr	r2, [pc, #204]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a6e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a6e4:	6613      	str	r3, [r2, #96]	; 0x60
 800a6e6:	4b31      	ldr	r3, [pc, #196]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a6e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	697b      	ldr	r3, [r7, #20]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 800a6f2:	4b2f      	ldr	r3, [pc, #188]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a6f4:	4a2f      	ldr	r2, [pc, #188]	; (800a7b4 <HAL_TIM_Base_MspInit+0xec>)
 800a6f6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800a6f8:	4b2d      	ldr	r3, [pc, #180]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a6fa:	222a      	movs	r2, #42	; 0x2a
 800a6fc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a6fe:	4b2c      	ldr	r3, [pc, #176]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a700:	2210      	movs	r2, #16
 800a702:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a704:	4b2a      	ldr	r3, [pc, #168]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a706:	2200      	movs	r2, #0
 800a708:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a70a:	4b29      	ldr	r3, [pc, #164]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a70c:	2280      	movs	r2, #128	; 0x80
 800a70e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a712:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a716:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a718:	4b25      	ldr	r3, [pc, #148]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a71a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a71e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800a720:	4b23      	ldr	r3, [pc, #140]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a722:	2220      	movs	r2, #32
 800a724:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800a726:	4b22      	ldr	r3, [pc, #136]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a728:	2200      	movs	r2, #0
 800a72a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800a72c:	4820      	ldr	r0, [pc, #128]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a72e:	f7f6 ffa5 	bl	800167c <HAL_DMA_Init>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800a738:	f7ff fda4 	bl	800a284 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a740:	625a      	str	r2, [r3, #36]	; 0x24
 800a742:	4a1b      	ldr	r2, [pc, #108]	; (800a7b0 <HAL_TIM_Base_MspInit+0xe8>)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800a748:	2200      	movs	r2, #0
 800a74a:	2100      	movs	r1, #0
 800a74c:	201a      	movs	r0, #26
 800a74e:	f7f6 fe83 	bl	8001458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800a752:	201a      	movs	r0, #26
 800a754:	f7f6 fe9a 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a758:	e022      	b.n	800a7a0 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a762:	d10c      	bne.n	800a77e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a764:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a768:	4a10      	ldr	r2, [pc, #64]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	6593      	str	r3, [r2, #88]	; 0x58
 800a770:	4b0e      	ldr	r3, [pc, #56]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	613b      	str	r3, [r7, #16]
 800a77a:	693b      	ldr	r3, [r7, #16]
}
 800a77c:	e010      	b.n	800a7a0 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a0d      	ldr	r2, [pc, #52]	; (800a7b8 <HAL_TIM_Base_MspInit+0xf0>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d10b      	bne.n	800a7a0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a788:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a78c:	4a07      	ldr	r2, [pc, #28]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a78e:	f043 0304 	orr.w	r3, r3, #4
 800a792:	6593      	str	r3, [r2, #88]	; 0x58
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <HAL_TIM_Base_MspInit+0xe4>)
 800a796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	68fb      	ldr	r3, [r7, #12]
}
 800a7a0:	bf00      	nop
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	40012c00 	.word	0x40012c00
 800a7ac:	40021000 	.word	0x40021000
 800a7b0:	2000197c 	.word	0x2000197c
 800a7b4:	40020008 	.word	0x40020008
 800a7b8:	40000800 	.word	0x40000800

0800a7bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a1f      	ldr	r2, [pc, #124]	; (800a848 <HAL_TIM_PWM_MspInit+0x8c>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d137      	bne.n	800a83e <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a7ce:	4b1f      	ldr	r3, [pc, #124]	; (800a84c <HAL_TIM_PWM_MspInit+0x90>)
 800a7d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7d2:	4a1e      	ldr	r2, [pc, #120]	; (800a84c <HAL_TIM_PWM_MspInit+0x90>)
 800a7d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a7d8:	6613      	str	r3, [r2, #96]	; 0x60
 800a7da:	4b1c      	ldr	r3, [pc, #112]	; (800a84c <HAL_TIM_PWM_MspInit+0x90>)
 800a7dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 800a7e6:	4b1a      	ldr	r3, [pc, #104]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a7e8:	4a1a      	ldr	r2, [pc, #104]	; (800a854 <HAL_TIM_PWM_MspInit+0x98>)
 800a7ea:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 800a7ec:	4b18      	ldr	r3, [pc, #96]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a7ee:	2231      	movs	r2, #49	; 0x31
 800a7f0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7f2:	4b17      	ldr	r3, [pc, #92]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7f8:	4b15      	ldr	r3, [pc, #84]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a7fe:	4b14      	ldr	r3, [pc, #80]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a800:	2280      	movs	r2, #128	; 0x80
 800a802:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a804:	4b12      	ldr	r3, [pc, #72]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a80a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a80c:	4b10      	ldr	r3, [pc, #64]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a80e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a812:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800a814:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a816:	2220      	movs	r2, #32
 800a818:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800a81a:	4b0d      	ldr	r3, [pc, #52]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a81c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a820:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800a822:	480b      	ldr	r0, [pc, #44]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a824:	f7f6 ff2a 	bl	800167c <HAL_DMA_Init>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800a82e:	f7ff fd29 	bl	800a284 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a06      	ldr	r2, [pc, #24]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a836:	625a      	str	r2, [r3, #36]	; 0x24
 800a838:	4a05      	ldr	r2, [pc, #20]	; (800a850 <HAL_TIM_PWM_MspInit+0x94>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a83e:	bf00      	nop
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	40013400 	.word	0x40013400
 800a84c:	40021000 	.word	0x40021000
 800a850:	20001ba0 	.word	0x20001ba0
 800a854:	40020430 	.word	0x40020430

0800a858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a860:	f107 0314 	add.w	r3, r7, #20
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	605a      	str	r2, [r3, #4]
 800a86a:	609a      	str	r2, [r3, #8]
 800a86c:	60da      	str	r2, [r3, #12]
 800a86e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a23      	ldr	r2, [pc, #140]	; (800a904 <HAL_TIM_MspPostInit+0xac>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d11e      	bne.n	800a8b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a87a:	4b23      	ldr	r3, [pc, #140]	; (800a908 <HAL_TIM_MspPostInit+0xb0>)
 800a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87e:	4a22      	ldr	r2, [pc, #136]	; (800a908 <HAL_TIM_MspPostInit+0xb0>)
 800a880:	f043 0301 	orr.w	r3, r3, #1
 800a884:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a886:	4b20      	ldr	r3, [pc, #128]	; (800a908 <HAL_TIM_MspPostInit+0xb0>)
 800a888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 800a892:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a898:	2302      	movs	r3, #2
 800a89a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800a8a4:	2306      	movs	r3, #6
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 800a8a8:	f107 0314 	add.w	r3, r7, #20
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8b2:	f7f7 fba9 	bl	8002008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a8b6:	e020      	b.n	800a8fa <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a13      	ldr	r2, [pc, #76]	; (800a90c <HAL_TIM_MspPostInit+0xb4>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d11b      	bne.n	800a8fa <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8c2:	4b11      	ldr	r3, [pc, #68]	; (800a908 <HAL_TIM_MspPostInit+0xb0>)
 800a8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c6:	4a10      	ldr	r2, [pc, #64]	; (800a908 <HAL_TIM_MspPostInit+0xb0>)
 800a8c8:	f043 0302 	orr.w	r3, r3, #2
 800a8cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8ce:	4b0e      	ldr	r3, [pc, #56]	; (800a908 <HAL_TIM_MspPostInit+0xb0>)
 800a8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_IMPELLER_Pin;
 800a8da:	2340      	movs	r3, #64	; 0x40
 800a8dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800a8ea:	2305      	movs	r3, #5
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESC_IMPELLER_GPIO_Port, &GPIO_InitStruct);
 800a8ee:	f107 0314 	add.w	r3, r7, #20
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4806      	ldr	r0, [pc, #24]	; (800a910 <HAL_TIM_MspPostInit+0xb8>)
 800a8f6:	f7f7 fb87 	bl	8002008 <HAL_GPIO_Init>
}
 800a8fa:	bf00      	nop
 800a8fc:	3728      	adds	r7, #40	; 0x28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	40012c00 	.word	0x40012c00
 800a908:	40021000 	.word	0x40021000
 800a90c:	40013400 	.word	0x40013400
 800a910:	48000400 	.word	0x48000400

0800a914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08c      	sub	sp, #48	; 0x30
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a91c:	f107 031c 	add.w	r3, r7, #28
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	605a      	str	r2, [r3, #4]
 800a926:	609a      	str	r2, [r3, #8]
 800a928:	60da      	str	r2, [r3, #12]
 800a92a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a59      	ldr	r2, [pc, #356]	; (800aa98 <HAL_UART_MspInit+0x184>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d154      	bne.n	800a9e0 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a936:	4b59      	ldr	r3, [pc, #356]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a93a:	4a58      	ldr	r2, [pc, #352]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a93c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a940:	6613      	str	r3, [r2, #96]	; 0x60
 800a942:	4b56      	ldr	r3, [pc, #344]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a94a:	61bb      	str	r3, [r7, #24]
 800a94c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a94e:	4b53      	ldr	r3, [pc, #332]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a952:	4a52      	ldr	r2, [pc, #328]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a954:	f043 0301 	orr.w	r3, r3, #1
 800a958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a95a:	4b50      	ldr	r3, [pc, #320]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	617b      	str	r3, [r7, #20]
 800a964:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = SBUS_IN_Pin;
 800a966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a96a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a96c:	2312      	movs	r3, #18
 800a96e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a970:	2300      	movs	r3, #0
 800a972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a974:	2300      	movs	r3, #0
 800a976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a978:	2307      	movs	r3, #7
 800a97a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SBUS_IN_GPIO_Port, &GPIO_InitStruct);
 800a97c:	f107 031c 	add.w	r3, r7, #28
 800a980:	4619      	mov	r1, r3
 800a982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a986:	f7f7 fb3f 	bl	8002008 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800a98a:	4b45      	ldr	r3, [pc, #276]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a98c:	4a45      	ldr	r2, [pc, #276]	; (800aaa4 <HAL_UART_MspInit+0x190>)
 800a98e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800a990:	4b43      	ldr	r3, [pc, #268]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a992:	2218      	movs	r2, #24
 800a994:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a996:	4b42      	ldr	r3, [pc, #264]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a998:	2200      	movs	r2, #0
 800a99a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a99c:	4b40      	ldr	r3, [pc, #256]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a9a2:	4b3f      	ldr	r3, [pc, #252]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9a4:	2280      	movs	r2, #128	; 0x80
 800a9a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9a8:	4b3d      	ldr	r3, [pc, #244]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9ae:	4b3c      	ldr	r3, [pc, #240]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a9b4:	4b3a      	ldr	r3, [pc, #232]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a9ba:	4b39      	ldr	r3, [pc, #228]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9bc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a9c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a9c2:	4837      	ldr	r0, [pc, #220]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9c4:	f7f6 fe5a 	bl	800167c <HAL_DMA_Init>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800a9ce:	f7ff fc59 	bl	800a284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a32      	ldr	r2, [pc, #200]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9d6:	679a      	str	r2, [r3, #120]	; 0x78
 800a9d8:	4a31      	ldr	r2, [pc, #196]	; (800aaa0 <HAL_UART_MspInit+0x18c>)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a9de:	e056      	b.n	800aa8e <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART2)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a30      	ldr	r2, [pc, #192]	; (800aaa8 <HAL_UART_MspInit+0x194>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d151      	bne.n	800aa8e <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a9ea:	4b2c      	ldr	r3, [pc, #176]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ee:	4a2b      	ldr	r2, [pc, #172]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a9f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f4:	6593      	str	r3, [r2, #88]	; 0x58
 800a9f6:	4b29      	ldr	r3, [pc, #164]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800a9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa02:	4b26      	ldr	r3, [pc, #152]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800aa04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa06:	4a25      	ldr	r2, [pc, #148]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800aa08:	f043 0301 	orr.w	r3, r3, #1
 800aa0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa0e:	4b23      	ldr	r3, [pc, #140]	; (800aa9c <HAL_UART_MspInit+0x188>)
 800aa10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800aa1a:	230c      	movs	r3, #12
 800aa1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa1e:	2302      	movs	r3, #2
 800aa20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa26:	2300      	movs	r3, #0
 800aa28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aa2a:	2307      	movs	r3, #7
 800aa2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa2e:	f107 031c 	add.w	r3, r7, #28
 800aa32:	4619      	mov	r1, r3
 800aa34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa38:	f7f7 fae6 	bl	8002008 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800aa3c:	4b1b      	ldr	r3, [pc, #108]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa3e:	4a1c      	ldr	r2, [pc, #112]	; (800aab0 <HAL_UART_MspInit+0x19c>)
 800aa40:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800aa42:	4b1a      	ldr	r3, [pc, #104]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa44:	221b      	movs	r2, #27
 800aa46:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aa48:	4b18      	ldr	r3, [pc, #96]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa4a:	2210      	movs	r2, #16
 800aa4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa4e:	4b17      	ldr	r3, [pc, #92]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aa54:	4b15      	ldr	r3, [pc, #84]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa56:	2280      	movs	r2, #128	; 0x80
 800aa58:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa5a:	4b14      	ldr	r3, [pc, #80]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa60:	4b12      	ldr	r3, [pc, #72]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800aa66:	4b11      	ldr	r3, [pc, #68]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aa6c:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800aa72:	480e      	ldr	r0, [pc, #56]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa74:	f7f6 fe02 	bl	800167c <HAL_DMA_Init>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 800aa7e:	f7ff fc01 	bl	800a284 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a09      	ldr	r2, [pc, #36]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa86:	675a      	str	r2, [r3, #116]	; 0x74
 800aa88:	4a08      	ldr	r2, [pc, #32]	; (800aaac <HAL_UART_MspInit+0x198>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800aa8e:	bf00      	nop
 800aa90:	3730      	adds	r7, #48	; 0x30
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	40013800 	.word	0x40013800
 800aa9c:	40021000 	.word	0x40021000
 800aaa0:	20001c04 	.word	0x20001c04
 800aaa4:	40020030 	.word	0x40020030
 800aaa8:	40004400 	.word	0x40004400
 800aaac:	20001c64 	.word	0x20001c64
 800aab0:	40020044 	.word	0x40020044

0800aab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08c      	sub	sp, #48	; 0x30
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 800aac4:	2200      	movs	r2, #0
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	201a      	movs	r0, #26
 800aaca:	f7f6 fcc5 	bl	8001458 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 800aace:	201a      	movs	r0, #26
 800aad0:	f7f6 fcdc 	bl	800148c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800aad4:	4b1e      	ldr	r3, [pc, #120]	; (800ab50 <HAL_InitTick+0x9c>)
 800aad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aad8:	4a1d      	ldr	r2, [pc, #116]	; (800ab50 <HAL_InitTick+0x9c>)
 800aada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aade:	6613      	str	r3, [r2, #96]	; 0x60
 800aae0:	4b1b      	ldr	r3, [pc, #108]	; (800ab50 <HAL_InitTick+0x9c>)
 800aae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aae8:	60fb      	str	r3, [r7, #12]
 800aaea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800aaec:	f107 0210 	add.w	r2, r7, #16
 800aaf0:	f107 0314 	add.w	r3, r7, #20
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7f8 faf2 	bl	80030e0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800aafc:	f7f8 fada 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 800ab00:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <HAL_InitTick+0xa0>)
 800ab06:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0a:	0c9b      	lsrs	r3, r3, #18
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800ab10:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <HAL_InitTick+0xa4>)
 800ab12:	4a12      	ldr	r2, [pc, #72]	; (800ab5c <HAL_InitTick+0xa8>)
 800ab14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 800ab16:	4b10      	ldr	r3, [pc, #64]	; (800ab58 <HAL_InitTick+0xa4>)
 800ab18:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab1c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800ab1e:	4a0e      	ldr	r2, [pc, #56]	; (800ab58 <HAL_InitTick+0xa4>)
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800ab24:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <HAL_InitTick+0xa4>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab2a:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <HAL_InitTick+0xa4>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800ab30:	4809      	ldr	r0, [pc, #36]	; (800ab58 <HAL_InitTick+0xa4>)
 800ab32:	f7f8 fd3d 	bl	80035b0 <HAL_TIM_Base_Init>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800ab3c:	4806      	ldr	r0, [pc, #24]	; (800ab58 <HAL_InitTick+0xa4>)
 800ab3e:	f7f8 fd8d 	bl	800365c <HAL_TIM_Base_Start_IT>
 800ab42:	4603      	mov	r3, r0
 800ab44:	e000      	b.n	800ab48 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3730      	adds	r7, #48	; 0x30
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	40021000 	.word	0x40021000
 800ab54:	431bde83 	.word	0x431bde83
 800ab58:	20002018 	.word	0x20002018
 800ab5c:	40014800 	.word	0x40014800

0800ab60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ab64:	bf00      	nop
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ab72:	e7fe      	b.n	800ab72 <HardFault_Handler+0x4>

0800ab74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ab78:	e7fe      	b.n	800ab78 <MemManage_Handler+0x4>

0800ab7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ab7e:	e7fe      	b.n	800ab7e <BusFault_Handler+0x4>

0800ab80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ab84:	e7fe      	b.n	800ab84 <UsageFault_Handler+0x4>

0800ab86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab86:	b480      	push	{r7}
 800ab88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab8a:	bf00      	nop
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800ab98:	4802      	ldr	r0, [pc, #8]	; (800aba4 <DMA1_Channel1_IRQHandler+0x10>)
 800ab9a:	f7f6 fe92 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800ab9e:	bf00      	nop
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	2000197c 	.word	0x2000197c

0800aba8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800abac:	4802      	ldr	r0, [pc, #8]	; (800abb8 <DMA1_Channel2_IRQHandler+0x10>)
 800abae:	f7f6 fe88 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800abb2:	bf00      	nop
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20001e2c 	.word	0x20001e2c

0800abbc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800abc0:	4802      	ldr	r0, [pc, #8]	; (800abcc <DMA1_Channel3_IRQHandler+0x10>)
 800abc2:	f7f6 fe7e 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800abc6:	bf00      	nop
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20001c04 	.word	0x20001c04

0800abd0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800abd4:	4802      	ldr	r0, [pc, #8]	; (800abe0 <DMA1_Channel4_IRQHandler+0x10>)
 800abd6:	f7f6 fe74 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800abda:	bf00      	nop
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20001c64 	.word	0x20001c64

0800abe4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800abe8:	4802      	ldr	r0, [pc, #8]	; (800abf4 <DMA1_Channel5_IRQHandler+0x10>)
 800abea:	f7f6 fe6a 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800abee:	bf00      	nop
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20001fb8 	.word	0x20001fb8

0800abf8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_write);
 800abfc:	4802      	ldr	r0, [pc, #8]	; (800ac08 <DMA1_Channel6_IRQHandler+0x10>)
 800abfe:	f7f6 fe60 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800ac02:	bf00      	nop
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20001b40 	.word	0x20001b40

0800ac0c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ac10:	4803      	ldr	r0, [pc, #12]	; (800ac20 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800ac12:	f7f8 fea5 	bl	8003960 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800ac16:	4803      	ldr	r0, [pc, #12]	; (800ac24 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800ac18:	f7f8 fea2 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800ac1c:	bf00      	nop
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20001dec 	.word	0x20001dec
 800ac24:	20002018 	.word	0x20002018

0800ac28 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_read);
 800ac2c:	4802      	ldr	r0, [pc, #8]	; (800ac38 <DMA2_Channel1_IRQHandler+0x10>)
 800ac2e:	f7f6 fe48 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800ac32:	bf00      	nop
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20001e8c 	.word	0x20001e8c

0800ac3c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800ac40:	4802      	ldr	r0, [pc, #8]	; (800ac4c <DMA2_Channel3_IRQHandler+0x10>)
 800ac42:	f7f6 fe3e 	bl	80018c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800ac46:	bf00      	nop
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20001ba0 	.word	0x20001ba0

0800ac50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ac54:	4b08      	ldr	r3, [pc, #32]	; (800ac78 <SystemInit+0x28>)
 800ac56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5a:	4a07      	ldr	r2, [pc, #28]	; (800ac78 <SystemInit+0x28>)
 800ac5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ac64:	4b04      	ldr	r3, [pc, #16]	; (800ac78 <SystemInit+0x28>)
 800ac66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac6a:	609a      	str	r2, [r3, #8]
#endif
}
 800ac6c:	bf00      	nop
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	e000ed00 	.word	0xe000ed00

0800ac7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ac7c:	480d      	ldr	r0, [pc, #52]	; (800acb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ac7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ac80:	480d      	ldr	r0, [pc, #52]	; (800acb8 <LoopForever+0x6>)
  ldr r1, =_edata
 800ac82:	490e      	ldr	r1, [pc, #56]	; (800acbc <LoopForever+0xa>)
  ldr r2, =_sidata
 800ac84:	4a0e      	ldr	r2, [pc, #56]	; (800acc0 <LoopForever+0xe>)
  movs r3, #0
 800ac86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800ac88:	e002      	b.n	800ac90 <LoopCopyDataInit>

0800ac8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ac8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ac8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ac8e:	3304      	adds	r3, #4

0800ac90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ac90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ac92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ac94:	d3f9      	bcc.n	800ac8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ac96:	4a0b      	ldr	r2, [pc, #44]	; (800acc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ac98:	4c0b      	ldr	r4, [pc, #44]	; (800acc8 <LoopForever+0x16>)
  movs r3, #0
 800ac9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ac9c:	e001      	b.n	800aca2 <LoopFillZerobss>

0800ac9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ac9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aca0:	3204      	adds	r2, #4

0800aca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aca4:	d3fb      	bcc.n	800ac9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800aca6:	f7ff ffd3 	bl	800ac50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800acaa:	f000 f811 	bl	800acd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800acae:	f7fe fcad 	bl	800960c <main>

0800acb2 <LoopForever>:

LoopForever:
    b LoopForever
 800acb2:	e7fe      	b.n	800acb2 <LoopForever>
  ldr   r0, =_estack
 800acb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800acb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800acbc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800acc0:	0800addc 	.word	0x0800addc
  ldr r2, =_sbss
 800acc4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800acc8:	20002058 	.word	0x20002058

0800accc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800accc:	e7fe      	b.n	800accc <ADC1_2_IRQHandler>
	...

0800acd0 <__libc_init_array>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	4e0d      	ldr	r6, [pc, #52]	; (800ad08 <__libc_init_array+0x38>)
 800acd4:	4c0d      	ldr	r4, [pc, #52]	; (800ad0c <__libc_init_array+0x3c>)
 800acd6:	1ba4      	subs	r4, r4, r6
 800acd8:	10a4      	asrs	r4, r4, #2
 800acda:	2500      	movs	r5, #0
 800acdc:	42a5      	cmp	r5, r4
 800acde:	d109      	bne.n	800acf4 <__libc_init_array+0x24>
 800ace0:	4e0b      	ldr	r6, [pc, #44]	; (800ad10 <__libc_init_array+0x40>)
 800ace2:	4c0c      	ldr	r4, [pc, #48]	; (800ad14 <__libc_init_array+0x44>)
 800ace4:	f000 f82c 	bl	800ad40 <_init>
 800ace8:	1ba4      	subs	r4, r4, r6
 800acea:	10a4      	asrs	r4, r4, #2
 800acec:	2500      	movs	r5, #0
 800acee:	42a5      	cmp	r5, r4
 800acf0:	d105      	bne.n	800acfe <__libc_init_array+0x2e>
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acf8:	4798      	blx	r3
 800acfa:	3501      	adds	r5, #1
 800acfc:	e7ee      	b.n	800acdc <__libc_init_array+0xc>
 800acfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad02:	4798      	blx	r3
 800ad04:	3501      	adds	r5, #1
 800ad06:	e7f2      	b.n	800acee <__libc_init_array+0x1e>
 800ad08:	0800add4 	.word	0x0800add4
 800ad0c:	0800add4 	.word	0x0800add4
 800ad10:	0800add4 	.word	0x0800add4
 800ad14:	0800add8 	.word	0x0800add8

0800ad18 <memcpy>:
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	1e43      	subs	r3, r0, #1
 800ad1c:	440a      	add	r2, r1
 800ad1e:	4291      	cmp	r1, r2
 800ad20:	d100      	bne.n	800ad24 <memcpy+0xc>
 800ad22:	bd10      	pop	{r4, pc}
 800ad24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad2c:	e7f7      	b.n	800ad1e <memcpy+0x6>

0800ad2e <memset>:
 800ad2e:	4402      	add	r2, r0
 800ad30:	4603      	mov	r3, r0
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d100      	bne.n	800ad38 <memset+0xa>
 800ad36:	4770      	bx	lr
 800ad38:	f803 1b01 	strb.w	r1, [r3], #1
 800ad3c:	e7f9      	b.n	800ad32 <memset+0x4>
	...

0800ad40 <_init>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	bf00      	nop
 800ad44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad46:	bc08      	pop	{r3}
 800ad48:	469e      	mov	lr, r3
 800ad4a:	4770      	bx	lr

0800ad4c <_fini>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	bf00      	nop
 800ad50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad52:	bc08      	pop	{r3}
 800ad54:	469e      	mov	lr, r3
 800ad56:	4770      	bx	lr
